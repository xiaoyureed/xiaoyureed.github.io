"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1662],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return g}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),g=a,h=d["".concat(l,".").concat(g)]||d[g]||c[g]||o;return t?r.createElement(h,i(i({ref:n},u),{},{components:t})):r.createElement(h,i({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},50413:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var r=t(83117),a=t(80102),o=(t(67294),t(3905)),i=["components"],s={title:"Package Spring Boot & React App Together",date:"2022-7-3",tags:["spring","react"],authors:"me",keywords:["spring","react"]},l=void 0,p={permalink:"/spring-boot-react-package-together",editUrl:"https://github.com/xiaoyureed/xiaoyureed.github.io/edit/main/blog/spring-boot-react-package-together.md",source:"@site/blog/spring-boot-react-package-together.md",title:"Package Spring Boot & React App Together",description:"This article I will try to package a react app into Spring boot, so that they can share the same port, and make sure that the react static content can be served inside the spring boot app.",date:"2022-07-03T00:00:00.000Z",formattedDate:"2022\u5e747\u67083\u65e5",tags:[{label:"spring",permalink:"/tags/spring"},{label:"react",permalink:"/tags/react"}],readingTime:3.263333333333333,hasTruncateMarker:!0,authors:[{name:"Xiao Yu",title:"Unknown",url:"https://github.com/xiaoyureed",imageURL:"https://github.com/xiaoyureed.png",key:"me"}],frontMatter:{title:"Package Spring Boot & React App Together",date:"2022-7-3",tags:["spring","react"],authors:"me",keywords:["spring","react"]},prevItem:{title:"BT torrent \u534f\u8bae\u4ee5\u53ca\u5c1d\u8bd5\u5199\u4e00\u4e2a\u4e0b\u8f7d\u5de5\u5177",permalink:"/2022/11/10/bt-torrent-download"},nextItem:{title:"Web \u5f00\u53d1\u6a21\u5f0f\u7684\u8fdb\u5316",permalink:"/2022/06/11/web-dev-history"}},u={authorsImageUrls:[void 0]},c=[{value:"create the basic structure",id:"create-the-basic-structure",level:2},{value:"perform the integration process manually",id:"perform-the-integration-process-manually",level:2},{value:"integrate with maven plugins",id:"integrate-with-maven-plugins",level:2},{value:"How to develop and debug",id:"how-to-develop-and-debug",level:2},{value:"reference materials",id:"reference-materials",level:2}],d={toc:c};function g(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This article I will try to package a react app into Spring boot, so that they can share the same port, and make sure that the react static content can be served inside the spring boot app."),(0,o.kt)("p",null,"Here I'm gonna take a next.js app for example."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#create-the-basic-structure"},"create the basic structure")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#perform-the-integration-process-manually"},"perform the integration process manually")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#integrate-with-maven-plugins"},"integrate with maven plugins")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-to-develop-and-debug"},"How to develop and debug")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#reference-materials"},"reference materials"))),(0,o.kt)("h2",{id:"create-the-basic-structure"},"create the basic structure"),(0,o.kt)("p",null,"First of all, we have to create a spring boot app and a react app, As regards of spring boot app, please refer to ",(0,o.kt)("a",{parentName:"p",href:"https://start.spring.io."},"https://start.spring.io.")," Then configurations about the static content route need set up:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n    /**\n     * To serve the nextjs static resources directly\n     */\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler("/**").addResourceLocations("classpath:/static/");\n    }\n\n/**\n     * \u4e3a\u9759\u6001\u9875\u9762\u7684\u8def\u7531\u81ea\u52a8\u8865\u5168 .html \u7136\u540e\u91cd\u5b9a\u5411 (nextjs\u5728\u6253\u5305\u8fdb springboot \u540e, \u4f5c\u4e3aspringboot \u91cc\u7684\u9759\u6001\u8d44\u6e90, \u6574\u4e2a\u5e94\u7528\u53ea\u8ba4\u8bc6 xxx.html. \u5f53\u7136\u5982\u679c\u524d\u540e\u5206\u79bb\u5f00\u53d1\u65f6, nextjs \u7684\u670d\u52a1\u5668\u662f\u8ba4\u8bc6 xxx\u7684)\n     * \n     * \u5f00\u53d1\u9636\u6bb5\u53ef\u4ee5\u6ca1\u6709, \u4f46\u662f\u6253\u5305\u65f6\u8981\u52a0\u4e0a\n     */\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new HandlerInterceptor() {\n            @Override\n            public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n                boolean isApiHandle = handler instanceof HandlerMethod;\n                String servletPath = request.getServletPath();\n\n                if (!isApiHandle && !"/".contentEquals(servletPath) && FilenameUtils.getExtension(servletPath).isEmpty()) {\n                    request.getRequestDispatcher(servletPath + ".html").forward(request, response);\n                    return false;\n                }\n\n                return true;\n            }\n        });\n    }\n\n')),(0,o.kt)("p",null,"For next.js app, check the steps below: (Execute the following command in the root path of the java project)"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},'Usually I name the next.js app with "frontend"')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npx create-next-app@latest --ts\n# or\nyarn create next-app --ts\n# or\npnpm create next-app --typescript\n\n")),(0,o.kt)("p",null,"change the next.config.js"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  //https://stackoverflow.com/questions/65058598/nextjs-cors-issue\n  async rewrites() {\n    return {\n      fallback: [\n        {\n          source: '/api/:path*',\n          destination: 'http://localhost:8080/api/:path*'\n        }\n      ]\n    }\n  },\n  reactStrictMode: true,\n  images: {\n    unoptimized: true\n  },\n  swcMinify: true\n}\n\nmodule.exports = nextConfig\n\n")),(0,o.kt)("p",null,'change the package.json (Just insert the following line into "scripts" section)'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"export": "next build && next export"\n')),(0,o.kt)("h2",{id:"perform-the-integration-process-manually"},"perform the integration process manually"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Step -1 : Edit package.json -> add "export":"next export" in the scripts property\n\n    This measure is just form normal react app, if come up with next.js app, please refer to above\n\nStep - 2: The above step will build a folder named "out". Copy the contents of out folder. Paste it in the src -> main -> resources -> static folder.\n\nStep -3: Now build the spring boot jar/war, then run it. It will serve the contents inside the static folder.\n')),(0,o.kt)("h2",{id:"integrate-with-maven-plugins"},"integrate with maven plugins"),(0,o.kt)("p",null,"By using plugin ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend-maven-plugin")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"maven-resources-plugin")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},"\x3c!-- just for using npm --\x3e\n<plugin>\n    <groupId>com.github.eirslett</groupId>\n    <artifactId>frontend-maven-plugin</artifactId>\n    <version>1.11.3</version>\n    <executions>\n      \x3c!-- check if nodejs/npm installed --\x3e\n        <execution>\n            <id>install node and npm</id>\n            <goals>\n                <goal>install-node-and-npm</goal>\n            </goals>\n            \x3c!-- optional, the default value is like this --\x3e\n            <phase>generate-resources</phase>\n        </execution>\n        \x3c!-- clear node_modules and package-lock.json --\x3e\n        <execution>\n            <id>npm run clean</id>\n            <goals>\n                <goal>npm</goal>\n            </goals>\n            <phase>generate-resources</phase>\n            <configuration>\n                <arguments>run clean</arguments>\n            </configuration>\n        </execution>\n        \x3c!-- install dependencies --\x3e\n        <execution>\n            <id>npm install</id>\n            <goals>\n                <goal>npm</goal>\n            </goals>\n            <phase>generate-resources</phase>\n            <configuration>\n                <arguments>install --registry=https://registry.npm.taobao.org</arguments>\n            </configuration>\n        </execution>\n        <execution>\n            <id>npm run build and export</id>\n            <goals>\n                <goal>npm</goal>\n            </goals>\n            <phase>generate-resources</phase>\n            <configuration>\n                <arguments>run export</arguments>\n            </configuration>\n        </execution>\n    </executions>\n    <configuration>\n        <workingDirectory>${project.baseDir}/frontend</workingDirectory>\n        <installDirectory>${project.build.directory}</installDirectory>\n        <nodeVersion>v18.14.0</nodeVersion>\n        \x3c!-- optional, just for projects in china main land --\x3e\n        \x3c!-- <downloadRoot>http://npm.taobao.org/mirrors/node/</downloadRoot> --\x3e\n    </configuration>\n</plugin>\n\n\x3c!-- just for using yarn --\x3e\n<plugin>\n                <groupId>com.github.eirslett</groupId>\n                <artifactId>frontend-maven-plugin</artifactId>\n                <version>1.11.3</version>\n                <executions>\n                    \x3c!-- check if nodejs/npm installed --\x3e\n                    <execution>\n                        <id>install-frontend-tools</id>\n                        <goals>\n                            <goal>install-node-and-yarn</goal>\n                        </goals>\n                        \x3c!-- optional, the default value is like this --\x3e\n                        <phase>generate-resources</phase>\n                    </execution>\n\n                    \x3c!-- install dependencies --\x3e\n                    <execution>\n                        <id>yarn-install</id>\n                        <goals>\n                            <goal>yarn</goal>\n                        </goals>\n                        <phase>generate-resources</phase>\n                        <configuration>\n                            <arguments>install --registry=https://registry.npm.taobao.org</arguments>\n\x3c!--                            <arguments>install</arguments>--\x3e\n                        </configuration>\n                    </execution>\n                    <execution>\n                        <id>yarn-build-and-export</id>\n                        <goals>\n                            <goal>yarn</goal>\n                        </goals>\n                        <phase>generate-resources</phase>\n                        <configuration>\n                            <arguments>export</arguments>\n                        </configuration>\n                    </execution>\n                </executions>\n                <configuration>\n                    <workingDirectory>${frontend.dir}</workingDirectory>\n                    <installDirectory>${project.build.directory}</installDirectory>\n                    <nodeVersion>v18.14.0</nodeVersion>\n                    <yarnVersion>v1.22.19</yarnVersion>\n                    \x3c!-- optional, just for projects in China main land --\x3e\n                    \x3c!-- <downloadRoot>http://npm.taobao.org/mirrors/node/</downloadRoot> --\x3e\n                </configuration>\n            </plugin>\n\n<plugin>\n                <artifactId>maven-resources-plugin</artifactId>\n                <version>3.2.0</version>\n                <executions>\n                    <execution>\n                        <id>copy-resources</id>\n                        <phase>generate-resources</phase>\n                        <goals>\n                            <goal>copy-resources</goal>\n                        </goals>\n                        <configuration>\n                            <outputDirectory>${basedir}/target/classes/static</outputDirectory>\n              \x3c!-- or --\x3e\n              \x3c!-- <outputDirectory>${project.build.outputDirectory}/static</outputDirectory> --\x3e\n                            <resources>\n                                <resource>\n                                    <directory>${basedir}/frontend/out</directory>\n                                    <filtering>false</filtering>\n                                </resource>\n                            </resources>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n")),(0,o.kt)("p",null,"Then we can issue command ",(0,o.kt)("inlineCode",{parentName:"p"},"mvn spring-boot:run")," and visit http://localhost:8080 to check the effect"),(0,o.kt)("p",null,"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"mvn package -D maven.test.skip=true")," to package jar file."),(0,o.kt)("h2",{id:"how-to-develop-and-debug"},"How to develop and debug"),(0,o.kt)("p",null,"So far, we can only package the final jar file with the above setup, but how to develop and debug with enjoying the benefits of hot reload?"),(0,o.kt)("p",null,"We should follow the traditional way of separating the backend and frontend to conduct the development."),(0,o.kt)("p",null,"For example, now we have a backend service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'\n@RestController\n@RequestMapping("/api/students")\npublic class StudentController {\n    private StudentRepository studentRepository;\n\n    public StudentController(StudentRepository studentRepository) {\n        this.studentRepository = studentRepository;\n    }\n\n    @PostMapping({ "", "/" })\n    public ResponseEntity<BaseResponse<List<Student>>> findAll() throws Exception {\n        return ResponseEntity.ok(BaseResponse.ok(studentRepository.findAll()));\n    }\n}\n\n')),(0,o.kt)("p",null,"and a nextjs page:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {useEffect, useState} from \"react\";\n\ninterface Student {\n    id: string;\n    name: string;\n    age: number;\n    gender: number;\n    createdAt: Date;\n    updatedAt: Date;\n}\n\nconst Students = () => {\n\n    let [students, setStudents] = useState<Student[] | null>(null);\n    let [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        setLoading(true)\n\n        fetch('/api/students', {\n            method: 'POST'\n        })\n            .then(resp => resp.json())\n            .then(resp => {\n                setStudents(() => resp.data)\n                setLoading(false)\n            })\n    }, [])\n\n    return (\n        <main>\n            <ul>\n                {loading ? (<div>loading</div>) : students?.map((student, i) => {\n                    return (\n                        <li key={i}>\n                            {`${student.id} | ${student.name} | ${student.age} | ${student.gender === 1 ? '\u7537' : '\u5973'} | ${student.createdAt} | ${student.updatedAt}`}\n                        </li>\n                    )\n                })}\n            </ul>\n        </main>\n    )\n}\n\nexport default Students\n\n")),(0,o.kt)("p",null,"Then we can start the backend with the debug/start button offered by ide or by using the main method directly, the backend service will start on port 8080, for the frontend app, enter ",(0,o.kt)("inlineCode",{parentName:"p"},"frontend")," folder, issue ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn dev")," to start the frontend app on port 3000, now we can visit localhost:3000 to check the page"),(0,o.kt)("h2",{id:"reference-materials"},"reference materials"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/xiaoyureed/next-boot"},"https://github.com/xiaoyureed/next-boot")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/tisonkun/springboot-nextjs-demo"},"https://github.com/tisonkun/springboot-nextjs-demo")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.tisonkun.org/2022/10/22/springboot-nextjs/"},"https://www.tisonkun.org/2022/10/22/springboot-nextjs/")))}g.isMDXComponent=!0}}]);