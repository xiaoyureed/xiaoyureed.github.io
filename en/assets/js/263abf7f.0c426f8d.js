"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5138],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return d}});var r=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},l=Object.keys(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var o=r.createContext({}),p=function(n){var e=r.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=p(n.components);return r.createElement(o.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,l=n.originalType,o=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),c=p(t),d=a,f=c["".concat(o,".").concat(d)]||c[d]||m[d]||l;return t?r.createElement(f,i(i({ref:e},u),{},{components:t})):r.createElement(f,i({ref:e},u))}));function d(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var l=t.length,i=new Array(l);i[0]=c;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=n,s.mdxType="string"==typeof n?n:a,i[1]=s;for(var p=2;p<l;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},42892:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var r=t(83117),a=t(80102),l=(t(67294),t(3905)),i=["components"],s={title:"Rust \u7b14\u8bb0\ud83c\udf08",tags:["rust"],date:new Date("2022-04-23T00:00:00.000Z"),toc_min_heading_level:2,toc_max_heading_level:5},o=void 0,p={unversionedId:"rust-note",id:"rust-note",title:"Rust \u7b14\u8bb0\ud83c\udf08",description:"- 1. \u7b80\u5355\u4ecb\u7ecd",source:"@site/docs/rust-note.md",sourceDirName:".",slug:"/rust-note",permalink:"/en/docs/rust-note",draft:!1,tags:[{label:"rust",permalink:"/en/docs/tags/rust"}],version:"current",frontMatter:{title:"Rust \u7b14\u8bb0\ud83c\udf08",tags:["rust"],date:"2022-04-23T00:00:00.000Z",toc_min_heading_level:2,toc_max_heading_level:5},sidebar:"tutorialSidebar",previous:{title:"Regular Expression \u6b63\u5219\ud83c\udf08",permalink:"/en/docs/regex"},next:{title:"Serverless",permalink:"/en/docs/serverless"}},u={},m=[{value:"1.1. Pros and Cons",id:"11-pros-and-cons",level:2},{value:"1.2. \u67b6\u6784",id:"12-\u67b6\u6784",level:2},{value:"1.3. \u4f18\u70b9 \u5bf9\u6bd4",id:"13-\u4f18\u70b9-\u5bf9\u6bd4",level:2},{value:"1.4. \u601d\u60f3",id:"14-\u601d\u60f3",level:2},{value:"1.5. \u8bed\u4e49 \u6982\u5ff5",id:"15-\u8bed\u4e49-\u6982\u5ff5",level:2},{value:"2.1. install",id:"21-install",level:2},{value:"2.2. \u547d\u4ee4\u884c\u5de5\u5177\u4f7f\u7528",id:"22-\u547d\u4ee4\u884c\u5de5\u5177\u4f7f\u7528",level:2},{value:"2.3. IDE",id:"23-ide",level:2},{value:"2.4. \u914d\u7f6e\u56fd\u5185\u955c\u50cf",id:"24-\u914d\u7f6e\u56fd\u5185\u955c\u50cf",level:2},{value:"3.1. path \u8def\u5f84",id:"31-path-\u8def\u5f84",level:2},{value:"3.2. \u65f6\u95f4",id:"32-\u65f6\u95f4",level:2},{value:"4.1. nll",id:"41-nll",level:2},{value:"4.2. Raw identifier",id:"42-raw-identifier",level:2},{value:"4.3. \u7b80\u5316\u6a21\u5f0f\u5339\u914d",id:"43-\u7b80\u5316\u6a21\u5f0f\u5339\u914d",level:2},{value:"4.4. main \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de Result",id:"44-main-\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de-result",level:2},{value:"4.5. impl trait \u62bd\u8c61\u7c7b\u578b",id:"45-impl-trait-\u62bd\u8c61\u7c7b\u578b",level:2},{value:"5.1. \u6ce8\u91ca",id:"51-\u6ce8\u91ca",level:2},{value:"5.2. \u53d8\u91cf\u8d4b\u503c",id:"52-\u53d8\u91cf\u8d4b\u503c",level:2},{value:"5.2.1. \u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684",id:"521-\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684",level:3},{value:"5.2.2. \u5b57\u9762\u91cf",id:"522-\u5b57\u9762\u91cf",level:3},{value:"5.3. \u57fa\u672c\u6570\u636e\u7c7b\u578b",id:"53-\u57fa\u672c\u6570\u636e\u7c7b\u578b",level:2},{value:"5.3.1. convert",id:"531-convert",level:3},{value:"5.3.2. \u503c\u7c7b\u578b and \u5f15\u7528\u7c7b\u578b",id:"532-\u503c\u7c7b\u578b-and-\u5f15\u7528\u7c7b\u578b",level:3},{value:"5.3.3. \u5e38\u91cf \u9759\u6001\u53d8\u91cf",id:"533-\u5e38\u91cf-\u9759\u6001\u53d8\u91cf",level:3},{value:"5.3.4. \u6570\u5b57",id:"534-\u6570\u5b57",level:3},{value:"5.3.5. \u5e03\u5c14\u503c \u5b57\u7b26 \u5b57\u8282",id:"535-\u5e03\u5c14\u503c-\u5b57\u7b26-\u5b57\u8282",level:3},{value:"5.3.6. \u6570\u7ec4",id:"536-\u6570\u7ec4",level:3},{value:"5.3.7. Range \u8303\u56f4",id:"537-range-\u8303\u56f4",level:3},{value:"5.3.8. \u5207\u7247",id:"538-\u5207\u7247",level:3},{value:"5.3.9. str \u5b57\u7b26\u4e32\u5207\u7247",id:"539-str-\u5b57\u7b26\u4e32\u5207\u7247",level:3},{value:"5.3.10. \u539f\u751f\u6307\u9488 raw pointer",id:"5310-\u539f\u751f\u6307\u9488-raw-pointer",level:3},{value:"5.3.11. never \u7c7b\u578b \u611f\u53f9\u53f7",id:"5311-never-\u7c7b\u578b-\u611f\u53f9\u53f7",level:3},{value:"5.4. \u5b57\u7b26\u4e32",id:"54-\u5b57\u7b26\u4e32",level:2},{value:"5.4.1. \u51e0\u79cd\u5b57\u7b26\u4e32\u533a\u522b",id:"541-\u51e0\u79cd\u5b57\u7b26\u4e32\u533a\u522b",level:3},{value:"5.4.2. \u5e38\u7528\u65b9\u6cd5",id:"542-\u5e38\u7528\u65b9\u6cd5",level:3},{value:"5.4.3. \u5b57\u7b26\u4e32\u8f6c\u6362",id:"543-\u5b57\u7b26\u4e32\u8f6c\u6362",level:3},{value:"5.4.4. \u683c\u5f0f\u5316",id:"544-\u683c\u5f0f\u5316",level:3},{value:"5.4.5. \u8c03\u8bd5\u6253\u5370\u590d\u5408\u7c7b\u578b Debug Display",id:"545-\u8c03\u8bd5\u6253\u5370\u590d\u5408\u7c7b\u578b-debug-display",level:3},{value:"5.4.6. \u95ee\u53f7\u64cd\u4f5c\u7b26 \u591a\u6b21\u5199",id:"546-\u95ee\u53f7\u64cd\u4f5c\u7b26-\u591a\u6b21\u5199",level:3},{value:"5.5. \u96c6\u5408",id:"55-\u96c6\u5408",level:2},{value:"5.5.1. Vec \u52a8\u6001\u6570\u7ec4",id:"551-vec-\u52a8\u6001\u6570\u7ec4",level:3},{value:"5.5.2. \u53cc\u7aef\u961f\u5217 VecDeque",id:"552-\u53cc\u7aef\u961f\u5217-vecdeque",level:3},{value:"5.5.3. \u94fe\u8868 Linkedlist",id:"553-\u94fe\u8868-linkedlist",level:3},{value:"5.5.4. hashmap \u65e0\u5e8f\u54c8\u5e0c\u8868",id:"554-hashmap-\u65e0\u5e8f\u54c8\u5e0c\u8868",level:3},{value:"5.5.4.1. \u54c8\u5e0c\u8868\u57fa\u672c\u4f7f\u7528",id:"5541-\u54c8\u5e0c\u8868\u57fa\u672c\u4f7f\u7528",level:4},{value:"5.5.4.2. \u590d\u5408\u7c7b\u578b\u4f5c\u4e3a key",id:"5542-\u590d\u5408\u7c7b\u578b\u4f5c\u4e3a-key",level:4},{value:"5.5.4.3. \u54c8\u5e0c\u78b0\u649e\u653b\u51fb",id:"5543-\u54c8\u5e0c\u78b0\u649e\u653b\u51fb",level:4},{value:"5.5.5. BTreeMap \u6709\u5e8f\u54c8\u5e0c\u8868",id:"555-btreemap-\u6709\u5e8f\u54c8\u5e0c\u8868",level:3},{value:"5.5.6. hashset \u65e0\u5e8f\u96c6\u5408",id:"556-hashset-\u65e0\u5e8f\u96c6\u5408",level:3},{value:"5.5.7. BTreeSet \u6709\u5e8f\u96c6\u5408",id:"557-btreeset-\u6709\u5e8f\u96c6\u5408",level:3},{value:"5.5.8. \u4f18\u5148\u961f\u5217 BinaryHeap",id:"558-\u4f18\u5148\u961f\u5217-binaryheap",level:3},{value:"5.6. \u7c7b\u578b\u8f6c\u6362",id:"56-\u7c7b\u578b\u8f6c\u6362",level:2},{value:"5.6.1. \u57fa\u672c\u7684\u7c7b\u578b\u8f6c\u6362",id:"561-\u57fa\u672c\u7684\u7c7b\u578b\u8f6c\u6362",level:3},{value:"5.6.2. \u8f6c\u6362\u76f8\u5173\u7684 trait",id:"562-\u8f6c\u6362\u76f8\u5173\u7684-trait",level:3},{value:"5.7. \u6240\u6709\u6743",id:"57-\u6240\u6709\u6743",level:2},{value:"5.7.1. \u4e3a\u4ec0\u4e48\u9700\u8981\u6240\u6709\u6743 RAII\u673a\u5236",id:"571-\u4e3a\u4ec0\u4e48\u9700\u8981\u6240\u6709\u6743-raii\u673a\u5236",level:3},{value:"5.7.2. \u57fa\u672c\u539f\u5219",id:"572-\u57fa\u672c\u539f\u5219",level:3},{value:"5.7.3. \u5b57\u7b26\u4e32\u8d4b\u503c\u7684\u6240\u6709\u6743",id:"573-\u5b57\u7b26\u4e32\u8d4b\u503c\u7684\u6240\u6709\u6743",level:3},{value:"5.7.4. \u51fd\u6570\u53c2\u6570\u7684\u6240\u6709\u6743",id:"574-\u51fd\u6570\u53c2\u6570\u7684\u6240\u6709\u6743",level:3},{value:"5.7.5. \u51fd\u6570\u8fd4\u56de\u503c\u6240\u6709\u6743",id:"575-\u51fd\u6570\u8fd4\u56de\u503c\u6240\u6709\u6743",level:3},{value:"5.7.6. \u590d\u5408\u7c7b\u578b\u4e2d\u7684\u6240\u6709\u6743",id:"576-\u590d\u5408\u7c7b\u578b\u4e2d\u7684\u6240\u6709\u6743",level:3},{value:"5.7.7. \u591a\u6240\u6709\u6743",id:"577-\u591a\u6240\u6709\u6743",level:3},{value:"5.8. \u751f\u547d\u5468\u671f\u53c2\u6570",id:"58-\u751f\u547d\u5468\u671f\u53c2\u6570",level:2},{value:"5.8.1. \u4ec0\u4e48\u662f\u751f\u547d\u5468\u671f",id:"581-\u4ec0\u4e48\u662f\u751f\u547d\u5468\u671f",level:3},{value:"5.8.2. \u4e3a\u4ec0\u4e48\u5b58\u5728\u751f\u547d\u5468\u671f\u6ce8\u91ca",id:"582-\u4e3a\u4ec0\u4e48\u5b58\u5728\u751f\u547d\u5468\u671f\u6ce8\u91ca",level:3},{value:"5.8.3. \u51fd\u6570\u4e2d\u7684\u751f\u547d\u5468\u671f\u53c2\u6570",id:"583-\u51fd\u6570\u4e2d\u7684\u751f\u547d\u5468\u671f\u53c2\u6570",level:3},{value:"5.8.4. \u7ed3\u6784\u4f53\u4e2d\u751f\u547d\u5468\u671f \u7701\u7565\u7684\u89c4\u5219",id:"584-\u7ed3\u6784\u4f53\u4e2d\u751f\u547d\u5468\u671f-\u7701\u7565\u7684\u89c4\u5219",level:3},{value:"5.8.5. \u9759\u6001\u751f\u547d\u5468\u671f\u6ce8\u91ca",id:"585-\u9759\u6001\u751f\u547d\u5468\u671f\u6ce8\u91ca",level:3},{value:"5.8.6. \u751f\u547d\u5468\u671f\u7ea6\u675f",id:"586-\u751f\u547d\u5468\u671f\u7ea6\u675f",level:3},{value:"5.9. \u5f15\u7528",id:"59-\u5f15\u7528",level:2},{value:"5.9.1. \u5f15\u7528\u57fa\u672c\u4ecb\u7ecd",id:"591-\u5f15\u7528\u57fa\u672c\u4ecb\u7ecd",level:3},{value:"5.9.2. \u4e0d\u53ef\u53d8\u5f15\u7528",id:"592-\u4e0d\u53ef\u53d8\u5f15\u7528",level:3},{value:"5.9.3. \u53ef\u53d8\u5f15\u7528",id:"593-\u53ef\u53d8\u5f15\u7528",level:3},{value:"5.9.4. \u5782\u60ac\u5f15\u7528\u95ee\u9898\uff08Dangling References)",id:"594-\u5782\u60ac\u5f15\u7528\u95ee\u9898dangling-references",level:3},{value:"5.10. \u88f8\u6307\u9488",id:"510-\u88f8\u6307\u9488",level:2},{value:"5.11. \u667a\u80fd\u6307\u9488",id:"511-\u667a\u80fd\u6307\u9488",level:2},{value:"5.11.1. \u667a\u80fd\u6307\u9488\u4ecb\u7ecd \u5de5\u4f5c\u673a\u5236",id:"5111-\u667a\u80fd\u6307\u9488\u4ecb\u7ecd-\u5de5\u4f5c\u673a\u5236",level:3},{value:"5.11.2. RAII\u673a\u5236 \u5b9e\u73b0\u5185\u5b58\u56de\u6536",id:"5112-raii\u673a\u5236-\u5b9e\u73b0\u5185\u5b58\u56de\u6536",level:3},{value:"5.11.3. \u81ea\u5b9a\u4e49\u667a\u80fd\u6307\u9488 \u81ea\u52a8\u89e3\u5f15\u7528 Deref \u548c Drop",id:"5113-\u81ea\u5b9a\u4e49\u667a\u80fd\u6307\u9488-\u81ea\u52a8\u89e3\u5f15\u7528-deref-\u548c-drop",level:3},{value:"5.11.4. Box \u65e0\u75db\u4f7f\u7528\u5806\u5185\u5b58",id:"5114-box-\u65e0\u75db\u4f7f\u7528\u5806\u5185\u5b58",level:3},{value:"5.11.4.1. Box\u57fa\u672c\u4f7f\u7528",id:"51141-box\u57fa\u672c\u4f7f\u7528",level:4},{value:"5.11.4.2. \u5305\u88c5\u52a8\u6001\u5927\u5c0f\u7c7b\u578b DST",id:"51142-\u5305\u88c5\u52a8\u6001\u5927\u5c0f\u7c7b\u578b-dst",level:4},{value:"5.11.5. Rc \u548c Weak \u5171\u4eab\u5806\u5185\u5b58",id:"5115-rc-\u548c-weak-\u5171\u4eab\u5806\u5185\u5b58",level:3},{value:"5.11.5.1. Rc \u5f3a\u5f15\u7528",id:"51151-rc-\u5f3a\u5f15\u7528",level:4},{value:"5.11.5.2. \u6784\u9020\u94fe\u8868",id:"51152-\u6784\u9020\u94fe\u8868",level:4},{value:"5.11.5.3. Weak \u5f31\u5f15\u7528",id:"51153-weak-\u5f31\u5f15\u7528",level:4},{value:"5.11.6. RefCell \u548c Cell \u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027",id:"5116-refcell-\u548c-cell-\u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027",level:3},{value:"5.11.6.1. Cell",id:"51161-cell",level:4},{value:"5.11.6.2. RefCell",id:"51162-refcell",level:4},{value:"5.11.7. Rc Box RefCell Cell \u51e0\u79cd\u6307\u9488\u7684\u533a\u522b\u5bf9\u6bd4 \u7ec4\u5408\u4f7f\u7528",id:"5117-rc-box-refcell-cell-\u51e0\u79cd\u6307\u9488\u7684\u533a\u522b\u5bf9\u6bd4-\u7ec4\u5408\u4f7f\u7528",level:3},{value:"5.11.8. Pin \u548c Unpin",id:"5118-pin-\u548c-unpin",level:3},{value:"5.11.9. Cow \u5199\u65f6\u590d\u5236",id:"5119-cow-\u5199\u65f6\u590d\u5236",level:3},{value:"5.12. \u51fd\u6570",id:"512-\u51fd\u6570",level:2},{value:"5.12.1. \u51fd\u6570\u57fa\u672c\u8bed\u6cd5",id:"5121-\u51fd\u6570\u57fa\u672c\u8bed\u6cd5",level:3},{value:"5.12.2. \u51fd\u6570\u4f53\u8868\u8fbe\u5f0f",id:"5122-\u51fd\u6570\u4f53\u8868\u8fbe\u5f0f",level:3},{value:"5.12.3. \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570",id:"5123-\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570",level:3},{value:"5.12.4. Result \u8fd4\u56de\u503c",id:"5124-result-\u8fd4\u56de\u503c",level:3},{value:"5.12.5. \u7f16\u8bd1\u671f\u51fd\u6570\u6267\u884c cfe",id:"5125-\u7f16\u8bd1\u671f\u51fd\u6570\u6267\u884c-cfe",level:3},{value:"5.12.6. \u53d1\u6563\u51fd\u6570",id:"5126-\u53d1\u6563\u51fd\u6570",level:3},{value:"5.12.7. \u6cdb\u578b\u51fd\u6570",id:"5127-\u6cdb\u578b\u51fd\u6570",level:3},{value:"5.12.8. \u9ad8\u9636\u51fd\u6570",id:"5128-\u9ad8\u9636\u51fd\u6570",level:3},{value:"5.12.8.1. \u51fd\u6570\u6307\u9488",id:"51281-\u51fd\u6570\u6307\u9488",level:4},{value:"5.12.8.2. \u7981\u6b62\u51fd\u6570\u6355\u83b7\u5916\u90e8\u73af\u5883\u4e2d\u53d8\u91cf",id:"51282-\u7981\u6b62\u51fd\u6570\u6355\u83b7\u5916\u90e8\u73af\u5883\u4e2d\u53d8\u91cf",level:4},{value:"5.13. \u95ed\u5305",id:"513-\u95ed\u5305",level:2},{value:"5.13.1. \u95ed\u5305\u57fa\u672c\u4f7f\u7528",id:"5131-\u95ed\u5305\u57fa\u672c\u4f7f\u7528",level:3},{value:"5.13.2. rust \u5b9e\u73b0\u95ed\u5305\u7684\u539f\u7406",id:"5132-rust-\u5b9e\u73b0\u95ed\u5305\u7684\u539f\u7406",level:3},{value:"5.13.3. \u6355\u83b7\u73af\u5883\u53d8\u91cf and \u4e09\u79cd\u95ed\u5305\u7c7b\u578b",id:"5133-\u6355\u83b7\u73af\u5883\u53d8\u91cf-and-\u4e09\u79cd\u95ed\u5305\u7c7b\u578b",level:3},{value:"5.13.4. \u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c or \u53c2\u6570",id:"5134-\u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c-or-\u53c2\u6570",level:3},{value:"5.13.4.1. \u9003\u9038\u95ed\u5305 \u975e\u9003\u9038\u95ed\u5305",id:"51341-\u9003\u9038\u95ed\u5305-\u975e\u9003\u9038\u95ed\u5305",level:4},{value:"5.13.4.2. \u95ed\u5305\u4f5c\u4e3a\u53c2\u6570",id:"51342-\u95ed\u5305\u4f5c\u4e3a\u53c2\u6570",level:4},{value:"5.13.4.3. \u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c",id:"51343-\u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c",level:4},{value:"5.13.4.4. \u95ed\u5305\u53c2\u6570\u4e2d\u7684\u751f\u547d\u5468\u671f",id:"51344-\u95ed\u5305\u53c2\u6570\u4e2d\u7684\u751f\u547d\u5468\u671f",level:4},{value:"5.13.5. \u8fed\u4ee3\u5668",id:"5135-\u8fed\u4ee3\u5668",level:3},{value:"5.13.5.1. \u4ec0\u4e48\u662f\u8fed\u4ee3\u5668",id:"51351-\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668",level:4},{value:"5.13.5.2. Iterator trait",id:"51352-iterator-trait",level:4},{value:"5.13.5.3. \u8fed\u4ee3\u5668\u9002\u914d\u5668 \u6536\u96c6\u5668 \u51fd\u6570\u5f0f\u98ce\u683c",id:"51353-\u8fed\u4ee3\u5668\u9002\u914d\u5668-\u6536\u96c6\u5668-\u51fd\u6570\u5f0f\u98ce\u683c",level:4},{value:"5.13.5.4. \u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668",id:"51354-\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668",level:4},{value:"5.13.5.5. \u81ea\u5b9a\u4e49\u9002\u914d\u5668 \u6536\u96c6\u5668",id:"51355-\u81ea\u5b9a\u4e49\u9002\u914d\u5668-\u6536\u96c6\u5668",level:4},{value:"5.14. \u6761\u4ef6\u5faa\u73af",id:"514-\u6761\u4ef6\u5faa\u73af",level:2},{value:"5.15. \u6cdb\u578b",id:"515-\u6cdb\u578b",level:2},{value:"5.15.1. \u5355\u6001\u5316",id:"5151-\u5355\u6001\u5316",level:3},{value:"5.15.2. \u591a\u91cd\u7ea6\u675f \u52a0\u53f7",id:"5152-\u591a\u91cd\u7ea6\u675f-\u52a0\u53f7",level:3},{value:"5.15.3. \u9ed8\u8ba4\u6cdb\u578b\u53c2\u6570 and \u5173\u8054\u7c7b\u578b",id:"5153-\u9ed8\u8ba4\u6cdb\u578b\u53c2\u6570-and-\u5173\u8054\u7c7b\u578b",level:3},{value:"5.15.4. \u7a7a\u7ea6\u675f",id:"5154-\u7a7a\u7ea6\u675f",level:3},{value:"5.15.5. turbofish \u64cd\u4f5c\u7b26 and \u8fd4\u56de\u503c\u81ea\u52a8\u63a8\u5bfc",id:"5155-turbofish-\u64cd\u4f5c\u7b26-and-\u8fd4\u56de\u503c\u81ea\u52a8\u63a8\u5bfc",level:3},{value:"5.16. trait",id:"516-trait",level:2},{value:"5.16.1. trait \u6982\u5ff5",id:"5161-trait-\u6982\u5ff5",level:3},{value:"5.16.1.1. trait \u57fa\u672c\u4f7f\u7528",id:"51611-trait-\u57fa\u672c\u4f7f\u7528",level:4},{value:"5.16.1.2. \u5b64\u513f\u89c4\u5219 \u901a\u8fc7fundamental\u89c4\u907f",id:"51612-\u5b64\u513f\u89c4\u5219-\u901a\u8fc7fundamental\u89c4\u907f",level:4},{value:"5.16.1.3. \u7279\u5316 Specialization",id:"51613-\u7279\u5316-specialization",level:4},{value:"5.16.1.4. trait \u4f5c\u4e3a\u53c2\u6570 \u9700\u8981 impl \u524d\u7f00",id:"51614-trait-\u4f5c\u4e3a\u53c2\u6570-\u9700\u8981-impl-\u524d\u7f00",level:4},{value:"5.16.1.5. trait \u4f5c\u4e3a \u8fd4\u56de\u503c \u8fd4\u56de\u52a8\u6001\u7c7b\u578b",id:"51615-trait-\u4f5c\u4e3a-\u8fd4\u56de\u503c-\u8fd4\u56de\u52a8\u6001\u7c7b\u578b",level:4},{value:"5.16.1.6. trait \u7ee7\u627f",id:"51616-trait-\u7ee7\u627f",level:4},{value:"5.16.1.7. \u9759\u6001\u5206\u53d1 \u52a8\u6001\u5206\u53d1",id:"51617-\u9759\u6001\u5206\u53d1-\u52a8\u6001\u5206\u53d1",level:4},{value:"5.16.1.8. \u4f7f\u7528\u62bd\u8c61\u7c7b\u578b",id:"51618-\u4f7f\u7528\u62bd\u8c61\u7c7b\u578b",level:4},{value:"5.16.1.8.1. trait\u5bf9\u8c61",id:"516181-trait\u5bf9\u8c61",level:5},{value:"5.16.1.8.2. trait\u5bf9\u8c61\u5b89\u5168\u95ee\u9898 Sized trait",id:"516182-trait\u5bf9\u8c61\u5b89\u5168\u95ee\u9898-sized-trait",level:5},{value:"5.16.1.8.3. impl trait",id:"516183-impl-trait",level:5},{value:"5.16.1.9. trait\u7684\u7c7b\u578b\u8f6c\u6362",id:"51619-trait\u7684\u7c7b\u578b\u8f6c\u6362",level:4},{value:"5.16.2. \u53ef\u81ea\u52a8\u63a8\u5bfc\u7684trait",id:"5162-\u53ef\u81ea\u52a8\u63a8\u5bfc\u7684trait",level:3},{value:"5.16.3. \u8fd0\u7b97\u7b26\u91cd\u8f7d\u76f8\u5173\u7684trait",id:"5163-\u8fd0\u7b97\u7b26\u91cd\u8f7d\u76f8\u5173\u7684trait",level:3},{value:"5.16.4. From \u548c Into",id:"5164-from-\u548c-into",level:3},{value:"5.16.5. DerefMut \u548c Deref",id:"5165-derefmut-\u548c-deref",level:3},{value:"5.16.6. AsRef AsMut",id:"5166-asref-asmut",level:3},{value:"5.16.7. Borrow trait",id:"5167-borrow-trait",level:3},{value:"5.16.8. Drop \u8d44\u6e90\u91ca\u653e",id:"5168-drop-\u8d44\u6e90\u91ca\u653e",level:3},{value:"5.16.9. \u6807\u7b7e trait",id:"5169-\u6807\u7b7e-trait",level:3},{value:"5.16.9.1. Send \u548c Sync",id:"51691-send-\u548c-sync",level:4},{value:"5.16.9.2. Copy trait",id:"51692-copy-trait",level:4},{value:"5.16.9.3. Sized trait  \u548c \u52a8\u6001\u7c7b\u578bDST",id:"51693-sized-trait--\u548c-\u52a8\u6001\u7c7b\u578bdst",level:4},{value:"5.16.10. Default trait",id:"51610-default-trait",level:3},{value:"5.16.11. Extend trait",id:"51611-extend-trait",level:3},{value:"5.16.12. Any trait",id:"51612-any-trait",level:3},{value:"5.16.13. \u548c\u6bd4\u8f83\u6392\u5e8f\u76f8\u5173\u7684trait",id:"51613-\u548c\u6bd4\u8f83\u6392\u5e8f\u76f8\u5173\u7684trait",level:3},{value:"5.17. \u5143\u7ec4",id:"517-\u5143\u7ec4",level:2},{value:"5.18. \u7ed3\u6784\u4f53",id:"518-\u7ed3\u6784\u4f53",level:2},{value:"5.18.1. \u7ed3\u6784\u4f53\u57fa\u672c\u4f7f\u7528",id:"5181-\u7ed3\u6784\u4f53\u57fa\u672c\u4f7f\u7528",level:3},{value:"5.18.2. \u5143\u7ec4\u7ed3\u6784\u4f53 and \u5355\u5143\u7ed3\u6784\u4f53",id:"5182-\u5143\u7ec4\u7ed3\u6784\u4f53-and-\u5355\u5143\u7ed3\u6784\u4f53",level:3},{value:"5.18.3. \u7ed3\u6784\u4f53\u65b9\u6cd5",id:"5183-\u7ed3\u6784\u4f53\u65b9\u6cd5",level:3},{value:"5.18.4. new type \u6a21\u5f0f \u548c \u7c7b\u578b\u522b\u540d Self\u522b\u540d",id:"5184-new-type-\u6a21\u5f0f-\u548c-\u7c7b\u578b\u522b\u540d-self\u522b\u540d",level:3},{value:"5.18.5. \u6848\u4f8b \u5f69\u8272\u547d\u4ee4\u884c\u8f93\u51fa",id:"5185-\u6848\u4f8b-\u5f69\u8272\u547d\u4ee4\u884c\u8f93\u51fa",level:3},{value:"5.19. \u679a\u4e3e",id:"519-\u679a\u4e3e",level:2},{value:"5.19.1. \u679a\u4e3e\u57fa\u672c\u4f7f\u7528",id:"5191-\u679a\u4e3e\u57fa\u672c\u4f7f\u7528",level:3},{value:"5.19.2. Option",id:"5192-option",level:3},{value:"5.19.3. c \u98ce\u683c\u7684\u679a\u4e3e",id:"5193-c-\u98ce\u683c\u7684\u679a\u4e3e",level:3},{value:"5.19.4. \u6848\u4f8b \u5f69\u8272\u547d\u4ee4\u884c\u8f93\u51fa\u4f18\u5316",id:"5194-\u6848\u4f8b-\u5f69\u8272\u547d\u4ee4\u884c\u8f93\u51fa\u4f18\u5316",level:3},{value:"5.19.5. \u5b9e\u4f8b \u521b\u5efa\u94fe\u8868",id:"5195-\u5b9e\u4f8b-\u521b\u5efa\u94fe\u8868",level:3},{value:"5.20. match \u6a21\u5f0f\u5339\u914d",id:"520-match-\u6a21\u5f0f\u5339\u914d",level:2},{value:"5.20.1. \u6a21\u5f0f\u5339\u914d\u7b80\u5355\u4f7f\u7528",id:"5201-\u6a21\u5f0f\u5339\u914d\u7b80\u5355\u4f7f\u7528",level:3},{value:"5.20.2. if lef while let \u8bed\u6cd5\u7cd6",id:"5202-if-lef-while-let-\u8bed\u6cd5\u7cd6",level:3},{value:"5.21. \u9519\u8bef\u5904\u7406",id:"521-\u9519\u8bef\u5904\u7406",level:2},{value:"5.21.1. \u65ad\u8a00",id:"5211-\u65ad\u8a00",level:3},{value:"5.21.2. panic \u548c Abort",id:"5212-panic-\u548c-abort",level:3},{value:"5.21.3. Result  \u548c \u95ee\u53f7\u64cd\u4f5c\u7b26",id:"5213-result--\u548c-\u95ee\u53f7\u64cd\u4f5c\u7b26",level:3},{value:"5.21.4. \u9519\u8bef\u88c5\u7bb1 \u81ea\u5b9a\u4e49\u5f02\u5e38",id:"5214-\u9519\u8bef\u88c5\u7bb1-\u81ea\u5b9a\u4e49\u5f02\u5e38",level:3},{value:"5.21.5. \u6355\u83b7\u5f02\u5e38",id:"5215-\u6355\u83b7\u5f02\u5e38",level:3},{value:"5.21.6. \u9519\u8bef\u5904\u7406\u8fdb\u5316\u8fc7\u7a0b",id:"5216-\u9519\u8bef\u5904\u7406\u8fdb\u5316\u8fc7\u7a0b",level:3},{value:"5.21.7. \u7b2c\u4e09\u65b9\u5e93\u5904\u7406\u5f02\u5e38",id:"5217-\u7b2c\u4e09\u65b9\u5e93\u5904\u7406\u5f02\u5e38",level:3},{value:"5.22. io",id:"522-io",level:2},{value:"5.22.1. \u547d\u4ee4\u884c\u53c2\u6570",id:"5221-\u547d\u4ee4\u884c\u53c2\u6570",level:3},{value:"5.22.2. \u6587\u4ef6 io",id:"5222-\u6587\u4ef6-io",level:3},{value:"5.23. \u9762\u5411\u5bf9\u8c61 oop",id:"523-\u9762\u5411\u5bf9\u8c61-oop",level:2},{value:"5.23.1. \u53ef\u89c1\u6027",id:"5231-\u53ef\u89c1\u6027",level:3},{value:"5.23.2. \u591a\u6001",id:"5232-\u591a\u6001",level:3},{value:"5.23.3. \u5411\u4e0b\u8f6c\u578b",id:"5233-\u5411\u4e0b\u8f6c\u578b",level:3},{value:"5.23.4. \u5404\u79cdself\u533a\u5206\u4f7f\u7528",id:"5234-\u5404\u79cdself\u533a\u5206\u4f7f\u7528",level:3},{value:"5.23.5. \u8bbe\u8ba1\u6a21\u5f0f",id:"5235-\u8bbe\u8ba1\u6a21\u5f0f",level:3},{value:"5.23.5.1. \u5efa\u9020\u8005\u6a21\u5f0f",id:"52351-\u5efa\u9020\u8005\u6a21\u5f0f",level:4},{value:"5.23.5.2. \u8bbf\u95ee\u8005\u6a21\u5f0f",id:"52352-\u8bbf\u95ee\u8005\u6a21\u5f0f",level:4},{value:"5.23.5.3. raii\u6a21\u5f0f",id:"52353-raii\u6a21\u5f0f",level:4},{value:"5.24. \u5b50\u8fdb\u7a0b",id:"524-\u5b50\u8fdb\u7a0b",level:2},{value:"5.25. \u53cd\u5c04",id:"525-\u53cd\u5c04",level:2},{value:"5.26. \u5b8f",id:"526-\u5b8f",level:2},{value:"5.26.1. \u5b8f\u57fa\u672c\u4ecb\u7ecd",id:"5261-\u5b8f\u57fa\u672c\u4ecb\u7ecd",level:3},{value:"5.26.2. \u58f0\u660e\u5b8f",id:"5262-\u58f0\u660e\u5b8f",level:3},{value:"5.26.2.1. \u521b\u5efa\u5b8f",id:"52621-\u521b\u5efa\u5b8f",level:4},{value:"5.26.2.2. \u91cd\u590d\u5faa\u73af\u5339\u914d",id:"52622-\u91cd\u590d\u5faa\u73af\u5339\u914d",level:4},{value:"5.26.2.3. \u5b9e\u9645\u6848\u4f8b",id:"52623-\u5b9e\u9645\u6848\u4f8b",level:4},{value:"5.26.3. \u5b8f\u8c03\u8bd5",id:"5263-\u5b8f\u8c03\u8bd5",level:3},{value:"5.26.4. \u8fc7\u7a0b\u5b8f",id:"5264-\u8fc7\u7a0b\u5b8f",level:3},{value:"5.26.4.1. \u8fc7\u7a0b\u5b8f\u57fa\u672c\u4f7f\u7528\u89c4\u5219",id:"52641-\u8fc7\u7a0b\u5b8f\u57fa\u672c\u4f7f\u7528\u89c4\u5219",level:4},{value:"5.26.4.2. \u81ea\u5b9a\u4e49\u5c5e\u6027\u5b8f",id:"52642-\u81ea\u5b9a\u4e49\u5c5e\u6027\u5b8f",level:4},{value:"5.26.4.3. \u51fd\u6570\u8c03\u7528\u5b8f",id:"52643-\u51fd\u6570\u8c03\u7528\u5b8f",level:4},{value:"5.26.4.4. derive \u5b8f",id:"52644-derive-\u5b8f",level:4},{value:"5.26.5. \u4f7f\u7528\u7b2c\u4e09\u65b9\u5305",id:"5265-\u4f7f\u7528\u7b2c\u4e09\u65b9\u5305",level:3},{value:"5.26.6. \u7f16\u8bd1\u5668\u63d2\u4ef6",id:"5266-\u7f16\u8bd1\u5668\u63d2\u4ef6",level:3},{value:"6.1. unsafe \u57fa\u672c\u573a\u666f",id:"61-unsafe-\u57fa\u672c\u573a\u666f",level:2},{value:"6.2. \u4ea4\u53c9\u7f16\u8bd1",id:"62-\u4ea4\u53c9\u7f16\u8bd1",level:2},{value:"6.3. ffi \u5916\u90e8\u51fd\u6570\u63a5\u53e3",id:"63-ffi-\u5916\u90e8\u51fd\u6570\u63a5\u53e3",level:2},{value:"6.3.1. ffi \u57fa\u672c\u4ecb\u7ecd",id:"631-ffi-\u57fa\u672c\u4ecb\u7ecd",level:3},{value:"6.3.2. \u548c elixir \u4ea4\u4e92",id:"632-\u548c-elixir-\u4ea4\u4e92",level:3},{value:"6.3.3. \u548cc cpp \u4ea4\u4e92",id:"633-\u548cc-cpp-\u4ea4\u4e92",level:3},{value:"6.3.3.1. \u5728 rust \u4e2d\u8c03\u7528 C \u51fd\u6570",id:"6331-\u5728-rust-\u4e2d\u8c03\u7528-c-\u51fd\u6570",level:4},{value:"6.3.3.2. \u5728 rust\u8c03\u7528 cpp",id:"6332-\u5728-rust\u8c03\u7528-cpp",level:4},{value:"6.3.3.3. \u5728 c \u4e2d\u8c03\u7528 rust",id:"6333-\u5728-c-\u4e2d\u8c03\u7528-rust",level:4},{value:"6.3.4. \u548c Python \u4ea4\u4e92",id:"634-\u548c-python-\u4ea4\u4e92",level:3},{value:"6.3.5. \u548c Swift",id:"635-\u548c-swift",level:3},{value:"6.3.6. \u548c js JavaScript nodejs \u4ea4\u4e92",id:"636-\u548c-js-javascript-nodejs-\u4ea4\u4e92",level:3},{value:"6.3.7. \u548c java \u4ea4\u4e92",id:"637-\u548c-java-\u4ea4\u4e92",level:3},{value:"6.3.7.1. java \u8c03\u7528 rust",id:"6371-java-\u8c03\u7528-rust",level:4},{value:"6.3.7.2. rust \u8c03\u7528 java",id:"6372-rust-\u8c03\u7528-java",level:4},{value:"7.1. \u5806 \u548c \u6808",id:"71-\u5806-\u548c-\u6808",level:2},{value:"7.2. \u5185\u5b58\u5bf9\u9f50",id:"72-\u5185\u5b58\u5bf9\u9f50",level:2},{value:"7.3. \u624b\u52a8\u5806\u5185\u5b58\u5206\u914d",id:"73-\u624b\u52a8\u5806\u5185\u5b58\u5206\u914d",level:2},{value:"8.1. \u6982\u5ff5\u7b80\u5355\u89e3\u91ca",id:"81-\u6982\u5ff5\u7b80\u5355\u89e3\u91ca",level:2},{value:"8.2. \u53ef\u89c1\u6027\u7ba1\u7406",id:"82-\u53ef\u89c1\u6027\u7ba1\u7406",level:2},{value:"8.3. \u7f16\u8bd1\u5668\u7248\u672c\u7ba1\u7406",id:"83-\u7f16\u8bd1\u5668\u7248\u672c\u7ba1\u7406",level:2},{value:"8.4. \u4e3a\u9879\u76ee\u5355\u72ec\u6307\u5b9aconfig \u914d\u7f6e",id:"84-\u4e3a\u9879\u76ee\u5355\u72ec\u6307\u5b9aconfig-\u914d\u7f6e",level:2},{value:"8.5. \u4f9d\u8d56\u7ba1\u7406 cargo",id:"85-\u4f9d\u8d56\u7ba1\u7406-cargo",level:2},{value:"8.5.1. cargo \u57fa\u672c\u547d\u4ee4",id:"851-cargo-\u57fa\u672c\u547d\u4ee4",level:3},{value:"8.5.2. \u6587\u4ef6\u5e03\u5c40\u7ed3\u6784",id:"852-\u6587\u4ef6\u5e03\u5c40\u7ed3\u6784",level:3},{value:"8.5.3. Cargo.toml",id:"853-cargotoml",level:3},{value:"8.5.4. cargo.lock",id:"854-cargolock",level:3},{value:"8.5.5. workspace",id:"855-workspace",level:3},{value:"8.5.6. \u4f9d\u8d56\u7684\u7248\u672c\u53f7\u89c4\u5219",id:"856-\u4f9d\u8d56\u7684\u7248\u672c\u53f7\u89c4\u5219",level:3},{value:"8.6. build.rs",id:"86-buildrs",level:2},{value:"8.7. \u9879\u76ee\u7ba1\u7406\u6848\u4f8b",id:"87-\u9879\u76ee\u7ba1\u7406\u6848\u4f8b",level:2},{value:"8.7.1. \u5bfc\u51fa\u81ea\u5b9a\u4e49\u5b8f",id:"871-\u5bfc\u51fa\u81ea\u5b9a\u4e49\u5b8f",level:3},{value:"8.7.2. \u5bfc\u5165\u81ea\u5b9a\u4e49 crate",id:"872-\u5bfc\u5165\u81ea\u5b9a\u4e49-crate",level:3},{value:"8.7.3. \u6267\u884c\u5b50\u76ee\u5f55\u4e2d\u7684 module",id:"873-\u6267\u884c\u5b50\u76ee\u5f55\u4e2d\u7684-module",level:3},{value:"8.7.4. \u5bfc\u5165\u81ea\u5b9a\u4e49 module",id:"874-\u5bfc\u5165\u81ea\u5b9a\u4e49-module",level:3},{value:"8.7.5. \u5bfc\u5165\u7b2c\u4e09\u65b9 crate",id:"875-\u5bfc\u5165\u7b2c\u4e09\u65b9-crate",level:3},{value:"11.1. \u901a\u7528\u6982\u5ff5",id:"111-\u901a\u7528\u6982\u5ff5",level:2},{value:"11.1.1. \u8fdb\u7a0b and \u7ebf\u7a0b",id:"1111-\u8fdb\u7a0b-and-\u7ebf\u7a0b",level:3},{value:"11.1.2. \u4e8b\u4ef6\u56de\u8c03\u5b9e\u73b0\u7684\u5f02\u6b65\u5e76\u53d1",id:"1112-\u4e8b\u4ef6\u56de\u8c03\u5b9e\u73b0\u7684\u5f02\u6b65\u5e76\u53d1",level:3},{value:"11.2. \u7ebf\u7a0b\u57fa\u672c\u4f7f\u7528",id:"112-\u7ebf\u7a0b\u57fa\u672c\u4f7f\u7528",level:2},{value:"11.2.1. \u521b\u5efa\u7ebf\u7a0b",id:"1121-\u521b\u5efa\u7ebf\u7a0b",level:3},{value:"11.2.2. \u81ea\u5b9a\u4e49\u914d\u7f6e\u7ebf\u7a0b",id:"1122-\u81ea\u5b9a\u4e49\u914d\u7f6e\u7ebf\u7a0b",level:3},{value:"11.2.3. \u7ebf\u7a0b\u672c\u5730\u53d8\u91cf",id:"1123-\u7ebf\u7a0b\u672c\u5730\u53d8\u91cf",level:3},{value:"11.2.4. \u624b\u52a8\u963b\u585e\u5524\u9192",id:"1124-\u624b\u52a8\u963b\u585e\u5524\u9192",level:3},{value:"11.3. \u7ebf\u7a0b\u540c\u6b65",id:"113-\u7ebf\u7a0b\u540c\u6b65",level:2},{value:"11.3.1. \u9519\u8bef\u793a\u4f8b",id:"1131-\u9519\u8bef\u793a\u4f8b",level:3},{value:"11.3.2. \u9501",id:"1132-\u9501",level:3},{value:"11.3.3. \u539f\u5b50\u7c7b\u578b",id:"1133-\u539f\u5b50\u7c7b\u578b",level:3},{value:"11.3.4. channel",id:"1134-channel",level:3},{value:"11.3.5. tokio \u4e2d\u7684\u5404\u79cd channel \u5b9e\u73b0",id:"1135-tokio-\u4e2d\u7684\u5404\u79cd-channel-\u5b9e\u73b0",level:3},{value:"11.4. \u591a\u7ebf\u7a0b\u5c0f\u4f8b\u5b50",id:"114-\u591a\u7ebf\u7a0b\u5c0f\u4f8b\u5b50",level:2},{value:"11.4.1. \u5b9e\u73b0\u7ebf\u7a0b\u6c60",id:"1141-\u5b9e\u73b0\u7ebf\u7a0b\u6c60",level:3},{value:"11.4.2. \u5b9e\u73b0 map-reduce \u7b97\u6cd5",id:"1142-\u5b9e\u73b0-map-reduce-\u7b97\u6cd5",level:3},{value:"11.4.3. \u591a\u7ebf\u7a0b\u7edf\u8ba1\u548c",id:"1143-\u591a\u7ebf\u7a0b\u7edf\u8ba1\u548c",level:3},{value:"11.4.4. \u5e26\u7ebf\u7a0b\u6c60\u7684 webserver",id:"1144-\u5e26\u7ebf\u7a0b\u6c60\u7684-webserver",level:3},{value:"11.5. rayon \u5e76\u884c\u6267\u884c\u4efb\u52a1",id:"115-rayon-\u5e76\u884c\u6267\u884c\u4efb\u52a1",level:2},{value:"11.6. CrossBeam \u65e0\u9501\u7684\u6570\u636e\u7ed3\u6784",id:"116-crossbeam-\u65e0\u9501\u7684\u6570\u636e\u7ed3\u6784",level:2},{value:"11.7. RwLock \u548c RefCell",id:"117-rwlock-\u548c-refcell",level:2},{value:"11.8. Mutex",id:"118-mutex",level:2},{value:"11.9. AtomicPtr \u548c Cell",id:"119-atomicptr-\u548c-cell",level:2},{value:"11.10. Send \u548c Sync trait",id:"1110-send-\u548c-sync-trait",level:2},{value:"12.1. \u5f02\u6b65\u6982\u5ff5",id:"121-\u5f02\u6b65\u6982\u5ff5",level:2},{value:"12.1.1. \u4e3a\u4ec0\u4e48\u4f7f\u7528\u5f02\u6b65",id:"1211-\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5f02\u6b65",level:3},{value:"12.1.2. \u666e\u901a\u591a\u7ebf\u7a0b webserver",id:"1212-\u666e\u901a\u591a\u7ebf\u7a0b-webserver",level:3},{value:"12.1.3. \u6539\u8fdb\u540e\u7684\u5f02\u6b65\u7248\u672c",id:"1213-\u6539\u8fdb\u540e\u7684\u5f02\u6b65\u7248\u672c",level:3},{value:"12.2. \u57fa\u672c\u4f7f\u7528",id:"122-\u57fa\u672c\u4f7f\u7528",level:2},{value:"12.2.1. block_on",id:"1221-block_on",level:3},{value:"12.2.2. await",id:"1222-await",level:3},{value:"12.2.3. joinn",id:"1223-joinn",level:3},{value:"12.3. future\u5e76\u53d1\u6a21\u5f0f",id:"123-future\u5e76\u53d1\u6a21\u5f0f",level:2},{value:"12.3.1. future\u5e95\u5c42\u662f\u751f\u6210\u5668",id:"1231-future\u5e95\u5c42\u662f\u751f\u6210\u5668",level:3},{value:"12.3.2. future\u57fa\u672c\u4f7f\u7528\u7528",id:"1232-future\u57fa\u672c\u4f7f\u7528\u7528",level:3},{value:"12.3.3. \u52a8\u624b\u5b9e\u73b0 Future \u7c7b\u578b",id:"1233-\u52a8\u624b\u5b9e\u73b0-future-\u7c7b\u578b",level:3},{value:"12.3.4. \u52a8\u624b\u5b9e\u73b0 \u5f02\u6b65 sleep",id:"1234-\u52a8\u624b\u5b9e\u73b0-\u5f02\u6b65-sleep",level:3},{value:"12.4. async-std",id:"124-async-std",level:2},{value:"12.5. tokio",id:"125-tokio",level:2},{value:"14.1. tcp",id:"141-tcp",level:2},{value:"14.2. udp",id:"142-udp",level:2},{value:"19.1. http \u4ee3\u7406",id:"191-http-\u4ee3\u7406",level:2},{value:"19.2. socket \u4ee3\u7406",id:"192-socket-\u4ee3\u7406",level:2},{value:"21.1. \u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\u5e93",id:"211-\u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\u5e93",level:2},{value:"21.2. markdown",id:"212-markdown",level:2},{value:"21.3. \u684c\u9762\u5f00\u53d1",id:"213-\u684c\u9762\u5f00\u53d1",level:2},{value:"21.4. \u89c6\u9891\u5904\u7406",id:"214-\u89c6\u9891\u5904\u7406",level:2},{value:"21.5. \u56fe\u7247\u5904\u7406",id:"215-\u56fe\u7247\u5904\u7406",level:2},{value:"21.6. \u6e38\u620f\u5f00\u53d1\u4e09\u65b9\u5e93",id:"216-\u6e38\u620f\u5f00\u53d1\u4e09\u65b9\u5e93",level:2},{value:"21.7. \u7cfb\u7edf\u4fe1\u606f",id:"217-\u7cfb\u7edf\u4fe1\u606f",level:2},{value:"21.8. web \u5f00\u53d1\u53d1",id:"218-web-\u5f00\u53d1\u53d1",level:2},{value:"21.8.1. swagger openapi \u751f\u6210",id:"2181-swagger-openapi-\u751f\u6210",level:3},{value:"21.8.2. web\u6846\u67b6",id:"2182-web\u6846\u67b6",level:3},{value:"21.8.3. orm",id:"2183-orm",level:3},{value:"21.8.4. http client",id:"2184-http-client",level:3},{value:"21.9. \u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316",id:"219-\u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316",level:2},{value:"21.9.1. toml",id:"2191-toml",level:3},{value:"21.9.2. json",id:"2192-json",level:3},{value:"21.10. \u8bfb\u5199\u6570\u636e",id:"2110-\u8bfb\u5199\u6570\u636e",level:2},{value:"21.11. \u589e\u5f3a\u5de5\u5177",id:"2111-\u589e\u5f3a\u5de5\u5177",level:2},{value:"21.12. \u6388\u6743 Authorization",id:"2112-\u6388\u6743-authorization",level:2},{value:"21.13. \u65e5\u5fd7\u7cfb\u7edf",id:"2113-\u65e5\u5fd7\u7cfb\u7edf",level:2},{value:"21.13.1. tracing",id:"21131-tracing",level:3},{value:"21.13.2. env_logger",id:"21132-env_logger",level:3},{value:"21.13.3. log4rs and log",id:"21133-log4rs-and-log",level:3},{value:"21.14. \u6587\u672c\u89e3\u6790\u5668 parser",id:"2114-\u6587\u672c\u89e3\u6790\u5668-parser",level:2},{value:"21.15. lazy static \u5ef6\u8fdf\u521d\u59cb\u5316",id:"2115-lazy-static-\u5ef6\u8fdf\u521d\u59cb\u5316",level:2},{value:"21.16. \u7535\u5b50\u4e66",id:"2116-\u7535\u5b50\u4e66",level:2},{value:"21.17. \u547d\u4ee4\u884c\u7a0b\u5e8f",id:"2117-\u547d\u4ee4\u884c\u7a0b\u5e8f",level:2},{value:"21.17.1. structopt",id:"21171-structopt",level:3},{value:"21.17.2. clap",id:"21172-clap",level:3},{value:"21.18. \u5f02\u6b65\u7f16\u7a0b",id:"2118-\u5f02\u6b65\u7f16\u7a0b",level:2},{value:"21.19. websocket",id:"2119-websocket",level:2},{value:"21.20. \u7f29\u5c0f\u4f53\u79ef",id:"2120-\u7f29\u5c0f\u4f53\u79ef",level:2},{value:"21.21. http client",id:"2121-http-client",level:2},{value:"21.22. \u5bb9\u9519\u8fd0\u884c\u65f6",id:"2122-\u5bb9\u9519\u8fd0\u884c\u65f6",level:2},{value:"21.23. \u76d1\u63a7",id:"2123-\u76d1\u63a7",level:2},{value:"21.24. \u7535\u5b50\u90ae\u4ef6",id:"2124-\u7535\u5b50\u90ae\u4ef6",level:2},{value:"21.25. \u5206\u53d1\u5de5\u5177",id:"2125-\u5206\u53d1\u5de5\u5177",level:2},{value:"21.26. \u5e76\u53d1\u7f16\u7a0b",id:"2126-\u5e76\u53d1\u7f16\u7a0b",level:2},{value:"21.27. gui \u56fe\u5f62\u5e93",id:"2127-gui-\u56fe\u5f62\u5e93",level:2},{value:"21.28. \u5e95\u5c42\u7f51\u7edc api",id:"2128-\u5e95\u5c42\u7f51\u7edc-api",level:2},{value:"21.29. \u6b63\u5219",id:"2129-\u6b63\u5219",level:2},{value:"21.30. \u968f\u673a",id:"2130-\u968f\u673a",level:2},{value:"21.30.1. rand \u968f\u673a\u6570\u5b57",id:"21301-rand-\u968f\u673a\u6570\u5b57",level:3},{value:"21.31. \u641c\u7d22\u5f15\u64ce",id:"2131-\u641c\u7d22\u5f15\u64ce",level:2},{value:"21.32. \u5f00\u6e90\u96c6\u5408\u5bb9\u5668",id:"2132-\u5f00\u6e90\u96c6\u5408\u5bb9\u5668",level:2},{value:"\u5176\u4ed6\u8bed\u8a00\u5f15\u64ce",id:"\u5176\u4ed6\u8bed\u8a00\u5f15\u64ce",level:2}],c={toc:m};function d(n){var e=n.components,s=(0,a.Z)(n,i);return(0,l.kt)("wrapper",(0,r.Z)({},c,s,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D"},"1. \u7b80\u5355\u4ecb\u7ecd"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#11-pros-and-cons"},"1.1. Pros and Cons")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#12-%E6%9E%B6%E6%9E%84"},"1.2. \u67b6\u6784")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#13-%E4%BC%98%E7%82%B9-%E5%AF%B9%E6%AF%94"},"1.3. \u4f18\u70b9 \u5bf9\u6bd4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#14-%E6%80%9D%E6%83%B3"},"1.4. \u601d\u60f3")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#15-%E8%AF%AD%E4%B9%89-%E6%A6%82%E5%BF%B5"},"1.5. \u8bed\u4e49 \u6982\u5ff5")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE"},"2. \u5f00\u53d1\u73af\u5883\u914d\u7f6e"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#21-install"},"2.1. install")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#22-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8"},"2.2. \u547d\u4ee4\u884c\u5de5\u5177\u4f7f\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#23-ide"},"2.3. IDE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#24-%E9%85%8D%E7%BD%AE%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F"},"2.4. \u914d\u7f6e\u56fd\u5185\u955c\u50cf")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#3-%E6%A0%87%E5%87%86%E5%BA%93"},"3. \u6807\u51c6\u5e93"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#31-path-%E8%B7%AF%E5%BE%84"},"3.1. path \u8def\u5f84")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#32-%E6%97%B6%E9%97%B4"},"3.2. \u65f6\u95f4")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#4-%E5%AF%B9%E6%AF%94-2018"},"4. \u5bf9\u6bd4 2018"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#41-nll"},"4.1. nll")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#42-raw-identifier"},"4.2. Raw identifier")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#43-%E7%AE%80%E5%8C%96%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D"},"4.3. \u7b80\u5316\u6a21\u5f0f\u5339\u914d")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#44-main-%E5%87%BD%E6%95%B0%E5%8F%AF%E4%BB%A5%E8%BF%94%E5%9B%9E-result"},"4.4. main \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de Result")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#45-impl-trait-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%9E%8B"},"4.5. impl trait \u62bd\u8c61\u7c7b\u578b")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5-%E8%AF%AD%E6%B3%95"},"5. \u8bed\u6cd5"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51-%E6%B3%A8%E9%87%8A"},"5.1. \u6ce8\u91ca")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#52-%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC"},"5.2. \u53d8\u91cf\u8d4b\u503c"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#521-%E9%BB%98%E8%AE%A4%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84"},"5.2.1. \u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#522-%E5%AD%97%E9%9D%A2%E9%87%8F"},"5.2.2. \u5b57\u9762\u91cf")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#53-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"},"5.3. \u57fa\u672c\u6570\u636e\u7c7b\u578b"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#531-convert"},"5.3.1. convert")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#532-%E5%80%BC%E7%B1%BB%E5%9E%8B-and-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B"},"5.3.2. \u503c\u7c7b\u578b and \u5f15\u7528\u7c7b\u578b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#533-%E5%B8%B8%E9%87%8F-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F"},"5.3.3. \u5e38\u91cf \u9759\u6001\u53d8\u91cf")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#534-%E6%95%B0%E5%AD%97"},"5.3.4. \u6570\u5b57")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#535-%E5%B8%83%E5%B0%94%E5%80%BC-%E5%AD%97%E7%AC%A6-%E5%AD%97%E8%8A%82"},"5.3.5. \u5e03\u5c14\u503c \u5b57\u7b26 \u5b57\u8282")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#536-%E6%95%B0%E7%BB%84"},"5.3.6. \u6570\u7ec4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#537-range-%E8%8C%83%E5%9B%B4"},"5.3.7. Range \u8303\u56f4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#538-%E5%88%87%E7%89%87"},"5.3.8. \u5207\u7247")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#539-str-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87"},"5.3.9. str \u5b57\u7b26\u4e32\u5207\u7247")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5310-%E5%8E%9F%E7%94%9F%E6%8C%87%E9%92%88-raw-pointer"},"5.3.10. \u539f\u751f\u6307\u9488 raw pointer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5311-never-%E7%B1%BB%E5%9E%8B-%E6%84%9F%E5%8F%B9%E5%8F%B7"},"5.3.11. never \u7c7b\u578b \u611f\u53f9\u53f7")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#54-%E5%AD%97%E7%AC%A6%E4%B8%B2"},"5.4. \u5b57\u7b26\u4e32"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#541-%E5%87%A0%E7%A7%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%BA%E5%88%AB"},"5.4.1. \u51e0\u79cd\u5b57\u7b26\u4e32\u533a\u522b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#542-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95"},"5.4.2. \u5e38\u7528\u65b9\u6cd5")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#543-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2"},"5.4.3. \u5b57\u7b26\u4e32\u8f6c\u6362")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#544-%E6%A0%BC%E5%BC%8F%E5%8C%96"},"5.4.4. \u683c\u5f0f\u5316")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#545-%E8%B0%83%E8%AF%95%E6%89%93%E5%8D%B0%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B-debug-display"},"5.4.5. \u8c03\u8bd5\u6253\u5370\u590d\u5408\u7c7b\u578b Debug Display")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#546-%E9%97%AE%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6-%E5%A4%9A%E6%AC%A1%E5%86%99"},"5.4.6. \u95ee\u53f7\u64cd\u4f5c\u7b26 \u591a\u6b21\u5199")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#55-%E9%9B%86%E5%90%88"},"5.5. \u96c6\u5408"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#551-vec-%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84"},"5.5.1. Vec \u52a8\u6001\u6570\u7ec4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#552-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97-vecdeque"},"5.5.2. \u53cc\u7aef\u961f\u5217 VecDeque")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#553-%E9%93%BE%E8%A1%A8-linkedlist"},"5.5.3. \u94fe\u8868 Linkedlist")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#554-hashmap-%E6%97%A0%E5%BA%8F%E5%93%88%E5%B8%8C%E8%A1%A8"},"5.5.4. hashmap \u65e0\u5e8f\u54c8\u5e0c\u8868"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5541-%E5%93%88%E5%B8%8C%E8%A1%A8%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"},"5.5.4.1. \u54c8\u5e0c\u8868\u57fa\u672c\u4f7f\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5542-%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA-key"},"5.5.4.2. \u590d\u5408\u7c7b\u578b\u4f5c\u4e3a key")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5543-%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E%E6%94%BB%E5%87%BB"},"5.5.4.3. \u54c8\u5e0c\u78b0\u649e\u653b\u51fb")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#555-btreemap-%E6%9C%89%E5%BA%8F%E5%93%88%E5%B8%8C%E8%A1%A8"},"5.5.5. BTreeMap \u6709\u5e8f\u54c8\u5e0c\u8868")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#556-hashset-%E6%97%A0%E5%BA%8F%E9%9B%86%E5%90%88"},"5.5.6. hashset \u65e0\u5e8f\u96c6\u5408")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#557-btreeset-%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88"},"5.5.7. BTreeSet \u6709\u5e8f\u96c6\u5408")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#558-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97-binaryheap"},"5.5.8. \u4f18\u5148\u961f\u5217 BinaryHeap")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#56-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2"},"5.6. \u7c7b\u578b\u8f6c\u6362"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#561-%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2"},"5.6.1. \u57fa\u672c\u7684\u7c7b\u578b\u8f6c\u6362")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#562-%E8%BD%AC%E6%8D%A2%E7%9B%B8%E5%85%B3%E7%9A%84-trait"},"5.6.2. \u8f6c\u6362\u76f8\u5173\u7684 trait")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#57-%E6%89%80%E6%9C%89%E6%9D%83"},"5.7. \u6240\u6709\u6743"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#571-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%89%80%E6%9C%89%E6%9D%83-raii%E6%9C%BA%E5%88%B6"},"5.7.1. \u4e3a\u4ec0\u4e48\u9700\u8981\u6240\u6709\u6743 RAII\u673a\u5236")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#572-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99"},"5.7.2. \u57fa\u672c\u539f\u5219")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#573-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%B5%8B%E5%80%BC%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83"},"5.7.3. \u5b57\u7b26\u4e32\u8d4b\u503c\u7684\u6240\u6709\u6743")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#574-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83"},"5.7.4. \u51fd\u6570\u53c2\u6570\u7684\u6240\u6709\u6743")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#575-%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E6%89%80%E6%9C%89%E6%9D%83"},"5.7.5. \u51fd\u6570\u8fd4\u56de\u503c\u6240\u6709\u6743")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#576-%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83"},"5.7.6. \u590d\u5408\u7c7b\u578b\u4e2d\u7684\u6240\u6709\u6743")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#577-%E5%A4%9A%E6%89%80%E6%9C%89%E6%9D%83"},"5.7.7. \u591a\u6240\u6709\u6743")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#58-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%82%E6%95%B0"},"5.8. \u751f\u547d\u5468\u671f\u53c2\u6570"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#581-%E4%BB%80%E4%B9%88%E6%98%AF%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"},"5.8.1. \u4ec0\u4e48\u662f\u751f\u547d\u5468\u671f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#582-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%98%E5%9C%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B3%A8%E9%87%8A"},"5.8.2. \u4e3a\u4ec0\u4e48\u5b58\u5728\u751f\u547d\u5468\u671f\u6ce8\u91ca")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#583-%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%82%E6%95%B0"},"5.8.3. \u51fd\u6570\u4e2d\u7684\u751f\u547d\u5468\u671f\u53c2\u6570")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#584-%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E7%9C%81%E7%95%A5%E7%9A%84%E8%A7%84%E5%88%99"},"5.8.4. \u7ed3\u6784\u4f53\u4e2d\u751f\u547d\u5468\u671f \u7701\u7565\u7684\u89c4\u5219")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#585-%E9%9D%99%E6%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B3%A8%E9%87%8A"},"5.8.5. \u9759\u6001\u751f\u547d\u5468\u671f\u6ce8\u91ca")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#586-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%BA%A6%E6%9D%9F"},"5.8.6. \u751f\u547d\u5468\u671f\u7ea6\u675f")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#59-%E5%BC%95%E7%94%A8"},"5.9. \u5f15\u7528"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#591-%E5%BC%95%E7%94%A8%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D"},"5.9.1. \u5f15\u7528\u57fa\u672c\u4ecb\u7ecd")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#592-%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%BC%95%E7%94%A8"},"5.9.2. \u4e0d\u53ef\u53d8\u5f15\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#593-%E5%8F%AF%E5%8F%98%E5%BC%95%E7%94%A8"},"5.9.3. \u53ef\u53d8\u5f15\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#594-%E5%9E%82%E6%82%AC%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98dangling-references"},"5.9.4. \u5782\u60ac\u5f15\u7528\u95ee\u9898\uff08Dangling References)")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#510-%E8%A3%B8%E6%8C%87%E9%92%88"},"5.10. \u88f8\u6307\u9488")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#511-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88"},"5.11. \u667a\u80fd\u6307\u9488"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5111-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E4%BB%8B%E7%BB%8D-%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6"},"5.11.1. \u667a\u80fd\u6307\u9488\u4ecb\u7ecd \u5de5\u4f5c\u673a\u5236")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5112-raii%E6%9C%BA%E5%88%B6-%E5%AE%9E%E7%8E%B0%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6"},"5.11.2. RAII\u673a\u5236 \u5b9e\u73b0\u5185\u5b58\u56de\u6536")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5113-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88-%E8%87%AA%E5%8A%A8%E8%A7%A3%E5%BC%95%E7%94%A8-deref-%E5%92%8C-drop"},"5.11.3. \u81ea\u5b9a\u4e49\u667a\u80fd\u6307\u9488 \u81ea\u52a8\u89e3\u5f15\u7528 Deref \u548c Drop")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5114-box-%E6%97%A0%E7%97%9B%E4%BD%BF%E7%94%A8%E5%A0%86%E5%86%85%E5%AD%98"},"5.11.4. Box \u65e0\u75db\u4f7f\u7528\u5806\u5185\u5b58"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51141-box%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"},"5.11.4.1. Box\u57fa\u672c\u4f7f\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51142-%E5%8C%85%E8%A3%85%E5%8A%A8%E6%80%81%E5%A4%A7%E5%B0%8F%E7%B1%BB%E5%9E%8B-dst"},"5.11.4.2. \u5305\u88c5\u52a8\u6001\u5927\u5c0f\u7c7b\u578b DST")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5115-rc-%E5%92%8C-weak-%E5%85%B1%E4%BA%AB%E5%A0%86%E5%86%85%E5%AD%98"},"5.11.5. Rc \u548c Weak \u5171\u4eab\u5806\u5185\u5b58"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51151-rc-%E5%BC%BA%E5%BC%95%E7%94%A8"},"5.11.5.1. Rc \u5f3a\u5f15\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51152-%E6%9E%84%E9%80%A0%E9%93%BE%E8%A1%A8"},"5.11.5.2. \u6784\u9020\u94fe\u8868")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51153-weak-%E5%BC%B1%E5%BC%95%E7%94%A8"},"5.11.5.3. Weak \u5f31\u5f15\u7528")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5116-refcell-%E5%92%8C-cell-%E6%8F%90%E4%BE%9B%E5%86%85%E9%83%A8%E5%8F%AF%E5%8F%98%E6%80%A7"},"5.11.6. RefCell \u548c Cell \u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51161-cell"},"5.11.6.1. Cell")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51162-refcell"},"5.11.6.2. RefCell")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5117-rc-box-refcell-cell-%E5%87%A0%E7%A7%8D%E6%8C%87%E9%92%88%E7%9A%84%E5%8C%BA%E5%88%AB%E5%AF%B9%E6%AF%94-%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8"},"5.11.7. Rc Box RefCell Cell \u51e0\u79cd\u6307\u9488\u7684\u533a\u522b\u5bf9\u6bd4 \u7ec4\u5408\u4f7f\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5118-pin-%E5%92%8C-unpin"},"5.11.8. Pin \u548c Unpin")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5119-cow-%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6"},"5.11.9. Cow \u5199\u65f6\u590d\u5236")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#512-%E5%87%BD%E6%95%B0"},"5.12. \u51fd\u6570"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5121-%E5%87%BD%E6%95%B0%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95"},"5.12.1. \u51fd\u6570\u57fa\u672c\u8bed\u6cd5")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5122-%E5%87%BD%E6%95%B0%E4%BD%93%E8%A1%A8%E8%BE%BE%E5%BC%8F"},"5.12.2. \u51fd\u6570\u4f53\u8868\u8fbe\u5f0f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5123-%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0"},"5.12.3. \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5124-result-%E8%BF%94%E5%9B%9E%E5%80%BC"},"5.12.4. Result \u8fd4\u56de\u503c")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5125-%E7%BC%96%E8%AF%91%E6%9C%9F%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C-cfe"},"5.12.5. \u7f16\u8bd1\u671f\u51fd\u6570\u6267\u884c cfe")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5126-%E5%8F%91%E6%95%A3%E5%87%BD%E6%95%B0"},"5.12.6. \u53d1\u6563\u51fd\u6570")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5127-%E6%B3%9B%E5%9E%8B%E5%87%BD%E6%95%B0"},"5.12.7. \u6cdb\u578b\u51fd\u6570")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5128-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0"},"5.12.8. \u9ad8\u9636\u51fd\u6570"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51281-%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88"},"5.12.8.1. \u51fd\u6570\u6307\u9488")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51282-%E7%A6%81%E6%AD%A2%E5%87%BD%E6%95%B0%E6%8D%95%E8%8E%B7%E5%A4%96%E9%83%A8%E7%8E%AF%E5%A2%83%E4%B8%AD%E5%8F%98%E9%87%8F"},"5.12.8.2. \u7981\u6b62\u51fd\u6570\u6355\u83b7\u5916\u90e8\u73af\u5883\u4e2d\u53d8\u91cf")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#513-%E9%97%AD%E5%8C%85"},"5.13. \u95ed\u5305"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5131-%E9%97%AD%E5%8C%85%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"},"5.13.1. \u95ed\u5305\u57fa\u672c\u4f7f\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5132-rust-%E5%AE%9E%E7%8E%B0%E9%97%AD%E5%8C%85%E7%9A%84%E5%8E%9F%E7%90%86"},"5.13.2. rust \u5b9e\u73b0\u95ed\u5305\u7684\u539f\u7406")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5133-%E6%8D%95%E8%8E%B7%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-and-%E4%B8%89%E7%A7%8D%E9%97%AD%E5%8C%85%E7%B1%BB%E5%9E%8B"},"5.13.3. \u6355\u83b7\u73af\u5883\u53d8\u91cf and \u4e09\u79cd\u95ed\u5305\u7c7b\u578b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5134-%E9%97%AD%E5%8C%85%E4%BD%9C%E4%B8%BA%E8%BF%94%E5%9B%9E%E5%80%BC-or-%E5%8F%82%E6%95%B0"},"5.13.4. \u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c or \u53c2\u6570"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51341-%E9%80%83%E9%80%B8%E9%97%AD%E5%8C%85-%E9%9D%9E%E9%80%83%E9%80%B8%E9%97%AD%E5%8C%85"},"5.13.4.1. \u9003\u9038\u95ed\u5305 \u975e\u9003\u9038\u95ed\u5305")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51342-%E9%97%AD%E5%8C%85%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0"},"5.13.4.2. \u95ed\u5305\u4f5c\u4e3a\u53c2\u6570")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51343-%E9%97%AD%E5%8C%85%E4%BD%9C%E4%B8%BA%E8%BF%94%E5%9B%9E%E5%80%BC"},"5.13.4.3. \u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51344-%E9%97%AD%E5%8C%85%E5%8F%82%E6%95%B0%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"},"5.13.4.4. \u95ed\u5305\u53c2\u6570\u4e2d\u7684\u751f\u547d\u5468\u671f")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5135-%E8%BF%AD%E4%BB%A3%E5%99%A8"},"5.13.5. \u8fed\u4ee3\u5668"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51351-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%AD%E4%BB%A3%E5%99%A8"},"5.13.5.1. \u4ec0\u4e48\u662f\u8fed\u4ee3\u5668")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51352-iterator-trait"},"5.13.5.2. Iterator trait")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51353-%E8%BF%AD%E4%BB%A3%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8-%E6%94%B6%E9%9B%86%E5%99%A8-%E5%87%BD%E6%95%B0%E5%BC%8F%E9%A3%8E%E6%A0%BC"},"5.13.5.3. \u8fed\u4ee3\u5668\u9002\u914d\u5668 \u6536\u96c6\u5668 \u51fd\u6570\u5f0f\u98ce\u683c")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51354-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%AD%E4%BB%A3%E5%99%A8"},"5.13.5.4. \u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51355-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%82%E9%85%8D%E5%99%A8-%E6%94%B6%E9%9B%86%E5%99%A8"},"5.13.5.5. \u81ea\u5b9a\u4e49\u9002\u914d\u5668 \u6536\u96c6\u5668")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#514-%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF"},"5.14. \u6761\u4ef6\u5faa\u73af")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#515-%E6%B3%9B%E5%9E%8B"},"5.15. \u6cdb\u578b"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5151-%E5%8D%95%E6%80%81%E5%8C%96"},"5.15.1. \u5355\u6001\u5316")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5152-%E5%A4%9A%E9%87%8D%E7%BA%A6%E6%9D%9F-%E5%8A%A0%E5%8F%B7"},"5.15.2. \u591a\u91cd\u7ea6\u675f \u52a0\u53f7")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5153-%E9%BB%98%E8%AE%A4%E6%B3%9B%E5%9E%8B%E5%8F%82%E6%95%B0-and-%E5%85%B3%E8%81%94%E7%B1%BB%E5%9E%8B"},"5.15.3. \u9ed8\u8ba4\u6cdb\u578b\u53c2\u6570 and \u5173\u8054\u7c7b\u578b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5154-%E7%A9%BA%E7%BA%A6%E6%9D%9F"},"5.15.4. \u7a7a\u7ea6\u675f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5155-turbofish-%E6%93%8D%E4%BD%9C%E7%AC%A6-and-%E8%BF%94%E5%9B%9E%E5%80%BC%E8%87%AA%E5%8A%A8%E6%8E%A8%E5%AF%BC"},"5.15.5. turbofish \u64cd\u4f5c\u7b26 and \u8fd4\u56de\u503c\u81ea\u52a8\u63a8\u5bfc")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#516-trait"},"5.16. trait"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5161-trait-%E6%A6%82%E5%BF%B5"},"5.16.1. trait \u6982\u5ff5"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51611-trait-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"},"5.16.1.1. trait \u57fa\u672c\u4f7f\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51612-%E5%AD%A4%E5%84%BF%E8%A7%84%E5%88%99-%E9%80%9A%E8%BF%87fundamental%E8%A7%84%E9%81%BF"},"5.16.1.2. \u5b64\u513f\u89c4\u5219 \u901a\u8fc7fundamental\u89c4\u907f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51613-%E7%89%B9%E5%8C%96-specialization"},"5.16.1.3. \u7279\u5316 Specialization")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51614-trait-%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0-%E9%9C%80%E8%A6%81-impl-%E5%89%8D%E7%BC%80"},"5.16.1.4. trait \u4f5c\u4e3a\u53c2\u6570 \u9700\u8981 impl \u524d\u7f00")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51615-trait-%E4%BD%9C%E4%B8%BA-%E8%BF%94%E5%9B%9E%E5%80%BC-%E8%BF%94%E5%9B%9E%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B"},"5.16.1.5. trait \u4f5c\u4e3a \u8fd4\u56de\u503c \u8fd4\u56de\u52a8\u6001\u7c7b\u578b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51616-trait-%E7%BB%A7%E6%89%BF"},"5.16.1.6. trait \u7ee7\u627f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51617-%E9%9D%99%E6%80%81%E5%88%86%E5%8F%91-%E5%8A%A8%E6%80%81%E5%88%86%E5%8F%91"},"5.16.1.7. \u9759\u6001\u5206\u53d1 \u52a8\u6001\u5206\u53d1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51618-%E4%BD%BF%E7%94%A8%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%9E%8B"},"5.16.1.8. \u4f7f\u7528\u62bd\u8c61\u7c7b\u578b"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#516181-trait%E5%AF%B9%E8%B1%A1"},"5.16.1.8.1. trait\u5bf9\u8c61")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#516182-trait%E5%AF%B9%E8%B1%A1%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98-sized-trait"},"5.16.1.8.2. trait\u5bf9\u8c61\u5b89\u5168\u95ee\u9898 Sized trait")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#516183-impl-trait"},"5.16.1.8.3. impl trait")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51619-trait%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2"},"5.16.1.9. trait\u7684\u7c7b\u578b\u8f6c\u6362")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5162-%E5%8F%AF%E8%87%AA%E5%8A%A8%E6%8E%A8%E5%AF%BC%E7%9A%84trait"},"5.16.2. \u53ef\u81ea\u52a8\u63a8\u5bfc\u7684trait")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5163-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E7%9B%B8%E5%85%B3%E7%9A%84trait"},"5.16.3. \u8fd0\u7b97\u7b26\u91cd\u8f7d\u76f8\u5173\u7684trait")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5164-from-%E5%92%8C-into"},"5.16.4. From \u548c Into")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5165-derefmut-%E5%92%8C-deref"},"5.16.5. DerefMut \u548c Deref")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5166-asref-asmut"},"5.16.6. AsRef AsMut")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5167-borrow-trait"},"5.16.7. Borrow trait")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5168-drop-%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE"},"5.16.8. Drop \u8d44\u6e90\u91ca\u653e")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5169-%E6%A0%87%E7%AD%BE-trait"},"5.16.9. \u6807\u7b7e trait"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51691-send-%E5%92%8C-sync"},"5.16.9.1. Send \u548c Sync")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51692-copy-trait"},"5.16.9.2. Copy trait")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51693-sized-trait--%E5%92%8C-%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8Bdst"},"5.16.9.3. Sized trait  \u548c \u52a8\u6001\u7c7b\u578bDST")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51610-default-trait"},"5.16.10. Default trait")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51611-extend-trait"},"5.16.11. Extend trait")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51612-any-trait"},"5.16.12. Any trait")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#51613-%E5%92%8C%E6%AF%94%E8%BE%83%E6%8E%92%E5%BA%8F%E7%9B%B8%E5%85%B3%E7%9A%84trait"},"5.16.13. \u548c\u6bd4\u8f83\u6392\u5e8f\u76f8\u5173\u7684trait")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#517-%E5%85%83%E7%BB%84"},"5.17. \u5143\u7ec4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#518-%E7%BB%93%E6%9E%84%E4%BD%93"},"5.18. \u7ed3\u6784\u4f53"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5181-%E7%BB%93%E6%9E%84%E4%BD%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"},"5.18.1. \u7ed3\u6784\u4f53\u57fa\u672c\u4f7f\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5182-%E5%85%83%E7%BB%84%E7%BB%93%E6%9E%84%E4%BD%93-and-%E5%8D%95%E5%85%83%E7%BB%93%E6%9E%84%E4%BD%93"},"5.18.2. \u5143\u7ec4\u7ed3\u6784\u4f53 and \u5355\u5143\u7ed3\u6784\u4f53")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5183-%E7%BB%93%E6%9E%84%E4%BD%93%E6%96%B9%E6%B3%95"},"5.18.3. \u7ed3\u6784\u4f53\u65b9\u6cd5")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5184-new-type-%E6%A8%A1%E5%BC%8F-%E5%92%8C-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D-self%E5%88%AB%E5%90%8D"},"5.18.4. new type \u6a21\u5f0f \u548c \u7c7b\u578b\u522b\u540d Self\u522b\u540d")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5185-%E6%A1%88%E4%BE%8B-%E5%BD%A9%E8%89%B2%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%87%BA"},"5.18.5. \u6848\u4f8b \u5f69\u8272\u547d\u4ee4\u884c\u8f93\u51fa")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#519-%E6%9E%9A%E4%B8%BE"},"5.19. \u679a\u4e3e"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5191-%E6%9E%9A%E4%B8%BE%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"},"5.19.1. \u679a\u4e3e\u57fa\u672c\u4f7f\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5192-option"},"5.19.2. Option")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5193-c-%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%9E%9A%E4%B8%BE"},"5.19.3. c \u98ce\u683c\u7684\u679a\u4e3e")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5194-%E6%A1%88%E4%BE%8B-%E5%BD%A9%E8%89%B2%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%87%BA%E4%BC%98%E5%8C%96"},"5.19.4. \u6848\u4f8b \u5f69\u8272\u547d\u4ee4\u884c\u8f93\u51fa\u4f18\u5316")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5195-%E5%AE%9E%E4%BE%8B-%E5%88%9B%E5%BB%BA%E9%93%BE%E8%A1%A8"},"5.19.5. \u5b9e\u4f8b \u521b\u5efa\u94fe\u8868")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#520-match-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D"},"5.20. match \u6a21\u5f0f\u5339\u914d"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5201-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8"},"5.20.1. \u6a21\u5f0f\u5339\u914d\u7b80\u5355\u4f7f\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5202-if-lef-while-let-%E8%AF%AD%E6%B3%95%E7%B3%96"},"5.20.2. if lef while let \u8bed\u6cd5\u7cd6")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#521-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86"},"5.21. \u9519\u8bef\u5904\u7406"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5211-%E6%96%AD%E8%A8%80"},"5.21.1. \u65ad\u8a00")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5212-panic-%E5%92%8C-abort"},"5.21.2. panic \u548c Abort")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5213-result--%E5%92%8C-%E9%97%AE%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6"},"5.21.3. Result  \u548c \u95ee\u53f7\u64cd\u4f5c\u7b26")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5214-%E9%94%99%E8%AF%AF%E8%A3%85%E7%AE%B1-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8"},"5.21.4. \u9519\u8bef\u88c5\u7bb1 \u81ea\u5b9a\u4e49\u5f02\u5e38")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5215-%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8"},"5.21.5. \u6355\u83b7\u5f02\u5e38")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5216-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E8%BF%9B%E5%8C%96%E8%BF%87%E7%A8%8B"},"5.21.6. \u9519\u8bef\u5904\u7406\u8fdb\u5316\u8fc7\u7a0b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5217-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%A4%84%E7%90%86%E5%BC%82%E5%B8%B8"},"5.21.7. \u7b2c\u4e09\u65b9\u5e93\u5904\u7406\u5f02\u5e38")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#522-io"},"5.22. io"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5221-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0"},"5.22.1. \u547d\u4ee4\u884c\u53c2\u6570")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5222-%E6%96%87%E4%BB%B6-io"},"5.22.2. \u6587\u4ef6 io")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#523-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-oop"},"5.23. \u9762\u5411\u5bf9\u8c61 oop"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5231-%E5%8F%AF%E8%A7%81%E6%80%A7"},"5.23.1. \u53ef\u89c1\u6027")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5232-%E5%A4%9A%E6%80%81"},"5.23.2. \u591a\u6001")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5233-%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B"},"5.23.3. \u5411\u4e0b\u8f6c\u578b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5234-%E5%90%84%E7%A7%8Dself%E5%8C%BA%E5%88%86%E4%BD%BF%E7%94%A8"},"5.23.4. \u5404\u79cdself\u533a\u5206\u4f7f\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5235-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F"},"5.23.5. \u8bbe\u8ba1\u6a21\u5f0f"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#52351-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F"},"5.23.5.1. \u5efa\u9020\u8005\u6a21\u5f0f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#52352-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F"},"5.23.5.2. \u8bbf\u95ee\u8005\u6a21\u5f0f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#52353-raii%E6%A8%A1%E5%BC%8F"},"5.23.5.3. raii\u6a21\u5f0f")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#524-%E5%AD%90%E8%BF%9B%E7%A8%8B"},"5.24. \u5b50\u8fdb\u7a0b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#525-%E5%8F%8D%E5%B0%84"},"5.25. \u53cd\u5c04")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#526-%E5%AE%8F"},"5.26. \u5b8f"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5261-%E5%AE%8F%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D"},"5.26.1. \u5b8f\u57fa\u672c\u4ecb\u7ecd")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5262-%E5%A3%B0%E6%98%8E%E5%AE%8F"},"5.26.2. \u58f0\u660e\u5b8f"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#52621-%E5%88%9B%E5%BB%BA%E5%AE%8F"},"5.26.2.1. \u521b\u5efa\u5b8f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#52622-%E9%87%8D%E5%A4%8D%E5%BE%AA%E7%8E%AF%E5%8C%B9%E9%85%8D"},"5.26.2.2. \u91cd\u590d\u5faa\u73af\u5339\u914d")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#52623-%E5%AE%9E%E9%99%85%E6%A1%88%E4%BE%8B"},"5.26.2.3. \u5b9e\u9645\u6848\u4f8b")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5263-%E5%AE%8F%E8%B0%83%E8%AF%95"},"5.26.3. \u5b8f\u8c03\u8bd5")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5264-%E8%BF%87%E7%A8%8B%E5%AE%8F"},"5.26.4. \u8fc7\u7a0b\u5b8f"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#52641-%E8%BF%87%E7%A8%8B%E5%AE%8F%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E8%A7%84%E5%88%99"},"5.26.4.1. \u8fc7\u7a0b\u5b8f\u57fa\u672c\u4f7f\u7528\u89c4\u5219")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#52642-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E5%AE%8F"},"5.26.4.2. \u81ea\u5b9a\u4e49\u5c5e\u6027\u5b8f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#52643-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%AE%8F"},"5.26.4.3. \u51fd\u6570\u8c03\u7528\u5b8f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#52644-derive-%E5%AE%8F"},"5.26.4.4. derive \u5b8f")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5265-%E4%BD%BF%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85"},"5.26.5. \u4f7f\u7528\u7b2c\u4e09\u65b9\u5305")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#5266-%E7%BC%96%E8%AF%91%E5%99%A8%E6%8F%92%E4%BB%B6"},"5.26.6. \u7f16\u8bd1\u5668\u63d2\u4ef6")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#6-unsafe-%E5%B1%8F%E8%94%BD%E5%86%85%E5%AD%98%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5"},"6. unsafe \u5c4f\u853d\u5185\u5b58\u5b89\u5168\u68c0\u67e5"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#61-unsafe-%E5%9F%BA%E6%9C%AC%E5%9C%BA%E6%99%AF"},"6.1. unsafe \u57fa\u672c\u573a\u666f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#62-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91"},"6.2. \u4ea4\u53c9\u7f16\u8bd1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#63-ffi-%E5%A4%96%E9%83%A8%E5%87%BD%E6%95%B0%E6%8E%A5%E5%8F%A3"},"6.3. ffi \u5916\u90e8\u51fd\u6570\u63a5\u53e3"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#631-ffi-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D"},"6.3.1. ffi \u57fa\u672c\u4ecb\u7ecd")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#632-%E5%92%8C-elixir-%E4%BA%A4%E4%BA%92"},"6.3.2. \u548c elixir \u4ea4\u4e92")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#633-%E5%92%8Cc-cpp-%E4%BA%A4%E4%BA%92"},"6.3.3. \u548cc cpp \u4ea4\u4e92"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#6331-%E5%9C%A8-rust-%E4%B8%AD%E8%B0%83%E7%94%A8-c-%E5%87%BD%E6%95%B0"},"6.3.3.1. \u5728 rust \u4e2d\u8c03\u7528 C \u51fd\u6570")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#6332-%E5%9C%A8-rust%E8%B0%83%E7%94%A8-cpp"},"6.3.3.2. \u5728 rust\u8c03\u7528 cpp")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#6333-%E5%9C%A8-c-%E4%B8%AD%E8%B0%83%E7%94%A8-rust"},"6.3.3.3. \u5728 c \u4e2d\u8c03\u7528 rust")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#634-%E5%92%8C-python-%E4%BA%A4%E4%BA%92"},"6.3.4. \u548c Python \u4ea4\u4e92")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#635-%E5%92%8C-swift"},"6.3.5. \u548c Swift")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#636-%E5%92%8C-js-javascript-nodejs-%E4%BA%A4%E4%BA%92"},"6.3.6. \u548c js JavaScript nodejs \u4ea4\u4e92")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#637-%E5%92%8C-java-%E4%BA%A4%E4%BA%92"},"6.3.7. \u548c java \u4ea4\u4e92"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#6371-java-%E8%B0%83%E7%94%A8-rust"},"6.3.7.1. java \u8c03\u7528 rust")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#6372-rust-%E8%B0%83%E7%94%A8-java"},"6.3.7.2. rust \u8c03\u7528 java")))))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#7-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86"},"7. \u5185\u5b58\u7ba1\u7406"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#71-%E5%A0%86-%E5%92%8C-%E6%A0%88"},"7.1. \u5806 \u548c \u6808")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#72-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90"},"7.2. \u5185\u5b58\u5bf9\u9f50")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#73-%E6%89%8B%E5%8A%A8%E5%A0%86%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D"},"7.3. \u624b\u52a8\u5806\u5185\u5b58\u5206\u914d")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#8-%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86-%E6%A8%A1%E5%9D%97"},"8. \u5de5\u7a0b\u7ba1\u7406 \u6a21\u5757"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#81-%E6%A6%82%E5%BF%B5%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A"},"8.1. \u6982\u5ff5\u7b80\u5355\u89e3\u91ca")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#82-%E5%8F%AF%E8%A7%81%E6%80%A7%E7%AE%A1%E7%90%86"},"8.2. \u53ef\u89c1\u6027\u7ba1\u7406")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#83-%E7%BC%96%E8%AF%91%E5%99%A8%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86"},"8.3. \u7f16\u8bd1\u5668\u7248\u672c\u7ba1\u7406")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#84-%E4%B8%BA%E9%A1%B9%E7%9B%AE%E5%8D%95%E7%8B%AC%E6%8C%87%E5%AE%9Aconfig-%E9%85%8D%E7%BD%AE"},"8.4. \u4e3a\u9879\u76ee\u5355\u72ec\u6307\u5b9aconfig \u914d\u7f6e")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#85-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86-cargo"},"8.5. \u4f9d\u8d56\u7ba1\u7406 cargo"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#851-cargo-%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4"},"8.5.1. cargo \u57fa\u672c\u547d\u4ee4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#852-%E6%96%87%E4%BB%B6%E5%B8%83%E5%B1%80%E7%BB%93%E6%9E%84"},"8.5.2. \u6587\u4ef6\u5e03\u5c40\u7ed3\u6784")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#853-cargotoml"},"8.5.3. Cargo.toml")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#854-cargolock"},"8.5.4. cargo.lock")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#855-workspace"},"8.5.5. workspace")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#856-%E4%BE%9D%E8%B5%96%E7%9A%84%E7%89%88%E6%9C%AC%E5%8F%B7%E8%A7%84%E5%88%99"},"8.5.6. \u4f9d\u8d56\u7684\u7248\u672c\u53f7\u89c4\u5219")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#86-buildrs"},"8.6. build.rs")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#87-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%A1%88%E4%BE%8B"},"8.7. \u9879\u76ee\u7ba1\u7406\u6848\u4f8b"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#871-%E5%AF%BC%E5%87%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%8F"},"8.7.1. \u5bfc\u51fa\u81ea\u5b9a\u4e49\u5b8f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#872-%E5%AF%BC%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89-crate"},"8.7.2. \u5bfc\u5165\u81ea\u5b9a\u4e49 crate")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#873-%E6%89%A7%E8%A1%8C%E5%AD%90%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84-module"},"8.7.3. \u6267\u884c\u5b50\u76ee\u5f55\u4e2d\u7684 module")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#874-%E5%AF%BC%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89-module"},"8.7.4. \u5bfc\u5165\u81ea\u5b9a\u4e49 module")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#875-%E5%AF%BC%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9-crate"},"8.7.5. \u5bfc\u5165\u7b2c\u4e09\u65b9 crate")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#9-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95"},"9. \u5355\u5143\u6d4b\u8bd5")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#10-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-and-%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91"},"10. \u4ea4\u53c9\u7f16\u8bd1 and \u6761\u4ef6\u7f16\u8bd1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#11-%E5%B9%B6%E5%8F%91"},"11. \u5e76\u53d1"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#111-%E9%80%9A%E7%94%A8%E6%A6%82%E5%BF%B5"},"11.1. \u901a\u7528\u6982\u5ff5"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1111-%E8%BF%9B%E7%A8%8B-and-%E7%BA%BF%E7%A8%8B"},"11.1.1. \u8fdb\u7a0b and \u7ebf\u7a0b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1112-%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91"},"11.1.2. \u4e8b\u4ef6\u56de\u8c03\u5b9e\u73b0\u7684\u5f02\u6b65\u5e76\u53d1")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#112-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"},"11.2. \u7ebf\u7a0b\u57fa\u672c\u4f7f\u7528"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1121-%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B"},"11.2.1. \u521b\u5efa\u7ebf\u7a0b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1122-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E7%BA%BF%E7%A8%8B"},"11.2.2. \u81ea\u5b9a\u4e49\u914d\u7f6e\u7ebf\u7a0b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1123-%E7%BA%BF%E7%A8%8B%E6%9C%AC%E5%9C%B0%E5%8F%98%E9%87%8F"},"11.2.3. \u7ebf\u7a0b\u672c\u5730\u53d8\u91cf")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1124-%E6%89%8B%E5%8A%A8%E9%98%BB%E5%A1%9E%E5%94%A4%E9%86%92"},"11.2.4. \u624b\u52a8\u963b\u585e\u5524\u9192")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#113-%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5"},"11.3. \u7ebf\u7a0b\u540c\u6b65"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1131-%E9%94%99%E8%AF%AF%E7%A4%BA%E4%BE%8B"},"11.3.1. \u9519\u8bef\u793a\u4f8b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1132-%E9%94%81"},"11.3.2. \u9501")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1133-%E5%8E%9F%E5%AD%90%E7%B1%BB%E5%9E%8B"},"11.3.3. \u539f\u5b50\u7c7b\u578b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1134-channel"},"11.3.4. channel")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1135-tokio-%E4%B8%AD%E7%9A%84%E5%90%84%E7%A7%8D-channel-%E5%AE%9E%E7%8E%B0"},"11.3.5. tokio \u4e2d\u7684\u5404\u79cd channel \u5b9e\u73b0")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#114-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B0%8F%E4%BE%8B%E5%AD%90"},"11.4. \u591a\u7ebf\u7a0b\u5c0f\u4f8b\u5b50"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1141-%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E6%B1%A0"},"11.4.1. \u5b9e\u73b0\u7ebf\u7a0b\u6c60")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1142-%E5%AE%9E%E7%8E%B0-map-reduce-%E7%AE%97%E6%B3%95"},"11.4.2. \u5b9e\u73b0 map-reduce \u7b97\u6cd5")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1143-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E5%92%8C"},"11.4.3. \u591a\u7ebf\u7a0b\u7edf\u8ba1\u548c")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1144-%E5%B8%A6%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84-webserver"},"11.4.4. \u5e26\u7ebf\u7a0b\u6c60\u7684 webserver")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#115-rayon-%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1"},"11.5. rayon \u5e76\u884c\u6267\u884c\u4efb\u52a1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#116-crossbeam-%E6%97%A0%E9%94%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84"},"11.6. CrossBeam \u65e0\u9501\u7684\u6570\u636e\u7ed3\u6784")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#117-rwlock-%E5%92%8C-refcell"},"11.7. RwLock \u548c RefCell")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#118-mutex"},"11.8. Mutex")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#119-atomicptr-%E5%92%8C-cell"},"11.9. AtomicPtr \u548c Cell")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1110-send-%E5%92%8C-sync-trait"},"11.10. Send \u548c Sync trait")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#12-%E5%BC%82%E6%AD%A5%E5%B9%B6%E5%8F%91"},"12. \u5f02\u6b65\u5e76\u53d1"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#121-%E5%BC%82%E6%AD%A5%E6%A6%82%E5%BF%B5"},"12.1. \u5f02\u6b65\u6982\u5ff5"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1211-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5"},"12.1.1. \u4e3a\u4ec0\u4e48\u4f7f\u7528\u5f02\u6b65")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1212-%E6%99%AE%E9%80%9A%E5%A4%9A%E7%BA%BF%E7%A8%8B-webserver"},"12.1.2. \u666e\u901a\u591a\u7ebf\u7a0b webserver")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1213-%E6%94%B9%E8%BF%9B%E5%90%8E%E7%9A%84%E5%BC%82%E6%AD%A5%E7%89%88%E6%9C%AC"},"12.1.3. \u6539\u8fdb\u540e\u7684\u5f02\u6b65\u7248\u672c")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#122-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8"},"12.2. \u57fa\u672c\u4f7f\u7528"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1221-block_on"},"12.2.1. block","_","on")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1222-await"},"12.2.2. await")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1223-joinn"},"12.2.3. joinn")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#123-future%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%BC%8F"},"12.3. future\u5e76\u53d1\u6a21\u5f0f"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1231-future%E5%BA%95%E5%B1%82%E6%98%AF%E7%94%9F%E6%88%90%E5%99%A8"},"12.3.1. future\u5e95\u5c42\u662f\u751f\u6210\u5668")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1232-future%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E7%94%A8"},"12.3.2. future\u57fa\u672c\u4f7f\u7528\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1233-%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-future-%E7%B1%BB%E5%9E%8B"},"12.3.3. \u52a8\u624b\u5b9e\u73b0 Future \u7c7b\u578b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#1234-%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0-%E5%BC%82%E6%AD%A5-sleep"},"12.3.4. \u52a8\u624b\u5b9e\u73b0 \u5f02\u6b65 sleep")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#124-async-std"},"12.4. async-std")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#125-tokio"},"12.5. tokio")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#13-%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F"},"13. \u7b80\u5355\u6587\u4ef6\u7cfb\u7edf")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#14-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B"},"14. \u7f51\u7edc\u7f16\u7a0b"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#141-tcp"},"14.1. tcp")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#142-udp"},"14.2. udp")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#15-%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6"},"15. \u6d88\u606f\u4e2d\u95f4\u4ef6")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#16-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91"},"16. \u6e38\u620f\u5f00\u53d1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#17-%E7%88%AC%E8%99%AB"},"17. \u722c\u866b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#18-rpc-%E6%A1%86%E6%9E%B6"},"18. rpc \u6846\u67b6")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#19-%E7%BC%96%E5%86%99%E4%BB%A3%E7%90%86"},"19. \u7f16\u5199\u4ee3\u7406"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#191-http-%E4%BB%A3%E7%90%86"},"19.1. http \u4ee3\u7406")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#192-socket-%E4%BB%A3%E7%90%86"},"19.2. socket \u4ee3\u7406")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#20-%E5%BC%80%E5%8F%91%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-web-%E6%B8%B8%E6%88%8F"},"20. \u5f00\u53d1\u5fae\u4fe1\u5c0f\u7a0b\u5e8f-web \u6e38\u620f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#21-%E7%AC%AC%E4%B8%89%E6%96%B9-crates"},"21. \u7b2c\u4e09\u65b9 crates"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#211-%E4%BA%8B%E5%AE%9E%E4%B8%8A%E7%9A%84%E6%A0%87%E5%87%86%E5%BA%93"},"21.1. \u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\u5e93")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#212-markdown"},"21.2. markdown")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#213-%E6%A1%8C%E9%9D%A2%E5%BC%80%E5%8F%91"},"21.3. \u684c\u9762\u5f00\u53d1")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#214-%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86"},"21.4. \u89c6\u9891\u5904\u7406")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#215-%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86"},"21.5. \u56fe\u7247\u5904\u7406")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#216-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E4%B8%89%E6%96%B9%E5%BA%93"},"21.6. \u6e38\u620f\u5f00\u53d1\u4e09\u65b9\u5e93")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#217-%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF"},"21.7. \u7cfb\u7edf\u4fe1\u606f")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#218-web-%E5%BC%80%E5%8F%91%E5%8F%91"},"21.8. web \u5f00\u53d1\u53d1"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2181-swagger-openapi-%E7%94%9F%E6%88%90"},"21.8.1. swagger openapi \u751f\u6210")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2182-web%E6%A1%86%E6%9E%B6"},"21.8.2. web\u6846\u67b6")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2183-orm"},"21.8.3. orm")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2184-http-client"},"21.8.4. http client")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#219-%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96"},"21.9. \u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2191-toml"},"21.9.1. toml")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2192-json"},"21.9.2. json")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2110-%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE"},"21.10. \u8bfb\u5199\u6570\u636e")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2111-%E5%A2%9E%E5%BC%BA%E5%B7%A5%E5%85%B7"},"21.11. \u589e\u5f3a\u5de5\u5177")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2112-%E6%8E%88%E6%9D%83-authorization"},"21.12. \u6388\u6743 Authorization")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2113-%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F"},"21.13. \u65e5\u5fd7\u7cfb\u7edf"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#21131-tracing"},"21.13.1. tracing")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#21132-env_logger"},"21.13.2. env","_","logger")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#21133-log4rs-and-log"},"21.13.3. log4rs and log")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2114-%E6%96%87%E6%9C%AC%E8%A7%A3%E6%9E%90%E5%99%A8-parser"},"21.14. \u6587\u672c\u89e3\u6790\u5668 parser")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2115-lazy-static-%E5%BB%B6%E8%BF%9F%E5%88%9D%E5%A7%8B%E5%8C%96"},"21.15. lazy static \u5ef6\u8fdf\u521d\u59cb\u5316")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2116-%E7%94%B5%E5%AD%90%E4%B9%A6"},"21.16. \u7535\u5b50\u4e66")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2117-%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F"},"21.17. \u547d\u4ee4\u884c\u7a0b\u5e8f"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#21171-structopt"},"21.17.1. structopt")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#21172-clap"},"21.17.2. clap")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2118-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B"},"21.18. \u5f02\u6b65\u7f16\u7a0b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2119-websocket"},"21.19. websocket")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2120-%E7%BC%A9%E5%B0%8F%E4%BD%93%E7%A7%AF"},"21.20. \u7f29\u5c0f\u4f53\u79ef")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2121-http-client"},"21.21. http client")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2122-%E5%AE%B9%E9%94%99%E8%BF%90%E8%A1%8C%E6%97%B6"},"21.22. \u5bb9\u9519\u8fd0\u884c\u65f6")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2123-%E7%9B%91%E6%8E%A7"},"21.23. \u76d1\u63a7")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2124-%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6"},"21.24. \u7535\u5b50\u90ae\u4ef6")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2125-%E5%88%86%E5%8F%91%E5%B7%A5%E5%85%B7"},"21.25. \u5206\u53d1\u5de5\u5177")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2126-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B"},"21.26. \u5e76\u53d1\u7f16\u7a0b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2127-gui-%E5%9B%BE%E5%BD%A2%E5%BA%93"},"21.27. gui \u56fe\u5f62\u5e93")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2128-%E5%BA%95%E5%B1%82%E7%BD%91%E7%BB%9C-api"},"21.28. \u5e95\u5c42\u7f51\u7edc api")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2129-%E6%AD%A3%E5%88%99"},"21.29. \u6b63\u5219")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2130-%E9%9A%8F%E6%9C%BA"},"21.30. \u968f\u673a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#21301-rand-%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%AD%97"},"21.30.1. rand \u968f\u673a\u6570\u5b57")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2131-%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E"},"21.31. \u641c\u7d22\u5f15\u64ce")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#2132-%E5%BC%80%E6%BA%90%E9%9B%86%E5%90%88%E5%AE%B9%E5%99%A8"},"21.32. \u5f00\u6e90\u96c6\u5408\u5bb9\u5668")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E5%BC%95%E6%93%8E"},"\u5176\u4ed6\u8bed\u8a00\u5f15\u64ce")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#22-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE"},"22. \u5f00\u6e90\u9879\u76ee")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#23-%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"},"23. \u53c2\u8003\u94fe\u63a5"))),(0,l.kt)("h1",{id:"1-\u7b80\u5355\u4ecb\u7ecd"},"1. \u7b80\u5355\u4ecb\u7ecd"),(0,l.kt)("h2",{id:"11-pros-and-cons"},"1.1. Pros and Cons"),(0,l.kt)("p",null,"Pros"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5728\u6ca1\u6709 GC \u7684\u52a0\u6301\u4e0b, \u4ece\u8bed\u8a00\u5c42\u9762\u5b9e\u73b0\u4e86\u5185\u5b58\u5b89\u5168 (\u5f53\u7136\u4e86, \u4ee3\u4ef7\u5c31\u662f\u5f15\u5165\u4e86\u751f\u547d\u5468\u671f, \u6240\u6709\u6743\u673a\u5236...)"),(0,l.kt)("li",{parentName:"ul"},"\u8bde\u751f\u7684\u665a, \u8bed\u8a00\u7279\u6027\u535a\u91c7\u4f17\u957f, \u8bed\u6cd5\u4f18\u7f8e\u5bcc\u6709\u8868\u73b0\u529b (\u6211\u60f3\u8fd9\u662f\u5f88\u5438\u5f15\u4eba\u7684\u4e00\u70b9)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u5982\u5438\u6536\u4e86 scala\u4e2d\u7684Option\uff0cSome\uff0cNone; "),(0,l.kt)("li",{parentName:"ul"},"golang\u4e2d\u7684\u521d\u59cb\u5316\u8bed\u6cd5\uff0cchannel"),(0,l.kt)("li",{parentName:"ul"},"js\u7684async await"))),(0,l.kt)("li",{parentName:"ul"},"\u540c\u65f6\u548c\u5176\u4ed6\u8bed\u8a00\u7684\u4ea4\u4e92\u66f4\u65b9\u4fbf, ffi \u66f4\u5bb9\u6613\u4f7f\u7528....")),(0,l.kt)("p",null,"Cons"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u7f16\u8bd1\u7279\u522b\u6162, \u5c24\u5176\u548c\u8001\u5bf9\u624b go \u6bd4\u8f83"),(0,l.kt)("li",{parentName:"ul"},"\u8bed\u6cd5\u590d\u6742, \u7279\u522b\u662f\u5939\u6742\u4e86\u751f\u547d\u5468\u671f\u7684\u8bed\u6cd5\u540e, \u4ee3\u7801\u7279\u522b\u96be\u8bfb"),(0,l.kt)("li",{parentName:"ul"},"\u5b8f\u7684\u8bed\u6cd5\u5f88\u5947\u602a, \u6bd4\u5982 ",(0,l.kt)("inlineCode",{parentName:"li"},"#[cfg(all(not(baremetal), any(feature = \u201chazmat\u201d, feature = \u201cdebug_print\u201d)))]"),", \u4f7f\u7528\u2018=\u2019\u6765\u8868\u793a\u7b49\u4ef7\u800c\u4e0d\u662f\u8d4b\u503c"),(0,l.kt)("li",{parentName:"ul"},"\u5141\u8bb8\u53d8\u91cf\u91cd\u590d\u5b9a\u4e49(\u5c31\u662f\u53d8\u91cf\u540d\u76f8\u540c, \u4f46\u662f\u7c7b\u578b\u4e0d\u540c)",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"\u6211\u89c9\u5f97\u662f\u4e0d\u597d\u7684\u8bbe\u8ba1; \u5b98\u65b9\u8bf4\u6cd5\u662f\u8bf4\u4e3a\u4e86\u53ef\u4ee5\u5728\u7c7b\u578b\u8f6c\u6362\u7684\u65f6\u5019\u65b9\u4fbf\u5730\u547d\u540d\u53d8\u91cf, \u4f46\u662f\u8fd9\u6837\u771f\u7684\u589e\u52a0\u4e86\u9605\u8bfb\u4ee3\u7801\u7684\u5fc3\u667a\u8d1f\u62c5"),(0,l.kt)("p",{parentName:"blockquote"},"\u8fd9\u4e2a\u70b9\u597d\u50cf\u6709\u89e3: \u5f00clippy lint\u53ef\u4ee5\u7981\u6389"))),(0,l.kt)("li",{parentName:"ul"},"if let\u8bed\u6cd5\u7cd6, \u5b58\u5728\u4e00\u4e2a\u8bed\u4e49\u4e0d\u4e00\u81f4\u7684\u95ee\u9898",(0,l.kt)("blockquote",{parentName:"li"},(0,l.kt)("p",{parentName:"blockquote"},"if\u548clet\u90fd\u5206\u522b\u6709\u5404\u81ea\u7684\u610f\u601d\uff0cif\u540e\u9762\u53ea\u80fd\u8ddfbool\uff0clet\u8868\u8fbe\u5f0f\u5e76\u4e0devaluate\u6210bool\u7c7b\u578b\uff0c\u8fd9\u91cc\u7684if let\u5b9e\u73b0\u7684\u662fpattern match\u7684\u529f\u80fd\uff0c\u867d\u7136let\u4e5f\u53ef\u4ee5\u7528\u6765pattern match\uff0c\u4f46\u662f\u548cif\u539f\u672c\u7684\u8bed\u4e49\u4e0d\u534f\u8c03, \u53ef\u4ee5\u8bf4\u8bbe\u8ba1\u7684\u4e0d\u591f\u597d")))),(0,l.kt)("h2",{id:"12-\u67b6\u6784"},"1.2. \u67b6\u6784"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u597d\u7684\u67b6\u6784\u9700\u8981\u6709\u6e05\u6670\u7684\u6982\u5ff5, \u8f6f\u4ef6\u53f2\u4e0a\u4f18\u96c5\u7684\u67b6\u6784\u8bbe\u8ba1\u901a\u5e38\u6709\u4f18\u96c5\u7684\u6982\u5ff5:\n\n    - socket \n    - stream /flow \n    - pipe \n\n    \u6bd4\u5982\u8bf4, \u73b0\u5728\u9700\u8981\u5bf9\u8f93\u5165\u7684\u4e00\u6bb5\u6587\u672c\u7edf\u8ba1\u67d0\u4e2a\u5355\u8bcd\u7684\u4e2a\u6570, \u90a3\u4e48\u9996\u5148\u9700\u8981\u8fdb\u884c\u5207\u5272, \u8fd9\u4e2a\u52a8\u4f5c\u53ef\u4ee5\u62bd\u8c61\u51fa\u4e00\u4e2a\u6982\u5ff5, \u53eb\u505a \u5206\u8bcd(tokenize), \u7136\u540e\u662f\u5bf9\u6bcf\u4e2a\u8bcd\u505a\u5904\u7406, \u8fd9\u4e2a\u5904\u7406\u53ef\u80fd\u662f\u7ebf\u6027\u7684, \u4e5f\u53ef\u80fd\u662f\u5e76\u884c\u7684, \u8fd9\u4e2a\u6982\u5ff5\u53eb\u505a map ...\n\n\u597d\u7684\u67b6\u6784\u6709\u5b9a\u4e49\u6e05\u6670\u7684\u63a5\u53e3\n\n\u597d\u7684\u67b6\u6784\u8981\u80fd\u591f\u5ef6\u8fdf\u51b3\u7b56\n\n    - \u51fd\u6570\u662f\u4ee3\u7801\u5757\u7684\u5ef6\u8fdf\u7ed1\u5b9a\n    - \u7c7b\u578b\u662f\u503c\u7684\u5ef6\u8fdf\u7ed1\u5b9a \n    - \u6cdb\u578b\u662f\u7c7b\u578b\u7684 \u5ef6\u8fdf\u7ed1\u5b9a \n    - \u6cdb\u578b\u51fd\u6570\u662f\u51fd\u6570\u7684\u5ef6\u8fdf\u7ed1\u5b9a\n    - \u914d\u7f6e\u662f\u4e1a\u52a1\u903b\u8f91\u7684 \u5ef6\u8fdf\u7ed1\u5b9a \n    - \u7528\u6237\u4ee3\u7801\u662f\u5ef6\u8fdf\u7ed1\u5b9a\u7684\u6700\u9ad8\u8868\u73b0\u5f62\u5f0f, \u6bd4\u5982 nginx\n\n")),(0,l.kt)("h2",{id:"13-\u4f18\u70b9-\u5bf9\u6bd4"},"1.3. \u4f18\u70b9 \u5bf9\u6bd4"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u9ad8\u6027\u80fd: \u96f6\u6210\u672c\u62bd\u8c61")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u5b89\u5168\u6027: \u6240\u6709\u6743\u7cfb\u7edf\u51e0\u4e4e\u89e3\u51b3\u4e86\u91ce\u6307\u9488, \u5f3a\u5927\u7684\u7c7b\u578b\u7cfb\u7edf")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u8868\u8fbe\u529b")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u751f\u6001\u5de5\u5177\u5b8c\u5907: \u81ea\u5e26\u6d4b\u8bd5, cargo \u5de5\u5177"))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://opensource.com/article/20/5/rust-java"},"https://opensource.com/article/20/5/rust-java")," \u4e3a\u4ec0\u4e48java -> rust"),(0,l.kt)("h2",{id:"14-\u601d\u60f3"},"1.4. \u601d\u60f3"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u660e\u786e : \u6709\u5f88\u591a\u5176\u4ed6\u8bed\u8a00\u50cf Python, java, \u4e3a\u4e86\u7167\u987e\u521d\u5b66\u8005\u4ed6\u4f1a\u628a\u5f88\u591a\u57fa\u672c\u7684\u6982\u5ff5\u9690\u85cf\u5728\u8bed\u6cd5\u7684\u540e\u9762, \u6bd4\u5982\u6bcf\u4e00\u6761\u8bed\u53e5\u7684\u53d8\u91cf\u5206\u914d, \u5728\u5806\u8fd8\u662f\u5728\u6808\u6267\u884c, \u90fd\u88ab\u5c4f\u853d\u4e86, \u5728\u505a\u4e00\u4e9b\u6027\u80fd\u4f18\u5316, \u548c\u5176\u4ed6\u8bed\u8a00\u8fdb\u884c\u4ea4\u4e92\u5c31\u4f1a\u66b4\u9732\u95ee\u9898")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u96f6\u6210\u672c\u62bd\u8c61(zero cost abstract): (\u7f16\u8bd1\u671f\u95f4\u5373\u53ef\u7f16\u8bd1\u6210\u673a\u5668\u7801, \u8fd0\u884c\u65f6\u6ca1\u6709\u5f00\u9500), \u6ca1\u6709 runtime \u548c gc, \u548c c \u65e0\u7f1d\u4ea4\u4e92, \u6bd4\u5982 future \u5c31\u662f\u4e00\u4e2a\u5f88\u6f02\u6d6a\u7684\u62bd\u8c61")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u5168\u80fd: \u4ece\u7cfb\u7edf\u5c42\u5230 web \u5c42, \u90fd\u53ef\u4ee5\u4f7f\u7528 rust \u5f00\u53d1"))),(0,l.kt)("h2",{id:"15-\u8bed\u4e49-\u6982\u5ff5"},"1.5. \u8bed\u4e49 \u6982\u5ff5"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u8303\u5f0f: \u9762\u5411\u5bf9\u8c61 , \u51fd\u6570\u5f0f"),(0,l.kt)("li",{parentName:"ol"},"\u8bed\u4e49: \u6240\u6709\u6743, move, copy, \u501f\u7528, lifecycle, drop"),(0,l.kt)("li",{parentName:"ol"},"\u7c7b\u578b\u7cfb\u7edf: \u6cdb\u578b, trait, \u591a\u6001, \u7c7b\u578b\u63a8\u65ad"),(0,l.kt)("li",{parentName:"ol"},"\u5185\u5b58\u7ba1\u7406: heap, stack, raii")),(0,l.kt)("p",null,"1, 2, 3 \u70b9\u6d89\u53ca\u5230\u5f00\u53d1\u8005\u7684\u64cd\u4f5c, 2,3,4 \u7f16\u8bd1\u5668\u64cd\u4f5c"),(0,l.kt)("h1",{id:"2-\u5f00\u53d1\u73af\u5883\u914d\u7f6e"},"2. \u5f00\u53d1\u73af\u5883\u914d\u7f6e"),(0,l.kt)("h2",{id:"21-install"},"2.1. install"),(0,l.kt)("p",null,"git \u73af\u5883\u652f\u6301"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/tools/install"},"https://www.rust-lang.org/tools/install")),(0,l.kt)("p",null,"\u4f1a\u81ea\u52a8\u5b89\u88c5 cargo"),(0,l.kt)("p",null,"\u5b89\u88c5\u5b8c\u6210\u540e\u9000\u51fa\u518d\u6b21\u8fdb\u5165 terminal, rustc \u7b49\u547d\u4ee4\u81ea\u52a8\u52a0\u5165 path \u4e86"),(0,l.kt)("p",null,"\u7ed9nightly\u901a\u9053\u7528\u6237\u7684\u5c0f\u63d0\u793a\uff1a\u5728\u66f4\u65b0rust\u4e4b\u540e\u4f7f\u7528cargo-sweep\u6765\u5e2e\u52a9\u4f60\u6e05\u7406\u5783\u573e\n\u5bf9\u4e8enightly\u901a\u9053\u7684\u7528\u6237\u6765\u8bf4\uff0c\u901a\u5e38\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u4f1a\u4f34\u968f\u7740\u9891\u7e41\u7684\u5347\u7ea7\u4f60\u7684rust\u7248\u672c\uff0c\u800c\u5bf9\u4e8e\u65e5\u5e38\u7ef4\u62a4\u7684\u9879\u76ee\uff0c\u5982\u679c\u4f60\u5347\u7ea7\u4e86rust\u7248\u672c\u4e4b\u540e\uff0ctarget\u7f16\u8bd1\u6587\u4ef6\u5939\u91cc\u9762\u4f1a\u751f\u6210\u591a\u4e2a\u7248\u672c\u7684\u7f16\u8bd1\u6587\u4ef6\u3002\u8fd9\u4e2a\u65f6\u5019\u5c31\u662f\u4f7f\u7528cargo sweep\u7684\u65f6\u5019\u4e86\uff0c\u5b83\u4f1a\u5e2e\u4f60\u6e05\u7406\u6389\u9664\u4e86\u5f53\u524d\u7248\u672c\u4ee5\u5916\u7684target\u76ee\u5f55\u4e0b\u591a\u4f59\u7684\u6587\u4ef6\u3002"),(0,l.kt)("p",null,"\u7528\u4f8b\uff1a cargo sweep -i -r -v ~/src"),(0,l.kt)("p",null,"-i \u662f\u5f00\u542f\u4fdd\u7559~/src\u76ee\u5f55\u4e0btarget\u6587\u4ef6\u5939\u5185\u5f53\u524d\u7535\u8111\u4e0a\u5df2\u5b89\u88c5rust\u7248\u672c\u7684\u7f16\u8bd1\u6587\u4ef6\u3002\n-r \u662f\u5f00\u542f\u9012\u5f52\uff08recursively\uff09\u641c\u7d22\n-v \u662f\u5f00\u542f\u8be6\u7ec6\uff08\u5570\u55e6\u6a21\u5f0f\uff0c\u5f00\u542f\u4e4b\u540e\u4f1a\u544a\u8bc9\u4f60\u5b83\u5e72\u4e86\u5565\u3002\uff09\n\u5982\u679c\u4f60\u7684\u7535\u8111\u4e0a\u6ca1\u6709cargo sweep\uff0c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a cargo install cargo-sweep"),(0,l.kt)("p",null,"Read More: ",(0,l.kt)("a",{parentName:"p",href:"https://www.reddit.com/r/rust/comments/jfdiao/tip_for_nightly_users_use_cargosweep_after/"},"https://www.reddit.com/r/rust/comments/jfdiao/tip_for_nightly_users_use_cargosweep_after/")),(0,l.kt)("h2",{id:"22-\u547d\u4ee4\u884c\u5de5\u5177\u4f7f\u7528"},"2.2. \u547d\u4ee4\u884c\u5de5\u5177\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"rustc --version\n# \u7f16\u8bd1\u5355\u4e2a\u6587\u4ef6, \u751f\u6210 xxx \u53ef\u6267\u884c\u6587\u4ef6\n\nrustc <xxx.rs>\n# \u7f16\u8bd1 \u8fd0\u884c dry.rs \u4e0b\u7684 test mod, \u65e0\u9700 main\u51fd\u6570\nrustc --test dry.rs && ./dry\n\n\n# \u7ba1\u7406 rust \u7248\u672c, \n\nrustup update\n\n# rust \u6709 stable (\u9ed8\u8ba4)\u3001nightly \u7248\u672c\u4e4b\u5206\nrustup install nightly\n\n# \u5f53\u524d\u9879\u76ee\u4e0b\u751f\u6548\nrustup override set nightly\nrustup override set stable\n\n# \u8bbe\u7f6e\u9ed8\u8ba4\u503c, \u5bf9\u5168\u5c40\u6240\u6709\u9879\u76ee\u751f\u6548\nrustup default stable\nrustup default nightly\n\nrustup default # show current version\n\n")),(0,l.kt)("h2",{id:"23-ide"},"2.3. IDE"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"vscode + rust-analyzer + CodeLLDB  (debug, format) + even better toml (toml support) + crates (view crate version) + advanced-new-file + error lens (show error msg in editor) + github copilot + idea keybindings")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"clion/idea + rust \u63d2\u4ef6 + toml \u63d2\u4ef6 + NativeDebug\u63d2\u4ef6"))),(0,l.kt)("p",null,"\u5176\u4ed6\u4ee3\u7801\u63d0\u793a\u914d\u7f6e: (\u63a8\u8350 vscode + \u63d2\u4ef6, \u5c31\u65e0\u9700\u5982\u4e0b\u7684\u914d\u7f6e\u4e86)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"# https://www.jianshu.com/p/c952db541d79\n# \u4ee3\u7801\u63d0\u793a\ncargo install racer\n# \u5982\u679c\u4e0d\u6210\u529f, \u5347\u7ea7\u5230 nightly\nrustup install nightly\n# \u5982\u679c\u62a5\u9519\uff0c\u5219\u9700\u8981\u5207\u6362\u5230nightly\u7248\u672c\u7684\u7f16\u8bd1\u5668\n# \u7136\u540e\u518d\u6b21 \u5b89\u88c5 racer\nrustup default nightly\n\n# \u6216\u8005 \u76f4\u63a5\ncargo +nightly install racer\n\n# \u4ee3\u7801\u5206\u6790\nrustup component add clippy\n\n")),(0,l.kt)("h2",{id:"24-\u914d\u7f6e\u56fd\u5185\u955c\u50cf"},"2.4. \u914d\u7f6e\u56fd\u5185\u955c\u50cf"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.cnblogs.com/dhcn/p/12100675.html"},"https://www.cnblogs.com/dhcn/p/12100675.html")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-t"},'[registry]\ntoken = "xxx crate.io token" # \u6ce8\u518c\u8d26\u53f7\u540e\u7531\u7f51\u7ad9\u9881\u53d1, \u7528\u4e8e\u53d1\u5e03\u5305\n# \u653e\u5230 `$HOME/.cargo/config` \u6587\u4ef6\u4e2d\n[source.crates-io]\nregistry = "https://github.com/rust-lang/crates.io-index"\n\n# \u66ff\u6362\u6210\u4f60\u504f\u597d\u7684\u955c\u50cf\u6e90\nreplace-with = \'rustcc\'\n#replace-with = \'ustc\'\n\n# \u6e05\u534e\u5927\u5b66\n[source.tuna]\nregistry = "https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git"\n\n# \u4e2d\u56fd\u79d1\u5b66\u6280\u672f\u5927\u5b66\n[source.ustc]\nregistry = "git://mirrors.ustc.edu.cn/crates.io-index"\n\n# \u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\n[source.sjtu]\nregistry = "https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index"\n\n# rustcc\u793e\u533a\n[source.rustcc]\nregistry = "git://crates.rustcc.cn/crates.io-index"\n\n# \u547d\u4ee4\u522b\u540d\n[alias]\nb = "build"\nt = "test"\nr = "run"\nrr = "run --release"\nben = "bench"\nspace_example = ["run", "--release", "--", "\\"command list\\""]\n')),(0,l.kt)("h1",{id:"3-\u6807\u51c6\u5e93"},"3. \u6807\u51c6\u5e93"),(0,l.kt)("h2",{id:"31-path-\u8def\u5f84"},"3.1. path \u8def\u5f84"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n/// \u8def\u5f84\n/// \n/// Path \u53ef\u4ece OsStr \u7c7b\u578b\u521b\u5efa\n/// \n/// Path \u5206\u4e3a\u4e24\u79cd\uff1aposix::Path\uff0c\u9488\u5bf9 \u7c7b UNIX \u7cfb\u7edf\uff1b\u4ee5\u53ca windows::Path\uff0c\u9488\u5bf9 Windows\u3002\n/// prelude \u4f1a\u9009\u62e9\u5e76\u8f93\u51fa\u7b26\u5408\u5e73\u53f0\u7c7b\u578b \u7684 Path \u79cd\u7c7b\u3002(prelude \u662f Rust \u81ea\u52a8\u5730\u5728\u6bcf\u4e2a\u7a0b\u5e8f\u4e2d\u5bfc\u5165\u7684\u4e00\u4e9b\u901a\u7528\u7684\u4e1c\u897f)\n/// \n/// Path \u5728\u5185\u90e8\u5e76\u4e0d\u662f\u7528 UTF-8 \u5b57\u7b26\u4e32\u8868\u793a\u7684\uff0c\u800c\u662f\u5b58\u50a8\u4e3a\u82e5\u5e72\u5b57\u8282\uff08Vec<u8>\uff09\u7684 vector\u3002\n/// \u56e0\u6b64\uff0c\u5c06 Path \u8f6c\u5316\u6210 &str \u5e76\u975e\u96f6\u5f00\u9500\u7684\uff08free\uff09\uff0c\u4e14\u53ef\u80fd\u5931\u8d25\uff08\u56e0\u6b64\u5b83 \u8fd4\u56de\u4e00\u4e2a Option\uff09\n/// \nfn path_demo() {\n    println!("-------------path_demo-------------");\n    use std::path::Path;\n\n    let path = Path::new(".");\n\n\n    // \u8def\u5f84\u662f\u5426\u5b58\u5728\n    Path::new("/etc/hosts").exists()\n    // \u6216\u8005\n    fs::metadata(path).is_ok()\n\n    \n    // `display` \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u53ef\u663e\u793a\uff08showable\uff09\u7684\u7ed3\u6784\u4f53\n    let display = path.display();\n    println!("path = {}", display);\n\n    // `join` \u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u7279\u5b9a\u7684\u5206\u9694\u7b26\u6765\u5408\u5e76\u8def\u5f84\u5230\u4e00\u4e2a\u5b57\u8282\u5bb9\u5668\uff0c\u5e76\u8fd4\u56de\u65b0\u7684\u8def\u5f84\n    let new_path = path.join("a").join("b");\n\n    // \u5c06\u8def\u5f84\u8f6c\u6362\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u5207\u7247\n    match new_path.to_str() {\n        None => panic!("new path is not a valid UTF-8 sequence"),\n        Some(s) => println!("new path is {}", s),\n    }\n\n\n}\n')),(0,l.kt)("h2",{id:"32-\u65f6\u95f4"},"3.2. \u65f6\u95f4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\nfn time_demo() {\n    let start = SystemTime::now();\n    for _ in 0..10000000 {\n        let _a = "hello".to_string();\n    }\n    println!("{} ms", SystemTime::now().duration_since(start).unwrap().as_millis());\n}\n\n\n\n')),(0,l.kt)("h1",{id:"4-\u5bf9\u6bd4-2018"},"4. \u5bf9\u6bd4 2018"),(0,l.kt)("h2",{id:"41-nll"},"4.1. nll"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// nll \u7279\u6027\n// 2015 edition \u7684\u5468\u671f\u68c0\u67e5\u4f1a\u8ba4\u4e3a \u53d8\u91cf\u6709\u6548\u76f4\u5230\u4f5c\u7528\u57df\u7ed3\u675f\n// 2018 edition \u4f1a\u5206\u6790\u4ee3\u7801, \u786e\u8ba4\u53d8\u91cf\u540e\u9762\u4e0d\u4f1a\u7528\u5230, \u5219\u63d0\u524d\u9500\u6bc1\u53d8\u91cf\n{\n    let mut x = 2;\n    let y = &mut x;\n    *y += 1; // 2018 edition \u5728\u8fd9\u4e00\u6b65\u540e, \u9500\u6bc1 y\n    println!(\"{}\", x); // 2015 \u5230\u8fd9\u4e00\u6b65\u624d\u9500\u6bc1 y\n}\n\n\n\n\n// \u975e\u8bcd\u6cd5\u4f5c\u7528\u57df\u751f\u547d\u5468\u671f (Non-Lexical Lifetime, NLL\nfn foo<'a>(x: &'a str, y: &'a str) -> &'a str {\n    if x.len() % 2 == 0 {\n        x\n    } else {\n        y\n    }\n}\nfn main(){\n    let x = String::from(\"hello\");\n    //2015 \u4e2d error, 2018 \u5f15\u5165\u4e86 nll, \u4e0d\u62a5\u9519\n    let z;\n    let y = String::from(\"world\");\n    z = foo(&x, &y); // 2015 \u8ba4\u4e3a\u5230\u8fd9\u91cc y \u5df2\u7ecf\u5931\u6548\u4e86, \u6240\u4ee5\u62a5\u9519, \u5b9e\u9645\u8fd9\u4e0d\u7b26\u5408\u76f4\u89c9\n    println!(\"{:?}\", z);\n}\n\n// nll \u65e0\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\nfn get_default<'r,K:Hash+Eq+Copy,V:Default>(map: &'r mut HashMap<K,V>,\n                                            key: K)\n                                            -> &'r mut V {\n    match map.get_mut(&key) { // -------------+ 'r\n        Some(value) => value,              // |\n        None => {                          // |\n            map.insert(key, V::default()); // |\n            //  ^~~~~~ ERROR               // |\n            map.get_mut(&key).unwrap()     // |\n        }                                  // |\n    }                                      // |\n}  \n// \u4fee\u6b63\u5982\u4e0b:\nfn get_default2<'r,K:Hash+Eq+Copy,V:Default>(map: &'r mut HashMap<K,V>,\n                                             key: K)\n                                             -> &'r mut V {\n    if map.contains_key(&key) {\n    // ^~~~~~~~~~~~~~~~~~ 'n\n        return match map.get_mut(&key) { // + 'r\n            Some(value) => value,        // |\n            None => unreachable!()       // |\n        };                               // v\n    }\n\n    // At this point, `map.get_mut` was never\n    // called! (As opposed to having been called,\n    // but its result no longer being in use.)\n    map.insert(key, V::default()); // OK now.\n    map.get_mut(&key).unwrap()\n}\n\n\n\n")),(0,l.kt)("h2",{id:"42-raw-identifier"},"4.2. Raw identifier"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u5229\u7528 Raw identifier \u5c06\u8bed\u8a00\u5173\u952e\u5b57\u7528\u4f5c\u51fd\u6570\u540d (\u4e00\u822c\u7528\u4e8e FFI \u4e2d\uff0c\u7528\u4e8e\u907f\u514d C \u51fd\u6570\u540d\u548c Rust \u7684\u5173\u952e\u5b57\u6216\u4fdd\u7559\u5b57\u91cd\u540d)\nfn r#match(needle : &str , haystack : &str) - > bool\n")),(0,l.kt)("h2",{id:"43-\u7b80\u5316\u6a21\u5f0f\u5339\u914d"},"4.3. \u7b80\u5316\u6a21\u5f0f\u5339\u914d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n// match \u6a21\u5f0f\u5339\u914d\n\nfn main() {\n    let o = &Some("h".to_owned());\n    // 2015\n    //  ref\u4e5f\u662f\u4e00\u79cd\u6a21\u5f0f\u5339\u914d\uff0c\u662f\u4e3a\u4e86 \u89e3\u6784 &Some(ref s)\u4e2d s \u7684\u5f15\u7528\uff0c\u907f\u514d\u5176\u4e2d\u7684 s \u88ab\u8f6c\u79fb\u6240\u6709\u6743 \u3002\n    match o {\n        &Some(ref v) => println!("{}", v),\n        _ => (),\n    }\n    // 2018\n    //\u4e0d \u9700\u8981\u518d\u4f7f\u7528\u5f15\u7528\u64cd\u4f5c\u7b26\u548c ref\u6765\u8fdb\u884c\u89e3\u6784\u4e86\u3002\u5728\u65b0\u7684\u7248\u672c\u4e2d \uff0c match \u5339\u914d\u4f1a\u81ea\u52a8\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\n    match o {\n        Some(v) => println!("{}", v),\n        _ => (),\n    }\n\n    \n}\n\n')),(0,l.kt)("h2",{id:"44-main-\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de-result"},"4.4. main \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de Result"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"\n\n// \u5728 Rust 2015\u7248\u672c\u4e2d\uff0c main \u51fd\u6570\u5e76\u4e0d\u80fd\u8fd4\u56de Result<T E>\u3002\u4f46\u662f\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c \u4e8c\u8fdb\u5236 \u53ef\u6267\u884c\u5e93\u4e5f\u9700\u8981\u8fd4\u56de\u9519\u8bef\uff0c \u6bd4\u5982\uff0c \u8bfb\u53d6\u6587\u4ef6\u7684\u65f6\u5019\u53d1\u751f\u4e86\u9519\u8bef\uff0c \u8fd9\u65f6\u9700\u8981\u6b63\u5e38\u9000\u51fa\u7a0b\u5e8f\u3002\u4e8e \u662f\u5728 Rust 2018 \u7248\u672c\u4e2d\uff0c\u5141\u8bb8 main \u51fd\u6570\u8fd4\u56de Result<T, E>\u4e86\n\n")),(0,l.kt)("h2",{id:"45-impl-trait-\u62bd\u8c61\u7c7b\u578b"},"4.5. impl trait \u62bd\u8c61\u7c7b\u578b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"\n\n// \u53ef \u4ee5\u9759\u6001\u5206\u53d1\u7684\u62bd\u8c61\u7c7b\u578b impl Trait\n\n\n\n\n\n")),(0,l.kt)("h1",{id:"5-\u8bed\u6cd5"},"5. \u8bed\u6cd5"),(0,l.kt)("h2",{id:"51-\u6ce8\u91ca"},"5.1. \u6ce8\u91ca"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'//! Hello Demo\n//!   \u5305\u6ce8\u91ca\n//! crate spec...\n\nuse std::io::Read;\nuse std::io;\nuse std::fmt;\nuse std::io::{stdout, BufWriter}; \nuse std::fs::File;\n\n\n///\n///\n/// main \u65b9\u6cd5\u7684\u6ce8\u91ca\n///\n/// ```\n/// \u652f\u6301 md\n/// ```\nfn main() {\n    println!("Hello, world!");\n\n}\n\n\n\n')),(0,l.kt)("h2",{id:"52-\u53d8\u91cf\u8d4b\u503c"},"5.2. \u53d8\u91cf\u8d4b\u503c"),(0,l.kt)("h3",{id:"521-\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684"},"5.2.1. \u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\nfn variables() {\n    let a = 12;\n\n    // \u4e8c\u6b21\u8d4b\u503c\u4e0d\u884c\n    // \u4e5f\u5c31\u662f\u8bf4 a \u662f\u4e0d\u53ef\u53d8\u53d8\u91cf\n    // a = 10;\n\n    // \u4f46\u662f\u80fd\u4e8c\u6b21\u7ed1\u5b9a, \u91cd\u5f71/\u906e\u853d\uff08Shadowing\uff09\n    // \u8fd9\u91cc\u7684 a \u548c\u4e4b\u524d\u7684 a \u6ca1\u5173\u7cfb, \u751a\u81f3\u7c7b\u578b\u90fd\u80fd\u6539\u53d8\n    let a = 11;\n    println!("a = {}", a);\n    let a = "new a";\n    println!("a = {}", a);\n\n    // \u53ef\u53d8\u53d8\u91cf\n    // \u80fd\u591f\u88ab\u4e8c\u6b21\u8d4b\u503c\n    let mut b = 10;\n    b = 33;\n    println!("b = {}", b);\n    // \u8fd9\u662f\u4e0d\u884c\u7684, \u56e0\u4e3a b \u5df2\u7ecf\u88ab\u4f7f\u7528\u8fc7\u4e86\n    // b = "bb";\n\n    // \u624b\u52a8\u6307\u5b9a\u7c7b\u578b, \u65e0\u7b26\u53f7 64 \u4f4d\u6574\u578b\u53d8\u91cf\n    // \u5982\u679c\u6ca1\u6709\u58f0\u660e\u7c7b\u578b\uff0ci \u5c06\u81ea\u52a8\u88ab\u5224\u65ad\u4e3a\u6709\u7b26\u53f7 32 \u4f4d\u6574\u578b\u53d8\u91cf\n    let i: u64 = 12;\n\n    \n\n}\n\n\n')),(0,l.kt)("h3",{id:"522-\u5b57\u9762\u91cf"},"5.2.2. \u5b57\u9762\u91cf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// \u5b57\u9762\u91cf\n    //\n    // \u5e26\u540e\u7f00\u7684\u5b57\u9762\u91cf\uff0c\u5176\u7c7b\u578b\u5728\u521d\u59cb\u5316\u65f6\u5df2\u7ecf\u77e5\u9053\u4e86\u3002\n    let x = 1u8;\n    let y = 2u32;\n    let z = 3f32;\n    let s = "hello";\n')),(0,l.kt)("h2",{id:"53-\u57fa\u672c\u6570\u636e\u7c7b\u578b"},"5.3. \u57fa\u672c\u6570\u636e\u7c7b\u578b"),(0,l.kt)("h3",{id:"531-convert"},"5.3.1. convert"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/41034635/how-do-i-convert-between-string-str-vecu8-and-u8"},"https://stackoverflow.com/questions/41034635/how-do-i-convert-between-string-str-vecu8-and-u8")),(0,l.kt)("h3",{id:"532-\u503c\u7c7b\u578b-and-\u5f15\u7528\u7c7b\u578b"},"5.3.2. \u503c\u7c7b\u578b and \u5f15\u7528\u7c7b\u578b"),(0,l.kt)("p",null,"\u503c\u7c7b\u578b\u662f\u6307\u6570\u636e\u76f4\u63a5\u5b58\u50a8\u5728\u6808\u4e2d\u7684\u6570\u636e\u7c7b\u578b \uff0c\u4e00\u4e9b\u539f\u751f\u7c7b\u578b\uff0c\u6bd4\u5982\u6570\u503c \u3001\u5e03\u5c14\u503c\u3001\u7ed3\u6784\u4f53, \u679a\u4e3e\u7b49\u90fd\u662f\u503c\u7c7b\u578b\u3002\u56e0\u6b64\u5bf9\u503c\u7c7b\u578b\u7684\u64cd\u4f5c\u6548\u7387\u4e00\u822c\u6bd4\u8f83\u9ad8\uff0c\u4f7f\u7528\u5b8c\u7acb\u5373\u4f1a\u88ab\u56de\u6536, \u8fd9\u4e9b\u57fa\u672c\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait, \u8d4b\u503c\u8bed\u53e5\u4e2d\u4f1a\u6267\u884c\u62f7\u8d1d"),(0,l.kt)("p",null,"\u5f15\u7528\u7c7b\u578b\u5c06\u6570\u636e\u5b58\u50a8\u5728\u5806\u4e2d\uff0c\u800c\u6808\u4e2d\u53ea\u5b58\u653e\u6307\u5411\u5806\u4e2d\u6570\u636e\u7684\u5730\u5740, \u5982\u6570\u7ec4, \u5b57\u7b26\u4e32; \u56e0\u6b64\u5bf9\u5f15\u7528\u7c7b\u578b\u7684\u64cd\u4f5c\u6548\u7387\u4e00\u822c\u6bd4\u8f83\u4f4e"),(0,l.kt)("h3",{id:"533-\u5e38\u91cf-\u9759\u6001\u53d8\u91cf"},"5.3.3. \u5e38\u91cf \u9759\u6001\u53d8\u91cf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n// \u5e38\u91cf, \u9759\u6001\u53d8\u91cf: \u5728\u5168\u5c40\u58f0\u660e\u5e38\u91cf or \u53d8\u91cf\n    // \u9700\u8981\u624b\u52a8\u6307\u5b9a\u7c7b\u578b\n    // \u533a\u522b/\u5f02\u540c:\n    // - \u90fd\u662f\u5728\u7f16\u8bd1\u671f\u6c42\u503c\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\u4e8e\u5b58\u50a8\u9700\u8981\u52a8\u6001\u5206\u914d\u5185\u5b58\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 HashMap, vec\n    // \n    // - \u9759\u6001\u53d8\u91cf\u6709\u56fa\u5b9a\u7684\u5185\u5b58\u5730\u5740 (\u5206\u914d\u5728\u9759\u6001\u5b58\u50a8\u533a), \u53ef\u4ee5\u662f\u53ef\u53d8\u7684 (\u7528 mut \u4fee\u9970), \u53ef\u80fd\u6709\u5185\u5b58\u5b89\u5168\u95ee\u9898, \u6240\u4ee5\u4fee\u6539\u9700\u8981\u5728 unsafe \u4e2d; \n    // - \u5e38\u91cf\u6ca1\u6709\u56fa\u5b9a\u7684\u5185\u5b58\u5730\u5740, \u4e0d\u53ef\u53d8 (\u4f1a\u88ab\u5185\u8054, \u5728\u88ab\u7528\u5230\u7684\u5730\u65b9\u4f1a\u88ab\u590d\u5236\u8fc7\u53bb, \u7528\u4e0d\u5230\u5185\u5b58\u5730\u5740)\n\n    // \u666e\u901a\u5e38\u91cf \u4e0d\u80fd\u5f15\u7528 \u9759\u6001\u53d8\u91cf\n\n    // \u4f7f\u7528\u573a\u666f:\n    // \u5728\u5b58\u50a8\u7684\u6570\u636e\u6bd4\u8f83\u5927\u3001\u9700\u8981\u5f15\u7528\u5730\u5740\u6216\u5177\u6709\u53ef\u53d8\u6027\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u9759\u6001\u53d8\u91cf;\u5426\u5219\uff0c\u5e94\u8be5 \u4f18\u5148\u4f7f\u7528\u666e\u901a\u5e38\u91cf\n    const MAX_POINTS: u32 = 100_000;\n    static LANGUAGE: &\'static str = "Rust";//"string" \u5b57\u9762\u91cf\u9ed8\u8ba4\u751f\u547d\u5468\u671f\u5c31\u662f static \u7684\n')),(0,l.kt)("h3",{id:"534-\u6570\u5b57"},"5.3.4. \u6570\u5b57"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"/// \u5bf9\u4e8e \u57fa\u672c\u6570\u636e\u7c7b\u578b, \u6570\u636e\u7684\u514b\u9686, \u79fb\u52a8\u90fd\u662f\u5728\u6808\u4e0a, \u65e0\u9700\u5b58\u50a8\u5230\u5806\u4e2d\nfn basic_types() {\n    // \u6574\u578b\n\n    // \u5360\u636e 8 bit\n    const A: i8 = -2; // \u6709\u7b26\u53f7\n    const B: u8 = 2; // \u65e0\u7b26\u53f7\n                     // const b: u8 = -2; // \u9519\u8bef\n\n    // \u5360\u636e 16 bit\n    // i16 u16\n\n    // \u5360\u636e 32 bit\n    // i32 u32\n\n    // 64 bit\n    // i64 u64\n\n    // 128\n    // i128 u128\n\n    // arch \u7c7b\u578b\n    // isize    usize\n    //\u957f\u5ea6\u53d6\u51b3\u4e8e\u6240\u8fd0\u884c\u7684\u76ee\u6807\u5e73\u53f0\uff0c\u5982\u679c\u662f 32 \u4f4d\u67b6\u6784\u7684\u5904\u7406\u5668\u5c06\u4f7f\u7528 32 \u4f4d\u4f4d\u957f\u5ea6\u6574\u578b\u3002\n\n    const C: i16 = 10_000; // 10\u8fdb\u5236\n    const D: i16 = 0xff; // 16\u8fdb\u5236\n    const E: i16 = 0o77; // 8 \u8fdb\u5236\n    const F: i16 = 0b1111_0000; // \u4e8c\u8fdb\u5236\n    \n\n    // \u6d6e\u70b9\u6570\n    let x = 2.0; // \u9ed8\u8ba4 f64\n    let y: f32 = 3.0; // f32\n\n// \u76f8\u5173\u51fd\u6570\ni32::min_value();-----2147483648\nmax_value()\n// https://cloud.tencent.com/developer/article/1518453\n")),(0,l.kt)("h3",{id:"535-\u5e03\u5c14\u503c-\u5b57\u7b26-\u5b57\u8282"},"5.3.5. \u5e03\u5c14\u503c \u5b57\u7b26 \u5b57\u8282"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"\n\n\n    // \u5e03\u5c14\u503c, \u7c7b\u578b bool\n    let is_a = true;\n\n    // \u5b57\u7b26, \u5355\u5f15\u53f7\n    //4 \u4e2a\u5b57\u8282, \u652f\u6301\u4e2d\u6587\n    const CC: char = 'c';\n    let heart_eyed_cat = '\ud83d\ude3b';\n\n\n    // \u5b57\u8282\u5b57\u9762\u91cf, \u5982 b'*' \u8868\u793a 42u8\n    const G: u8 = b'A'; // \u5b57\u8282, \u53ea\u80fd u8 \u7c7b\u578b\n    const n: u8 = b'\\n';\n\n")),(0,l.kt)("h3",{id:"536-\u6570\u7ec4"},"5.3.6. \u6570\u7ec4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n// \u5bf9\u4e8e\u539f\u59cb\u56fa\u5b9a\u957f\u5ea6\u6570\u7ec4\uff0c\u53ea\u6709\u5b9e\u73b0 Copy trait \u7684\u7c7b\u578b\u624d\u80fd\u4f5c\u4e3a\u5176\u5143\u7d20 \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709 \u53ef\u4ee5\u5728\u6808\u4e0a\u5b58\u653e\u7684\u5143\u7d20\u624d\u53ef\u4ee5\u5b58\u653e\u5728\u8be5\u7c7b\u578b\u7684\u6570\u7ec4\u4e2d (\u53ea\u6709\u786e\u5b9a\u5927\u5c0f\u7c7b\u578b(sized type)\u7684\u5b9e\u4f8b\u624d\u53ef\u4ee5\u653e\u5230\u6808\u4e0a\uff0c\u4e5f\u5c31\u662f\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u503c\u7684\u65b9\u5f0f\u4f20\u9012)\n\n// \u4e0d\u786e\u5b9a\u5927\u5c0f\u7c7b\u578b(unsized tpe)\u7684\u5b9e\u4f8b\u4e0d\u80fd\u653e\u5230\u6808\u4e0a\u800c\u4e14\u5fc5\u987b\u901a\u8fc7\u4f20\u5f15\u7528\u7684\u65b9\u5f0f\u4f20\u9012\n\n    // \u53ef\u4ee5\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\n    let a = [1, 2, 3, 4, 5];\n    // a \u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 5 \u7684\u6574\u578b\u6570\u7ec4\n\n    let b = ["January", "February", "March"];\n    // b \u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 3 \u7684\u5b57\u7b26\u4e32\u6570\u7ec4\n\n\n    // \u660e\u786e\u6307\u5b9a\u7c7b\u578b, \u6570\u7ec4\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7 [T, N] \u660e\u786e\u6307\u5b9a, T \u4e3a\u5143\u7d20\u7c7b\u578b, N \u4e3a \u4e2a\u6570; \u5982 [u8; 4] \u8fd9\u662f\u9759\u6001\u7c7b\u578b (\u56e0\u4e3a\u5df2\u77e5\u5927\u5c0f\u4e86)\n    // [u8] \u53ea\u80fd\u662f\u52a8\u6001\u5927\u5c0f\u7c7b\u578b, for don\'t know the size \n    let c: [i32; 5] = [1, 2, 3, 4, 5];\n    // c \u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 5 \u7684 i32 \u6570\u7ec4\n\n    let d = [3; 5];// \u4f7f\u7528\u9ed8\u8ba4\u7c7b\u578b i32, \u5143\u7d20\u90fd\u4e3a 3, \u4e2a\u6570\u4e3a 5 \u4e2a\n    // \u7b49\u540c\u4e8e let d = [3, 3, 3, 3, 3];\n\n    let d = [3u8; 5];// \u6307\u5b9a\u7c7b\u578b\u4e3a u8\n\n    // \u6570\u7ec4\u8bbf\u95ee\n    let first = a[0];\n    let second = a[1];\n\n    a[0] = 123; // \u9519\u8bef\uff1a\u6570\u7ec4 a \u4e0d\u53ef\u53d8\n    \n    let mut a = [1, 2, 3];\n    a[0] = 4; // \u6b63\u786e\n    \n    // \u6570\u7ec4\u904d\u5386\n    for ele in a.iter() {\n        println!("{}", ele);\n    }\n\n    // \n    // \u8fde\u63a5\u4e24\u4e2a array \u53ef\u4ee5\u4f7f\u7528 join\n\n\n    // match \u8bed\u6cd5\n    // \u901a\u8fc7\u5339\u914d\u6570\u7ec4\u7684\u4e0d\u540c\u5143 \u53ef\u4ee5\u5b9e\u73b0\u6307\u5b9a\u7684\u529f\u80fd \u3002\n    // \u6311\u9009\u51fa\u4ee5 3 \u7ed3\u5c3e\u548c\u7b2c \u4e8c\u4e2a\u5143\u7d20\u4e3a 2 \u7684\u6570\u7ec4\u3002\n    fn pick(arr: [i32; 3])  {// \u8fd9\u4e2a\u6709\u9650\u5236, \u53c2\u6570\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u53ef\u53d8, \u5fc5\u987b\u4e3a 3\n        match arr {\n            [_, _, 3] => println!("ends with 3"),\n            [a, 2, c] => println!("{:?}, 2, {:?}", a,  c),\n        //  match\u5339\u914d\u7684\u6700\u540e\u4e00\u4e2a\u5206\u652f\uff0c\u5fc5\u987b\u4f7f\u7528\u901a\u914d\u7b26\u6216\u5176\u4ed6\u53d8\u91cf\u6765\u7a77\u5c3d\u679a\u4e3e\n            [_, _, _] => println!("pass!"),\n        }\n    }\n    // \u53d8\u957f\u53c2\u6570\n    // \u5229\u7528\u6570\u7ec4\u5207 \u7247\u5c31\u53ef\u4ee5\u6a21\u62df\u53d8\u957f\u53c2\u6570\u7684\u51fd\u6570\n    fn sum(num: &[i32]) { // \u539f\u7d20\u4e2a\u6570\u53ef\u53d8\n        match num {\n            [one] => println!(" at least two"),\n            [first, second] => println!("{:?} + {:?} = {:?} ", first, second, first+second),\n            _ => println!("sum is {:?}", num.iter().fold(0, |sum, i| sum + i) ),\n        }\n    }\n    fn main() {\n        sum(&[1]);\n        sum(&[1, 2]);\n        sum(&[1, 2, 3]);\n        sum(&[1, 2, 3, 5]);\n    }\n\n\n    // \u4e8c\u5206\u67e5\u627e\n    // \u6839\u636e\u5143\u7d20\u67e5\u627e\u7d22\u5f15\n    if let Ok(9) = arr.binary_search(&13) {}\n    // \u7b49\u4ef7\n    arr.binary_search_by(|x| x.cmp(&13))\n    // binary search by_key\n\n\n    let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n    assert_eq!(s.binary_search(&13),  Ok(9));\n    assert_eq!(s.binary_search(&4),   Err(7));\n    let r = s.binary_search(&1);\n    assert!(match r { Ok(1...4) => true, _ => false, });\n    let seek = 13;\n    assert_eq!(\n        s.binary_search_by(|probe| probe.cmp(&seek)),\n       Ok(9)\n   );\n   let s = [(0, 0), (2, 1), (4, 1), (5, 1), (3, 1),\n              (1, 2), (2, 3), (4, 5), (5, 8), (3, 13),\n              (1, 21), (2, 34), (4, 55)];\n   assert_eq!(\n       s.binary_search_by_key(&13, |&(a,b)| b),\n       Ok(9)\n   );\n    \n\n')),(0,l.kt)("h3",{id:"537-range-\u8303\u56f4"},"5.3.7. Range \u8303\u56f4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// /\u5305\u5934\u4e0d\u5305\u5c3e\n(1..5) <=> std::ops::Range {start: 1, end: 5}\n\n(1..=5) <=> std::ops::RangeInclusive::new(1, 5)\n(3..6).sum()\nfor i in 0..4 {\n    \n}\nfor i in 0..=4) {\n    \n}\n")),(0,l.kt)("h3",{id:"538-\u5207\u7247"},"5.3.8. \u5207\u7247"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n///\u5207\u7247\n///\n/// \u5207\u7247\u662f\u5bf9\u539f\u59cb\u6570\u636e\u96c6\u5408\u7684\u90e8\u5206\u5f15\u7528, \u6ca1\u6709\u539f\u59cb \u6570\u636e\u96c6\u5408 \u7684\u6240\u6709\u6743 (\u539f\u59cb\u6570\u636e\u96c6\u5408\u53ef\u80fd\u662f \u6570\u7ec4, Vec);\u65e0\u6cd5\u4fee\u6539\u539f\u59cb\u503c\n///\n/// \u82e5\u539f\u59cb\u503c \u4e3a T, \u5219 \u5207\u7247\u7c7b\u578b\u4e3a  &[T] or &mut[T]\n/// \n/// ..y \u7b49\u4ef7\u4e8e 0..y (\u5305\u5934\u4e0d\u5305\u5c3e\u5df4)\n/// x.. \u7b49\u4ef7\u4e8e\u4f4d\u7f6e x \u5230\u6570\u636e\u7ed3\u675f\n/// .. \u7b49\u4ef7\u4e8e\u4f4d\u7f6e 0 \u5230\u7ed3\u675f\n/// \n/// \n/// \nfn slice_vec() {\n    // \u5b57\u7b26\u4e32\u5207\u7247   \n    let s = String::from("broadcast");\n    let part1 = &s[0..5];// \u622a\u53d6\u5b50\u4e32, \u5b57\u7b26\u4e32\u5207\u7247\u5c31\u662f &str \u7c7b\u578b\n    let part2 = &s[5..9];\n    println!("{}={}+{}", s, part1, part2);\n\n    // \u88ab\u5207\u7247\u5f15\u7528\u7684\u5b57\u7b26\u4e32\u7981\u6b62\u66f4\u6539\u539f\u59cb\u503c\n    let mut s = String::from("xxxxxx");\n    let slice = &s[0..3];\n    s.push_str("yes!"); // \u9519\u8bef\n\n    //\u6570\u7ec4\u5207\u7247\n    let arr = [1, 3, 5, 7, 9];\n    let part = &arr[0..3];\n    for i in part.iter() {\n        println!("{}", i);//1, 3, 5\n    }\n\n    // \u4e24\u4e2a const fn \u65b9\u6cd5: len(), is_empty()\n\n    // \u901a\u8fc7 &mut \u5b9a\u4e49\u53ef\u53d8\u5207\u7247\n    let arr = &mut [1,2,3];\n    arr[1] = 0;\n\n    // \u52a8\u6001\u6570\u7ec4\u8f6c\u5207\u7247\n    let arr = &vec![1,2,3][..];\n    \n}\n')),(0,l.kt)("h3",{id:"539-str-\u5b57\u7b26\u4e32\u5207\u7247"},"5.3.9. str \u5b57\u7b26\u4e32\u5207\u7247"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// str \u662f\u5178\u578b\u7684\u52a8\u6001\u5927\u5c0f\u7c7b\u578b (DST), \u7f16\u8bd1\u671f\u4e0d\u53ef\u77e5\u5927\u5c0f, \u5206\u914d\u5728\u5806\u4e0a\n//\u6240\u4ee5\u7f16\u8bd1\u5668\u8981\u6c42\u5fc5\u987b\u4ee5\u4e0d\u53ef\u53d8\u501f\u7528\u7684\u5f62\u5f0f\u5728\u4ee3\u7801\u4e2d\u5b58\u5728 \u5373 &str, \u8fd9\u4e2a\u501f\u7528\u7684\u5927\u5c0f\u662f\u786e\u5b9a\u7684(\u4e00\u4e2a\u6307\u9488+\u957f\u5ea6), &str \u5b58\u50a8\u5728\u6808\u4e0a, \u5bf9\u5e94\u7684 str \u5b58\u5728 \u5806\u4e0a\n// \n// \u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u662f\u7279\u6b8a\u7684 str, \u7279\u6b8a\u5728\u5176\u5177\u6709\u9759\u6001\u751f\u547d\u5468\u671f, \u5fc5\u987b\u4ee5\u7c7b\u578b  &\'static  str \u63a5\u6536\n//\n//fat pointer(\u80d6\u6307\u9488): \u5305\u542b DST \u7684\u5730\u5740\u4fe1\u606f \u548c \u957f\u5ea6\u7684\u6307\u9488, &str \u5373\u80d6\u6307\u9488\n\nlet ss = "hello world";\nlet ptr = ss.as_ptr();\nlet s = unsafe {\n    let slice = std::slice::from_raw_parts(ptr, ss.len());\n    std::str::from_utf8(slice).unwrap()\n    \n    // or\n    // turns invalid UTF-8 bytes into \ufffd and so no error handling is required.\n    let buf = &[0x41u8, 0x41u8, 0x42u8];\n    let s = String::from_utf8_lossy(buf).to_string();\n\n};\nif ss == s {\n    println!("equal");//equal\n}\n')),(0,l.kt)("h3",{id:"5310-\u539f\u751f\u6307\u9488-raw-pointer"},"5.3.10. \u539f\u751f\u6307\u9488 raw pointer"),(0,l.kt)("p",null,"\u5206\u4e3a \u4e0d\u53ef\u53d8 raw pointer \u548c \u53ef\u53d8 raw pointer"),(0,l.kt)("p",null,"\u6307\u9488\u4e0d\u540c\u4e8e \u5f15\u7528, \u6307\u9488\u7c7b\u578b *T, \u5f15\u7528\u7c7b\u578b &T"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'#![feature(never_type)]\n\nlet mut a = 10;\nlet a_ptr = &mut a as *mut i32;\nlet b = Box::new(20);\nlet b_ptr = &*b as *const i32;\nunsafe { \n    *a_ptr += *b_ptr;\n}\nprintln!("{:?}", a);//30\n')),(0,l.kt)("h3",{id:"5311-never-\u7c7b\u578b-\u611f\u53f9\u53f7"},"5.3.11. never \u7c7b\u578b \u611f\u53f9\u53f7"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u5e95\u7c7b\u578b bottom type\n// BangType\n// \n// Rust \u4e2d\u6709\u5f88\u591a\u79cd\u60c5\u51b5\u786e \u5b9e\u6ca1\u6709\u503c\uff0c\u4f46\u4e3a\u4e86\u7c7b\u578b\u5b89\u5168\uff0c\u5fc5\u987b\u628a\u8fd9\u4e9b\u60c5\u51b5\u7eb3\u5165\u7c7b\u578b\u7cfb\u7edf\u8fdb\u884c\u7edf\u4e00 \u5904\u7406\n// \n// \u53d1\u6563\u51fd\u6570 (Diverging Function ): \u6c38\u8fdc\u4e0d\u4f1a\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570, \u5982 panic! \u6216\u8005 std::process: :exit ...\n// continue \u548c break \u5173\u952e\u5b57\n//loop\u5faa\u73af\n// \u7a7a\u679a\u4e3e\uff0c\u6bd4\u5982 enumVoid{}\n\n# ! [feature (never_type)]// \u9700\u8981\u652f\u6301\nfn foo() -> i32 {\n    // !\u8868\u793a\u6c38\u8fdc\u4e0d\u4f1a\u6709\u8fd4\u56de\u503c\u7684\u7c7b\u578b\n    let x: ! = {\n        return 11;// \u76f4\u63a5foo\u51fd\u6570\u8fd4\u56de\u9000\u51fa\u4e86, \u6240\u4ee5 x \u6c38\u8fdc\u4e0d\u4f1a\u6709\u8fd4\u56de\u503c, \u662f ! \u7c7b\u578b\n    };\n\n    // panic \u5b8f\u5728 match \u5206\u652f\u4e2d\u4f7f\u7528\u65f6, \u5373\u4f7f\u6ca1\u6709\u8fd4\u56de\u548c\u5176\u4ed6\u5206\u652f\u76f8\u540c\u7684\u7c7b\u578b, \u4e5f\u6ca1\u62a5\u9519, \u4e3a\u4ec0\u4e48?\n    // \u56e0\u4e3a\u8fd4\u56de \u4e86 ! \u7c7b\u578b, (never \u7c7b\u578b\u53ef\u4ee5\u8f6c\u4e3a\u4efb\u4f55\u7c7b\u578b)\n\n    // \u7a7a\u679a\u4e3e\u7684\u7528\u6cd5\u573a\u666f:\n    enum Void {}\n    let res: Result<i32, Void> = Ok(11);\n    let Ok(num) = res;//\u5f53\u7136\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u7528 if let \u8bed\u53e5\u5904\u7406\n}\n")),(0,l.kt)("h2",{id:"54-\u5b57\u7b26\u4e32"},"5.4. \u5b57\u7b26\u4e32"),(0,l.kt)("h3",{id:"541-\u51e0\u79cd\u5b57\u7b26\u4e32\u533a\u522b"},"5.4.1. \u51e0\u79cd\u5b57\u7b26\u4e32\u533a\u522b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"\n/// \u5b57\u7b26\u4e32\n///\n/// - str \u8868\u793a\u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32, \u5c5e \u4e8e\u52a8\u6001\u5927 \u5c0f \u7c7b\u578b (DST)\uff0c\u4fdd\u8bc1 \u6709\u6548 UTF-8 , \u5728\u7f16\u8bd1\u671f\u5e76\u4e0d\u80fd\u786e\u5b9a\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u6700\u5e38\u89c1\u5230\u7684\u662f str \u7684\u5207\u7247 (Slice)\u7c7b\u578b &str\u3002  \n//      &str \u8868\u793a\u5b57\u7b26\u4e32\u5b57\u9762\u91cf, \u662f\u5f15\u7528\u7c7b\u578b; \u5b57\u7b26\u4e32\u5207\u7247\u5c31\u662f &str, \u548c\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u5b58\u50a8\u5728\u4e00\u8d77(\u5728\u7f16\u8bd1\u671f\u95f4\u5730\u5740\u5c31\u77e5\u9053\u4e86), \u6267\u884c\u7684\u662f\u590d\u5236\u8bed\u4e49\n///\n/// - String \u7c7b\u578b, \u957f\u5ea6\u53ef\u53d8, \u53ef\u4fee\u6539, \u5b58\u50a8\u4e3a\u7531\u5b57\u8282\u7ec4\u6210\u7684 vector\uff08Vec<u8>\uff09\uff0c\u4f46\u4fdd\u8bc1\u4e86\u5b83\u4e00\u5b9a\u662f\u4e00\u4e2a\u6709\u6548\u7684 UTF-8 \u5e8f\u5217, \u5b57\u7b26\u5e8f\u5217\u5206\u914d\u5728\u5806, \u6267\u884c\u7684\u662f\u79fb\u52a8\u8bed\u4e49\n///\n///     String \u6709\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u4f4d\u7f6e\u5c5e\u6027 ptr, \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u5c5e\u6027 len, \u548c\u5806\u5206\u914d\u7684\u5bb9\u91cf capacity, \u8fd9\u4e9b\u5c5e\u6027\u4f4d\u4e8e \u6808, \u5b9e\u9645\u5b57\u7b26\u5e8f\u5217\u5b58\u5728 \u5806\n///     str    \u6709  ptr \u548c len, \u5c5e\u6027, \u5185\u5bb9\u90fd\u5728 \u6808\n// \n// - CStr\uff0c \u8868\u793a\u7531C\u5206\u914d\u800c\u88abRust\u501f\u7528\u7684\u5b57\u7b26\u4e32\uff0c \u4e00\u822c\u7528\u4e8e\u548cC\u8bed\u8a00\u4ea4\u4e92\u3002\n// - CString\uff0c \u8868\u793a\u7531 Rust \u5206\u914d\u4e14\u53ef\u4ee5\u4f20\u9012\u7ed9 C \u51fd\u6570\u4f7f\u7528\u7684 C \u5b57\u7b26\u4e32 \uff0c\u540c\u6837\u7528 \u4e8e\u548c C \u8bed\u8a00\u4ea4\u4e92\u3002\n// \n// - OsStr\uff0c \u8868\u793a\u548c\u64cd\u4f5c\u7cfb\u7edf\u76f8\u5173\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u662f\u4e3a\u4e86\u517c\u5bb9 Windows\u7cfb\u7edf\u3002\n// - OsString\uff0c\u8868\u793a OsStr \u7684\u53ef\u53d8\u7248\u672c \u3002\u4e0e Rust \u5b57\u7b26\u4e32\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\n// - Path\uff0c\u8868\u793a\u8def\u5f84\uff0c\u5b9a\u4e49\u4e8e std::path\u6a21\u5757\u4e2d\u3002 Path\u5305\u88c5\u4e86 OsS\n// - PathBuf. ft~ Path \u914d\u5bf9\uff0c \u662f Path \u7684\u53ef\u53d8\u7248\u672c \u3002 PathBuf\u5305\u88c5\u4e86 OsString\u3002\n///\n")),(0,l.kt)("h3",{id:"542-\u5e38\u7528\u65b9\u6cd5"},"5.4.2. \u5e38\u7528\u65b9\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'fn str_string() {\n\n    \n// \u5b57\u7b26\u4e32\u8f6c\u4e49\n    // \u957f\u5b57\u7b26\u4e32\n    let long_string = "String literals\n                        can span multiple lines.\n                        The linebreak and \\\' indentation here \n                        can be escaped too!";\n    println!("{}", long_string);\n\n    b\' \'  \u8868\u793a \u7a7a\u683c\u5b57\u7b26\n\n    \n    let str_value: &\'static str = "1234";// \u5b57\u7b26\u4e32\u5207\u7247\n    //\u7b80\u5355\u5199\u6cd5\u4e3a\n    let str_value = "1234";\n\n    let s = string::new() // \u6b64\u65f6\u8fd8\u5e76\u672a\u5728\u5806\u4e0a\u5206\u914d\u7a7a\u95f4\n    let str1 = String::from("hello");\n    // \u6307\u5b9a\u5806\u5bb9\u91cf\n    let s =  String : :with_capacity (20)\n    // \u518d\u6b21\u5206\u914d\u5bb9\u91cf\n    s.reserve(lO)\n    \n    let one = 1.to_string();         // \u6574\u6570\u5230\u5b57\u7b26\u4e32\n    let float = 1.3.to_string();     // \u6d6e\u70b9\u6570\u5230\u5b57\u7b26\u4e32\n    let slice = "slice".to_string(); // \u5b57\u7b26\u4e32\u5207\u7247\u5230\u5b57\u7b26\u4e32\n    \n    \n\n    // \u65b0\u589e \u6dfb\u52a0\n    //\u5b9a\u4e49\u4e00\u4e2a\u53ef\u53d8\u5b57\u7b26\u4e32\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\n    let mut string_value: String = "1111".to_string();\n    // \u6216\u8005\n    // let string_value = String::from("222");\n    string_value.push_str("333");// \u6dfb\u52a0\u5b57\u7b26\u4e32\u5207\u7247\n    string_value.push(\'!\'); // \u6dfb\u52a0\u5b57\u7b26\n\n    // \u63d2\u5165\n    s.insert(0, \'f\u2019)\n    s. insert_str(O,\u201dbar\u201d)\n\n    // \u8fde\u63a5\n    // String \u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u4e5f\u5b9e\u73b0\u4e86 Add<&str> \u548c AddAssign<&str>\u4e24\u4e2a trait\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u4f7f\u7528\u201c+\u201d\u548c\u201c+=\u201d\u64cd\u4f5c\u7b26\u6765\u8fde\u63a5\u5b57\u7b26\u4e32\n    // \u64cd\u4f5c\u7b26 \u53f3\u8fb9\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u4e3a\u5207\u7247\u7c7b\u578b (&str)\n\n\n\n    // \u66ff\u6362\n    //\n    string.replace("old_str", "new str");\n\n    \n    // \u5220\u9664\n    s .remove (3) //\u6307\u5b9a\u4f4d\u7f6e\n    s.pop()//\u6700\u540e\u4e00\u4e2a\u5b57\u7b26, \u5e76\u4e14\u8fd4\u56de\n    s. truncate (3)//\u6307\u5b9a\u4f4d\u7f6e\u5230\u672b\u5c3e\u5220\u9664\n    s .clear( );//\u6e05\u7a7a\n    s .drain (..beta_offset) .collect()// \u622a\u53d6\u6e90\u7684\u6307\u5b9a\u8303\u56f4\u5e76\u8fd4\u56de, \u6e90\u4f1a\u6539\u53d8, \u53ea\u7559\u4e0b\u5269\u4e0b\u7684\u90e8\u5206\n    s.drain(..)// \u7b49\u4ef7 clear, \u622a\u53d6\u6e90\u7684\u5168\u90e8, \u6e90\u53d8\u7a7a\n\n\n\n    // trim \u9996\u5c3e\u53bb\u9664\n    //\n    let chars_to_trim: &[char] = &[\' \', \',\'];\n    // \u53bb\u9664 string \u9996\u5c3e\u7684\u5b57\u7b26, \u8fd9\u4e9b\u5b57\u7b26\u5728 chars_to_trim \u4e2d\u6307\u5b9a\n    let trimmed_str: &str = string.trim_matches(chars_to_trim);\n\n\n\n    // \u67e5\u627e\n    // \u6807\u51c6\u5e93\u4e2d\u5e76\u6ca1\u6709\u63d0\u4f9b\u6b63\u5219\u8868\u8fbe\u5f0f\u652f\u6301\uff0c\u8fd9\u662f\u56e0\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u7b97\u662f\u5916\u90e8DSL\uff0c \u5982\u679c \u76f4\u63a5\u5c06\u5176\u5f15\u5165\u6807\u51c6\u5e93\u4e2d\uff0c\u5219\u4f1a\u7834\u574f Rust\u7684\u4e00\u81f4\u6027\n    // \u7b2c\u4e09\u65b9\u5305 regex\n    // Rust \u4e2d\u8fd9\u91cc\u4f7f\u7528 \u7684\u5b57\u7b26\u5339\u914d\u7b97 \u6cd5\u5e76\u975e KMP\uff0c\u800c\u662f\u5b83\u7684\u53d8\u79cd\u53cc\u5411( Two-Way)\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5 \uff0c\u8be5\u7b97\u6cd5\u7684\u4f18\u52bf\u5728\u4e8e\u62e5\u6709\u5e38\u91cf\u7ea7\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u5b83\u548c KMP \u7684\u5171\u540c\u70b9\u5728\u4e8e\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(n)\n    // \n    // \u5b58\u5728\u6027\u5224\u65ad\u3002 \u76f8\u5173\u65b9\u6cd5\u5305\u62eccontains (\u652f\u6301 \u5b57\u7b26/\u5b57\u7b26\u4e32/\u8c13\u8bcd)\u3001 starts_with (\u652f\u6301\u5b57\u7b26/\u5b57\u7b26\u4e32)\u3001 ends_with\n    // \u4f4d\u7f6e\u5339\u914d \u3002\u76f8\u5173\u65b9\u6cd5\u5305\u62ec find\u3001 rfind (\u4ece\u53f3\u8fb9\u5f00\u59cb\u641c\u7d22, \u652f\u6301\u8c13\u8bcd)\u3002\n    // \u5206\u5272\u5b57\u7b26\u4e32 \u3002\u76f8\u5173\u65b9\u6cd5\u5305\u62ec split\u3001rsplit\u3001split_terminator(\u53bb\u6389\u6570\u7ec4last\u5143\u7d20\u7684\u591a\u4f59)\u3001rsplit_terminator\u3001splitn (\u6307\u5b9a\u5206\u5272\u540e\u7684\u6570\u7ec4\u957f\u5ea6)\u3001rsplitn\u3002 \n    // \u6355\u83b7\u5339\u914d, \u8fd4\u56de\u6570\u7ec4\u3002 \u76f8\u5173\u65b9\u6cd5\u5305\u62ec matchs\u3001 rmatches\u3001 match_indices (\u8fd4\u56de\u7684\u662f\u5143\u7ec4\u6570\u7ec4, \u5305\u542b\u4e86\u7d22\u5f15)\u3001 rmatch_indices\u3002 \n    // \u5220\u9664\u5339\u914d\u3002 \u76f8\u5173\u65b9\u6cd5\u5305\u62ec trim(\u5220\u9664\u4e24\u5934\u7a7a\u683c, \u4e0d\u80fd\u6307\u5b9a pattern \u53c2\u6570), trim_left, trim_right , trim_matches(\u53ef\u6307\u5b9a pattern \u53c2\u6570)\u3001trim_left_matches\u3001trim_right_matches\u3002 \n    // \u66ff\u4ee3\u5339\u914d\u3002 \u76f8\u5173\u65b9\u6cd5\u5305\u62ec replace\u3001 replacen(\u6307\u5b9a\u66ff\u6362\u5b57\u7b26\u7684\u4e2a\u6570)\n    \n\n\n\n\n\n    // \u7edf\u8ba1\u957f\u5ea6\n    // \u5b57\u7b26 \u5b57\u8282\n    //\n    let s = "hello";\n    //\u5b57\u8282\n    let len = s.len();// 5, \u5b57\u8282\u6570, \u6bcf\u4e2a\u82f1\u6587\u5b57\u7b26\u5360\u4f4d1\u5b57\u8282\n    let s = "\u4f60\u597d";\n    let len = s.len();//6, \u56e0\u4e3a\u4e2d\u6587\u662f UTF-8 \u7f16\u7801\u7684\uff0c\u6bcf\u4e2a\u5b57\u7b26\u957f 3 \u5b57\u8282\n    let s = "hello\u4f60\u597d";\n    let len = s.bytes().count();//\u63d0\u4f9b\u4e86 bytes \u548c chars \u4e24\u4e2a\u65b9\u6cd5\u6765\u5206\u522b\u8fd4\u56de\u6309\u5b57\u8282 \u548c\u6309\u5b57\u7b26\u8fed\u4ee3\u7684\u6cd5\u4ee3\u5668\n    //\u5b57\u7b26\n    let len = s.chars().count();// 7, \u7edf\u8ba1\u5b57\u7b26\u6570 (\u7edf\u8ba1\u5b57\u7b26\u7684\u901f\u5ea6\u6bd4\u7edf\u8ba1\u6570\u636e\u957f\u5ea6\u7684\u901f\u5ea6\u6162\u5f97\u591a)\n    //\u904d\u5386\u5b57\u7b26\n    for c in s.chars() {\n        print!("{} ", c);\n    }\n    // or\n    let s: String = s.chars() .enumerate() .map(| (i, c) | {}).collect()\n\n    // \u6309\u7d22\u5f15\u8bbf\u95ee\u5b57\u7b26\n    let mut result = s.into_bytes();//\u901a\u8fc7 into_bytes\u65b9\u6cd5\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a Vec<u8>\u5e8f\u5217\n        (0..bs.len()).for_each(|i| println!("index = {:?}, value = {:?}", i, char::from(bs[i])));\n    let new_s = String: :from_utf8(result).unwrap()\n    \n\n    // \u83b7\u53d6\u5355\u4e2a\u5b57\u7b26\n    let s = String::from("EN\u4e2d\u6587");\n    let a = s.chars().nth(2); //nth \u51fd\u6570\u662f\u4ece\u8fed\u4ee3\u5668\u4e2d\u53d6\u51fa\u67d0\u503c\u7684\u65b9\u6cd5\uff0c\u4e0d\u8981\u5728\u904d\u5386\u4e2d\u8fd9\u6837\u4f7f\u7528\uff01\u56e0\u4e3a UTF-8 \u6bcf\u4e2a\u5b57\u7b26\u7684\u957f\u5ea6\u4e0d\u4e00\u5b9a\u76f8\u7b49\n    println!("{:?}", a);//Some(\'\u4e2d\')\n\n    \n    // \u6307\u5b9a\u7d22\u5f15\u8303\u56f4\u6765\u83b7\u53d6\u5b57\u7b26\u4e32\u5207\u7247\n    let v =  String::from("hello");\n    let s: Some<&str> = v.get(0..1);\n    v.get_mut((xxx))\n    assert ! (!v .is_char boundary(4)) ;//\u9a8c\u8bc1\u67d0\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u662f\u5426\u4e3a\u5408\u6cd5\u7684\u8fb9\u754c, \u56e0\u4e3a\u53ef\u80fd\u67d0\u4e2a\u5b57\u7b26\u5360\u636e\u4e86\u591a\u4e2a\u7d22\u5f15\u4f4d\u7f6e(string\u7684\u65b9\u6cd5\u9ed8\u8ba4\u90fd\u662f\u6309\u7167\u5b57\u8282\u6765\u5904\u7406\u7684, \u4e5f\u5c31\u662f\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u5bf9\u5e94\u4e00\u4e2a\u5b57\u8282, \u67d0\u4e9b\u5b57\u7b26\u82f1\u6587\u5b57\u7b26\u5916\u7684\u5b57\u7b26\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u5b57\u8282)\n\n\n\n\n\n\n\n\n\n    // \u5206\u5272\n    let bool_s = s.is_char_boundary(12)\n    s.split_at(12)// \u9700\u8981\u5148\u68c0\u67e5\u7d22\u5f15\u662f\u5426\u662f\u5408\u6cd5\u5b57\u7b26\u8fb9\u754c\n\n\n    // \u7a7a\u683c\u5206\u5272, \u9006\u5e8f\n    let pangram: &\'static str = "the quick brown fox jumps over the lazy dog";\n    for word in pangram.split_whitespace().rev() {\n        println!("> {}", word);\n    }\n\n    \n    // \u5b57\u7b26\u4e32\u5206\u5272\u6210\u5b57\u7b26\uff0c\u6392\u5e8f\u5e76\u79fb\u9664\u91cd\u590d\u503c\n    let mut chars: Vec<char> = pangram.chars().collect();\n    chars.sort();\n    chars.dedup(); //\u53bb\u91cd\n\n\n    \n\n\n\n    // \u83b7\u53d6\u5b57\u8282 \u904d\u5386\u5b57\u8282\n    // as_bytes()\n    //\n    fn first_word(s: &String) -> usize {\n        // \u5b57\u8282\u6570\u7ec4, \u4e00\u4e2a\u82f1\u6587\u5b57\u7b26\u5360\u4e00\u4e2a\u5b57\u8282\n        let bytes = s.as_bytes();\n        for (i, &item) in bytes.iter().enumerate() {\n            if item == b\' \' {// \u5982\u679c\u662f\u7a7a\u683c\n                return i;\n            }\n        }\n        s.len()\n    }\n    first_word(&"hello world".to_owned());// 5\n\n')),(0,l.kt)("h3",{id:"543-\u5b57\u7b26\u4e32\u8f6c\u6362"},"5.4.3. \u5b57\u7b26\u4e32\u8f6c\u6362"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},' //\n    //\n    // \u590d\u6742\u7c7b\u578b\u7684\u7c7b\u578b\u8f6c\u6362 \u76f8\u4e92\u8f6c\u6362 \u4e92\u8f6c\n    //\n    // String => &str\n    let s1 = String::from("hello");\n    // \u65b9\u6cd51\n    let s2 = &s1[..]; \n    let ssss = &s1[..2];// \u622a\u53d6\u5b50\u4e32\n    // \u65b9\u6cd52\n    let sss: &str = &s1.as_str();\n    //\n    // \u65b9\u6cd53\n    // *s1 \u662f str \u7c7b\u578b, &*s1 \u5373\u4e3a &str \u7c7b\u578b\n    let new_str = &*s1;\n    //\n    //\n    // &str -> String\n    let new_string = new_str.to_string();//to_string\u5e95\u5c42\u8c03\u7528\u7684String::from\n    let new_string1 = s2.to_string();\n    println!("new_string = {}, new_string1 = {}", new_string, new_string1);\n    // &str -> String\n    let string = "hello".to_owned(); //\u6700\u5e38\u7528, \u5427 "hello"\u4ece\u6808\u8f6c\u79fb\u5230\u5806, to_owned \u65b9\u6cd5\u5229\u7528 &str \u5207\u7247\u5b57\u8282\u5e8f\u5217\u751f\u6210\u65b0\u7684 String\u5b57\u7b26\u4e32 \uff0c to_string\u65b9\u6cd5\u662f\u5bf9 String::from \u7684\u5305\u88c5, \u4e24\u8005\u6027\u80fd\u76f8\u5f53\n\n    // &str -> String\n    let _s: String = "hello".into();\n\n\n\n    // string -> T\n    // std::str\u6a21\u5757\u4e2d\u63d0\u4f9b\u7684 parse\u6cdb\u578b\u65b9\u6cd5\u6765\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b\n    // \u5e95\u5c42\u662f FromStr::from_str\n\n    //T -> string\n    // format!()\n    let s = format!("{}", xxx); \n\n    // \u548c\u6570\u5b57\u4e92\u76f8\u8f6c\u6362\n    let int_value = 5;\n    let string_value = int_value.to_string();//int to String\n    let back_int = string_value.parse::<i32>().unwrap();//String to int\n')),(0,l.kt)("h3",{id:"544-\u683c\u5f0f\u5316"},"5.4.4. \u683c\u5f0f\u5316"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n    // \u62fc\u63a5\n    // \u65b0\u52a0\u7684\u5b57\u7b26\u4e32\u5fc5\u987b\u662f  &str\n    //\n    let str1 = String::from("hello");\n    let str2 = String::from("world");\n    let str3 = str1 + "-" + &str2;\n    \n    // or\n    let s = format!("{} - {}", str3, str2);\n\n\n\n    //\n    // \u683c\u5f0f\u5316\u8f93\u51fa\n    // \u7531\u4e00\u4e9b\u5b8f(macro)\u8d1f\u8d23\u8f93\u51fa\uff0c\u8fd9\u4e9b\u5b8f\u5b9a\u4e49\u5728std::fmt\u4e2d\n    //\n    // \u539f\u7406\u662f: \u5fc5\u987b\u5b9e\u73b0 std::fmt::Display \u8fd9\u4e2atrait\u63d0\u4f9b\u7684 fmt \u65b9\u6cd5\n    //\n    // format!()\uff1a\u5411\u5b57\u7b26\u4e32\u4e2d\u8f93\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\n    // print()!\uff1a\u5411\u6807\u51c6\u8f93\u51fa\u6253\u5370\u5b57\u7b26\u4e32\u3002\n    // println()!\uff1a\u5411\u6807\u51c6\u8f93\u51fa\u6253\u5370\u5b57\u7b26\u4e32\uff0c\u540c\u65f6\u4f1a\u6253\u5370\u4e00\u4e2a\u6362\u884c\u7b26\u3002\n    // eprint()!\uff1a\u5411\u6807\u51c6\u9519\u8bef\u6253\u5370\u5b57\u7b26\u4e32\u3002\n    // eprintln()!\uff1a\u5411\u6807\u51c6\u9519\u8bef\u6253\u5370\u5b57\u7b26\u4e32\uff0c\u540c\u65f6\u4e5f\u4f1a\u6253\u5370\u4e00\u4e2a\u6362\u884c\u7b26\n\n\n    // \u5360\u4f4d\u7b26 \n    // {} -> Display\n    // {:?} -> Debug\n    // {:#?} -> \u683c\u5f0f\u5316\u7684 Debug\n    // {:o} -> \u516b\u8fdb\u5236\n    // {:x} -> \u5341\u516d\u8fdb\u5236\u5c0f\u5199\n    // {:X}   \u5341\u516d\u8fdb\u5236\u5927\u5199\n    // {:p}   \u6307\u9488\u5730\u5740\n    // {:b}   \u4e8c\u8fdb\u5236\n    // {:e}   \u6570\u5b57\u683c\u5f0f, \u6307\u6570\u5c0f\u5199\n    // {:E}   \u6307\u6570\u5927\u5199\n\n\n\n\n    println!("hello {}", "world");\n    println!("{0} {1}", "hello", "world");\n    println!("{h} {w}", h = "hello", w = "world");\n    // \u4ee5\u4e8c\u8fdb\u5236\u7684\u683c\u5f0f\u6253\u5370\u6570\u5b57\n    println!(\n        "{} of {:b} people know binary, the other half doesn\'t",\n        1, 2\n    );\n    // \u53f3\u5bf9\u9f50\u5bbd\u5ea6\u4e3a6\n    println!("{number:>width$}", number = 1, width = 6);// \'.....1\'\n    // \u4f7f\u7528\u5b57\u7b260\u586b\u5145\u5bf9\u9f50\u7684\u5b57\u7b26\u4e32\n    println!("{number:>0width$}", number = 1, width = 6);// \'000001\'\n\n    let s = format!("hello {}", "world");\n    println!("{}", s);\n    // \u5341\u516d\u8fdb\u5236\u8f93\u51fa\n    format!("0x{:X}", 100); //-> "0xDEADBEEF"\n                            // \u516b\u8fdb\u5236\u8f93\u51fa\n    format!("0o{:o}", 100); //-> "0o33653337357"\n\n\n')),(0,l.kt)("h3",{id:"545-\u8c03\u8bd5\u6253\u5370\u590d\u5408\u7c7b\u578b-debug-display"},"5.4.5. \u8c03\u8bd5\u6253\u5370\u590d\u5408\u7c7b\u578b Debug Display"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'    //\u8c03\u8bd5\n    //\n    // fmt::Debug \u7c7b\u4f3c Display \u8fd9\u4e2a trait, \u4f46\u662f\u80fd\u591f\u7531 rust \u81ea\u52a8\u63a8\u5bfc\u5b9e\u73b0, \u65e0\u9700\u624b\u52a8\u5b9e\u73b0\n    // \n    // fmt::Debug\u662fRust\u6807\u51c6\u5e93\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u7684\u65b9\u5f0f\uff0c\u83b7\u5f97fmt::Debug\u7684\u80fd\u529b, \n    //\u5373\u5b9a\u4e49 struct \u65f6 \u6dfb\u52a0 #[derive(Debug)]\n    //\u5176\u4ed6\u7684\u8fd8\u6709 #[allow(dead_code)] \u7528\u4e8e\u5c4f\u853d\u5bf9\u672a\u4f7f\u7528\u4ee3\u7801\u7684\u8b66\u544a\n    #[derive(Debug)] \n    struct DebugDemo(i32);\n    let debug_demo = DebugDemo(11);\n    println!("Debug - {:?}", debug_demo);\n    println!("{0:?}", debug_demo);// \u7b49\u6548\n\n    //\n    // fmt::Display \u81ea\u5b9a\u4e49\u6253\u5370\n    //\u662f\u4e00\u4e2a\u7528\u4e8e\u81ea\u5b9a\u4e49\u683c\u5f0f\u5316\u8f93\u51fa\u7684\u63a5\u53e3\n    //\n    // \u5bf9\u4e8e\u6cdb\u578b\u5bb9\u5668, \u5982 Vec<T>, \u9700\u8981\u81ea\u5df1\u5b9e\u73b0fmt::Display, \u6216\u8005\u76f4\u63a5 \u7528fmt::Debug\n    //\n    struct DisplayDemo(i32);\n    impl fmt::Display for DisplayDemo {\n        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n\n            write!(f, "({})", self.0)\n        }\n    }\n    let display_demo = DisplayDemo(11);\n    println!("display - {}", display_demo);\n\n\n')),(0,l.kt)("h3",{id:"546-\u95ee\u53f7\u64cd\u4f5c\u7b26-\u591a\u6b21\u5199"},"5.4.6. \u95ee\u53f7\u64cd\u4f5c\u7b26 \u591a\u6b21\u5199"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n    // "?" \u95ee\u53f7\u64cd\u4f5c\u7b26: \u5c1d\u8bd5\u89e3\u5305, \u8fd4\u56de\u503c\u4e3a \u89e3\u5305\u540e\u7684\u503c, \u6709\u5f02\u5e38, \u8fd4\u56de\u5f02\u5e38, \u6ca1\u6709\u5219\u7ee7\u7eed\u540e\u7eed\u4ee3\u7801\n    //\n    //\u8003\u8651\u8fd9\u79cd\u573a\u666f: \u5bf9\u4e00\u4e2a\u7ed3\u6784\u4f53\u60f3\u5b9e\u73b0 fmt::Display\uff0c\u4f46\u662f\u5176\u4e2d\u7684\u5143\u7d20\u9700\u8981\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u5199\u51fa\u53bb\uff0c\n    //\u95ee\u9898\u5728\u4e8e\u6bcf\u4e2a write! \u90fd\u8981\u751f\u6210\u4e00\u4e2a fmt::Result\u3002\n    //\n    //\u89e3\u51b3: write!(f, "{}", value)?;  \u591a\u6b21\u5199\n    // \u5bf9 `write!` \u8fdb\u884c\u5c1d\u8bd5\uff08try\uff09\uff0c\u89c2\u5bdf\u662f\u5426\u51fa\u9519\u3002\u82e5\u53d1\u751f\u9519\u8bef\uff0c\u8fd4\u56de\u76f8\u5e94\u7684\u9519\u8bef\u3002\n    // \u5426\u5219\uff08\u6ca1\u6709\u51fa\u9519\uff09\u7ee7\u7eed\u6267\u884c\u540e\u9762\u7684\u8bed\u53e5\u3002 \u540c try!(xxx)\n    //\n    //\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        // \u4f7f\u7528\u5143\u7ec4\u7684\u4e0b\u6807\u83b7\u53d6\u503c\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a `vec` \u7684\u5f15\u7528\u3002\n        let vec = &self.0;\n\n        write!(f, "[")?;//\u591a\u6b21\u5199\n\n         // \u904d\u5386\u4e0b\u6807\n        for (count, v) in vec.iter().enumerate() {\n            // \u5bf9\u6bcf\u4e2a\u5143\u7d20\uff08\u7b2c\u4e00\u4e2a\u5143\u7d20\u9664\u5916\uff09\u52a0\u4e0a\u9017\u53f7\u3002\n            // \u4f7f\u7528 `?` \u6216 `try!` \u6765\u8fd4\u56de\u9519\u8bef\u3002\n            if count != 0 { write!(f, ", ")?; }\n            write!(f, "{}", v)?;\n        }\n\n        // \u52a0\u4e0a\u914d\u5bf9\u4e2d\u62ec\u53f7\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a fmt::Result \u503c\u3002\n        write!(f, "]")\n    }\n\n}\n\n')),(0,l.kt)("h2",{id:"55-\u96c6\u5408"},"5.5. \u96c6\u5408"),(0,l.kt)("p",null,"std::collections \u4e0b\u6709\u56db\u79cd\u96c6\u5408"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u7ebf\u6027\u5e8f\u5217: Vec(\u5411\u91cf), VecDeque (\u53cc\u7aef\u961f\u5217), LinkedList (\u94fe\u8868)"),(0,l.kt)("li",{parentName:"ul"},"\u6620\u5c04\u8868: hashmap(\u65e0\u5e8f\u54c8\u5e0c\u8868), BTreeMap(\u6709\u5e8f\u54c8\u5e0c\u8868)"),(0,l.kt)("li",{parentName:"ul"},"\u96c6\u5408: hashset(\u65e0\u5e8f\u96c6\u5408), btreeset(\u6709\u5e8f\u96c6\u5408)"),(0,l.kt)("li",{parentName:"ul"},"\u4f18\u5148\u961f\u5217: binaryHeap (\u4e8c\u53c9\u5806)")),(0,l.kt)("h3",{id:"551-vec-\u52a8\u6001\u6570\u7ec4"},"5.5.1. Vec \u52a8\u6001\u6570\u7ec4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n/// \u5411\u91cf Vec\n/// \u52a8\u6001\u6570\u7ec4, \u7c7b\u4f3c java\u4e2d\u7684 ArrayList\n/// \n///Vector\u6570\u7ec4\u5929\u751f\u5c31\u53ef\u4ee5\u4f5c \u4e3a\u5148\u8fdb\u540e\u51fa(FILO)\u7684\u6808\u7ed3\u6784\u4f7f\u7528\n/// \n//\n    println!("Vector -------------------------------");\n    //\u4e00\u4e2a vector \u4f7f\u7528 3 \u4e2a\u8bcd\u6765\u8868\u793a\uff1a\u4e00\u4e2a\u6307\u5411\u6570\u636e\u7684\u6307\u9488\uff0cvector \u7684\u957f\u5ea6\uff0c\u8fd8\u6709\u5b83\u7684\u5bb9\u91cf\u3002\u6b64\u5bb9\u91cf\u6307\u660e\u4e86\u8981\u4e3a\u8fd9\u4e2a vector \u4fdd\u7559\u591a\u5c11\u5185\u5b58\u3002\n    //vector \u7684\u957f\u5ea6 \u53ea\u8981\u5c0f\u4e8e\u8be5\u5bb9\u91cf\uff0c\u5c31\u53ef\u4ee5\u968f\u610f\u589e\u957f\uff1b\u5f53\u9700\u8981\u8d85\u8fc7\u8fd9\u4e2a\u9608\u503c\u65f6\uff0c\u4f1a\u7ed9 vector \u91cd\u65b0\u5206\u914d\u4e00\u6bb5 \u66f4\u5927\u7684\u5bb9\u91cf\u3002\n    // \n    // \u6269\u5bb9: \u81ea\u52a8\u6309\u7167 2 \u500d\u6269\u5bb9\n    //\n    let vec: Vec<i32> = Vec::new(); // \u521b\u5efa\u7c7b\u578b\u4e3a i32 \u7684\u7a7a\u5411\u91cf\n    // \u9884\u5206\u914d 10 \u4e2a\u5355\u4f4d\n    // \u771f\u6b63\u5206\u914d \u7684\u5806\u5185\u5b58 \u5927 \u5c0f \u7b49\u4e8e\u6570\u7ec4\u4e2d\u5143\u7d20\u7c7b\u578b\u6240\u5360\u5b57\u8282\u4e0e\u7ed9\u5b9a\u5bb9\u91cf\u503c \u4e4b\u79ef\n    Vee::with capacity(1O)\n    let vector = vec![1, 2, 4, 8];     // \u901a\u8fc7\u6570\u7ec4\u548c\u5b8f\u521b\u5efa\u5411\u91cf // v: Vec<i32>\n    let v = vec![0; 10]; // ten zeroes\n    let mut vec_fixed: Vec<_>= (0..10).collect();\n    // \u83b7\u53d6\n    println!("{:?}, v[0] = {}", vec, vec[0]);//\u4e0b\u6807\u5fc5\u987b\u662f usize \u7c7b\u578b\n\n    // vec \u8f6c\u6362 \u6570\u7ec4/\u5207\u7247\n    let arr = vec[..];\n\n     // \u957f\u5ea6\n     vec.len();\n\n    // \u6dfb\u52a0, \u5220\u9664\n    // \u7c7b\u4f3c \u6808\n    vec.push(6);//\u5c3e\u63d2\n    vec.push(7);\n    if let Some(x) = vec.pop() {// \u5c3e\u90e8\u5220\u9664\u8fd4\u56de\n        println!("popped: {}", x);// 7\n    } else {\n        println!("None");\n    }\n    println!("after pop: {:?}", vec); // [6]\n\n    // \u4ece 0 \u4f4d\u7f6e\u5f00\u59cb\u6e05\u9664\u5230\u672b\u5c3e, \u7b49\u540c\u6e05\u7a7a\u6570\u636e, \u4f46\u662f\u5185\u5b58\u6ca1\u6709\u91ca\u653e, \u53ea\u662f\u64e6\u9664\u4e86\u6570\u636e\n    vec . truncate (0);\n    // \u6e05\u7a7a\n    vec.clear()\n    // \u91ca\u653e\u7a7a\u95f2\u5bb9\u91cf\n    vec.shrink_to_fit() //\u65b9\u6cd5\uff0c\u9884\u5206\u914d\u7684\u5806\u5185\u5b58\u88ab\u91ca\u653e\u4e86\n\n    // \u4ea4\u6362\n    v.swap(1, 3);\n\n    // \u5168\u90e8\u66ff\u6362\n    // copy_from_slice \u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5207\u7247\u5c06\u539f vec \u6570 \u7ec4 \u4e2d\u7684\u5143\u7d20\u5168\u90e8\u66ff\u6362, \u6570\u7ec4\u5207\u7247\u5fc5\u987b\u548c\u539f\u6570\u7ec4\u7b49\u957f, \u53ea\u652f\u6301\u5b9e\u73b0 Copy \u8bed\u4e49\u7684\u5143\u7d20\n    //  clone_from slice\u65b9\u6cd5\u7684\u6548\u679c\u548c copy_\u4ed5om slice\u662f\u7b49\u4ef7\u7684\uff0c \u4f46\u5b83\u4eec\u7684\u533a\u522b\u662f\uff0c clone from slice \u65b9\u6cd5\u652f\u6301\u5b9e\u73b0 Clone \u7684\u7c7b\u578b\u5143\u7d20\u3002\n\n    // \u6dfb\u52a0\u53e6\u5916\u7684 vector\n    let mut v2 = vec![100, 101];\n    vec.append(&mut v2);\n    println!("vec: {:?}", vec);\n    println!("v2: {:?}", v2);//v2: []\n\n    // \u5904\u7406\u4e0b\u6807\u8d8a\u754c\n    match vec.get(7) { // \u8fd4\u56de\u7684\u662f Option<T>\n        Some(x) => println!("Item 7 is {}", x),\n        None => println!("Sorry, this vector is too short.")\n    }\n\n    //  contains\u3001 starts with\u548c ends with\n    \n\n    // \u8fed\u4ee3\n    // \u8fed\u4ee3\u51fa\u7684\u662f\u5143\u7d20\u5f15\u7528\n    for ele in &vec {\n        println!("\u4e0d\u53ef\u53d8\u5f15\u7528: {}", ele);\n    }\n    // \u53ef\u53d8\u8fed\u4ee3\n    for ele in &mut vec {\n        println!("\u53ef\u53d8\u5f15\u7528: {}", ele);\n        // \u6b64\u65f6\u53ef\u4ee5\u4fee\u6539\u5143\u7d20\n        *ele *= 10;// \u7b2c\u4e00\u4e2a* \u8868\u793a\u6839\u636e\u5730\u5740\u53d6\u5f97\u503c, \u7b2c\u4e8c\u4e2a*\u662f\u8fd0\u7b97\u7b26\n    }\n    // \u5e26\u4e0b\u6807\u8fed\u4ee3\n    for (i, v) in vec.iter().enumerate() {\n        println!("{}: {}", i,v);\n    }\n    for ele in vec {\n        println!("\u672c\u4f53: {}", ele);\n    }\n\n    // \u7c7b\u578b\u63a8\u65ad\n    //\n    // \u56e0\u4e3a\u6709\u7c7b\u578b\u8bf4\u660e\uff0c\u7f16\u8bd1\u5668\u77e5\u9053 `elem` \u7684\u7c7b\u578b\u662f u8\u3002\n    let elem = 5u8;\n    // \u521b\u5efa\u4e00\u4e2a\u7a7a\u5411\u91cf\uff08vector\uff0c\u5373\u4e0d\u5b9a\u957f\u7684\uff0c\u53ef\u4ee5\u589e\u957f\u7684\u6570\u7ec4\uff09\u3002\n    let mut vec = Vec::new();\n\n    vec.push(elem);\n    // \u554a\u54c8 \u806a\u660e\uff01\u73b0\u5728\u7f16\u8bd1\u5668\u77e5\u9053 `vec` \u662f u8 \u7684\u5411\u91cf\u4e86\uff08`Vec<u8>`\uff09\u3002\n\n    println!("{:?}", vec);\n\n    // \u8f6c\u6362\n    // \n    // slices \u662f &[u8] \u7c7b\u578b\n    let v: Vec<u8> = slices.to_vec()\n    let s: String = String::from_utf8(v).unwrap();\n\n    // Vec<String> -> Vec<&str>\n    let v7: Vec<&str> = v.iter().map(|s| s.as_ref()).collect();\n\n    let v4: Vec<&str> = v.iter().map(|s| s as &str).collect();\n    let v6: Vec<&str> = v.iter().map(|s| { let s: &str = s; s }).collect();\n    \n    let v5: Vec<&str> = v.iter().map(|s| &s[..]).collect();\n\n    let v2: Vec<&str> = v.iter().map(|s| &**s).collect();\nlet v3: Vec<&str> = v.iter().map(std::ops::Deref::deref).collect();\n\n\n    \n\n')),(0,l.kt)("h3",{id:"552-\u53cc\u7aef\u961f\u5217-vecdeque"},"5.5.2. \u53cc\u7aef\u961f\u5217 VecDeque"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u662f\u4e00\u79cd \u540c\u65f6\u5177\u6709 \u961f\u5217(\u5148\u8fdb\u5148\u51fa)\u548c\u6808 (\u540e\u8fdb\u5148\u51fa)\u6027\u8d28\u7684\u6570\u636e \u7ed3\u6784 \u3002 \u53cc\u7aef\u961f\u5217\u4e2d\u7684\u5143\u7d20\u53ef \u4ee5\u4ece\u4e24\u7aef\u5f39\u51fa\uff0c\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u88ab\u9650\u5b9a \u5728\u961f\u5217\u7684\u4e24\u7aef\u8fdb\u884c\n// \u5185\u90e8\u4e3b\u8981\u7ef4\u62a4\u4e00\u4e2a\u73af\u5f62\u7f13\u51b2\u533a (RingBuffer), \u7531\u4e24\u4e2a\u6307\u9488\u548c \u4e00 \u4e2a\u53ef\u589e\u957f\u6570\u7ec4\u7ec4\u6210 \u3002 \u8fd9\u4e24\u4e2a\u6307\u9488\u5206\u522b\u4e3a \u5934\u6307\u9488( Head Pointer)\u548c\u5c3e\u6307\u9488( Tail Pointer)\u3002 \u5176\u4e2d\u5934\u6307\u9488\u6c38\u8fdc\u6307\u5411\u5e94\u8be5\u5199\u5165\u6570\u636e \u7684\u4f4d\u7f6e\uff0c\u800c\u5c3e\u6307\u9488\u6c38 \u8fdc\u6307 \u5411\u53ef\u4ee5\u8bfb\u53d6\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n\n// \u7f13\u51b2\u533a\u6ea2\u51fa\n// \u5047\u8bbe\u7f13\u51b2\u533a\u6570\u7ec4\u521d\u59cb\u5927\u5c0f\u4e3a8, \u73af\u5f62 \u7f13\u51b2\u533a\u4e3a\u7a7a \u65f6\uff0c\u4e24\u4e2a\u6307\u9488\u90fd\u6307\u5411\u4f4d\u7f6e 0\u3002\u5f53\u6709\u65b0\u5143\u7d20 \u63d2\u5165\u65f6\uff0c\u5982\u679c \u76f4\u63a5\u63d2\u5165\u4f4d\u7f6e 0\uff0c\u5219\u5c06\u7528\u4e8e\u5199\u5165\u6570\u636e \u7684 Head \u6307\u9488\u6307\u5411\u4f4d\u7f6e 1\uff0c \u800c\u7528\u4e8e\u8bfb\u53d6\u6570\u636e\u7684 Tail \u6307\u9488\u4f9d \u65e7\u6307\u5411\u4f4d\u7f6e 0\n// \u5f53\u63d2\u5165\u7b2c 8 \u4e2a\u5143\u7d20\u65f6\uff0c Head \u548c Tail \u6307\u9488\u5c06\u518d\u6b21\u91cd\u53e0, \n// \u5982\u679c\u8fd9\u65f6\u7ee7\u7eed\u7ed9\u7f13\u51b2\u533a\u6dfb\u52a0\u65b0\u5143\u7d20 \uff0c \u90a3\u4e48\u4f4d\u7f6e \u3002 \u5904\u7684\u6570\u636e\u5c06\u88ab \u5176\u4ed6\u6570\u636e\u8986\u76d6\uff0c\u8fd9\u5c31\u4f1a\u9020\u6210\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb; \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u9700\u8981\u7a7a\u51fa\u4e00\u4e2a\u4f4d\u7f6e\uff0c \u4e0d\u80fd\u63d2\u5165\u5143\u7d20 \uff0c \u8fd9\u6837\u624d\u53ef\u4ee5\u533a\u5206\u5934\u548c\u5c3e\n// \u8981\u5224\u65ad\u73af\u5f62\u7f13\u51b2\u533a\u662f\u5426\u4e3a\u6ee1\u72b6\u6001\uff0c\u5c31\u5fc5\u987b\u770b\u5bb9\u91cf\u548c\u5927\u5c0f\u7684\u5dee\u662f\u5426\u4e3a l\n")),(0,l.kt)("h3",{id:"553-\u94fe\u8868-linkedlist"},"5.5.3. \u94fe\u8868 Linkedlist"),(0,l.kt)("p",null,"\u56e0\u4e3a\u662f\u53cc\u5411\u5217\u8868\uff0c \u6240\u4ee5\u63d0\u4f9b\u4e86 push back \u548c push front \u4e24\u7c7b\u65b9\u6cd5\uff0c\u65b9\u4fbf\u64cd\u4f5c \u6b64\u94fe\u8868\u3002\u4e5f\u63d0\u4f9b\u4e86 append \u65b9\u6cd5 \uff0c \u53ef\u4ee5\u7528\u6765\u8fde\u63a5\u4e24\u4e2a\u94fe\u8868"),(0,l.kt)("h3",{id:"554-hashmap-\u65e0\u5e8f\u54c8\u5e0c\u8868"},"5.5.4. hashmap \u65e0\u5e8f\u54c8\u5e0c\u8868"),(0,l.kt)("p",null,"Key\u5fc5\u987b\u662f\u53ef\u54c8\u5e0c\u7684\u7c7b\u578b\uff0c Value\u5fc5\u987b\u662f\u5728\u7f16\u8bd1\u671f\u5df2\u77e5\u5927\u5c0f\u7684\u7c7b\u578b"),(0,l.kt)("h4",{id:"5541-\u54c8\u5e0c\u8868\u57fa\u672c\u4f7f\u7528"},"5.5.4.1. \u54c8\u5e0c\u8868\u57fa\u672c\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n///HashMap \u7684\u952e\u53ef\u4ee5\u662f\u5e03\u5c14\u578b\u3001\u6574\u578b\u3001\u5b57\u7b26\u4e32\uff0c\u6216\u4efb\u610f\u5b9e\u73b0\u4e86 Eq \u548c Hash trait \u7684\u5176\u4ed6\u7c7b\u578b\n///HashMap \u5728\u5360\u636e\u4e86\u591a\u4f59\u7a7a\u95f4\u65f6\u8fd8\u53ef\u4ee5\u7f29\u5c0f \u81ea\u5df1\n/// \n/// \n/// \nfn hash_table() {\n    use std::collections::HashMap;\n    \n    let mut map = HashMap::new();//\u4e0d\u4f1a\u9884\u5206\u914d\u5185 \u5b58\u3002\u82e5\u59cb\u7ec8\u4e0d\u6dfb\u52a0\u5143\u7d20, \u4f1a\u7f16\u8bd1\u62a5\u9519, \u7f16\u8bd1\u5668\u8ba4\u4e3a map \u6ca1\u6709\u521d\u59cb\u5316\n\n    HashMap::with_capacity(unit) //\u521b\u5efa\u5177\u6709\u4e00\u5b9a\u521d\u59cb\u5bb9\u91cf\u7684 HashMap\n    \n    // \u4ece vector \u6784\u9020\n    let keys = vec!["a", "b"];\n    let values = vec![0, 1];\n    let m: HashMap<_, _> = keys.iter().zip(values.iter()).collect();\n    // \u53e6\u4e00\u79cd\u521d\u59cb\u5316\u65b9\u6cd5\n    let map: HashMap<char, i32> = vec![\n            (\'I\', 1),\n            (\'V\', 5),\n            (\'X\', 10),\n            (\'L\', 50),\n            (\'C\', 100),\n            (\'D\', 500),\n            (\'M\', 1000),\n        ]\n        .into_iter()\n        .collect();\n\n    // \u63d2\u5165\n    // \u5982\u679c\u88ab\u63d2\u5165\u7684\u503c\u4e3a\u65b0\u5185\u5bb9\uff0c\u90a3\u4e48 `HashMap::insert()` \u8fd4\u56de `None`\uff0c\n    // \u5426\u5219\u8fd4\u56de `Some(\u88ab\u8986\u76d6\u7684 value)`\n    map.insert("color", "red");// \u6ca1\u6709\u58f0\u660e\u6563\u5217\u8868\u7684\u6cdb\u578b\uff0c\u662f\u56e0\u4e3a Rust \u7684\u81ea\u52a8\u5224\u65ad\u7c7b\u578b\u673a\u5236\u3002\n    map.insert("size", "10 m^2");\n\n    //\u4e0d\u5b58\u5728\u624d\u63d2\u5165\u503c red, \u5e76\u4e14\u8fd4\u56de\u8be5\u503c\u7684\u53ef\u53d8\u501f\u7528, (\u4e00\u822c\u7684\u63d2\u5165\u5219\u662f\u6709\u5219\u8986\u76d6\u65e7\u7684\u503c)\n    // or_insert_with(FnOnce) \u4f20\u9012\u4e00\u4e2a\u53ef\u8ba1\u7b97\u7684\u95ed\u5305\u4f5c\u4e3a\u8981\u63d2\u5165\u7684\u503c, \u95ed\u5305\u6ca1\u6709\u53c2\u6570\n    // key()\n    map.entry("color").or_insert("red");// , \u8fd4\u56de "red" \u7684 &mut T \n\n    //\u5220\u9664\n    map.remove(&("Ashley")); \n\n\n    // \u83b7\u53d6\n    //\n    // \u63a5\u53d7\u4e00\u4e2a\u5f15\u7528\u5e76\u8fd4\u56de Option<&V>\n    let one = map.get(&"color");\n    // or\n    let one = map["color"]\n    println!("one is a Option<&V> ,  {}", *(one.unwrap()));\n    // \u53ef\u53d8\u83b7\u53d6(\u4fee\u6539) \n    let mut map = HashMap::new();\n    map.insert(1, "a");\n    if let Some(x) = map.get_mut(&1) {\n        *x = "b";\n    }\n\n    // \u662f\u5426\u5305\u542b\n    if !book_reviews.contains_key("rust book") {\n        println!("find {} times ", book_reviews.len());// \u957f\u5ea6\n    }\n    \n\n    // \u8fed\u4ee3\n    for p in map.iter() {//\u8fed\u4ee3\u5143\u7d20\u662f\u8868\u793a\u952e\u503c\u5bf9\u7684\u5143\u7ec4\n        println!("{:?}", p);\n    }\n    for (k, v) in &map {// \u5143\u7d20\u4e3a (&\'a key, &\'a value) \u5bf9\n        println!("{}, {}", k, v);\n    }\n\n    // \u901a\u8fc7keys\u548cvalues\u65b9\u6cd5\u53ef\u4ee5\u5206\u522b\u5355\u72ec\u83b7\u53d6HashMap\u4e2d\u7684\u952e/\u503c\u7684\u8fed\u4ee3\u5668\n    for key in book_reviews.keys() {\n        println!("{}", key);\n    }\n   for val in book_reviews.values() {\n       println!("{}", val);\n   }\n\n    // \u7edf\u8ba1\u53e5\u5b50\u4e2d\u7684\u5355\u8bcd\u4e2a\u6570\n    let text = "aa bb cc bb";\n    let mut counter = HashMap::new();\n    for word in text.split_whitespace() {\n        let count = counter.entry(word).or_insert(0);// \n        *count += 1;\n    }\n    for (word, count) in counter {\n        println!("{}, {}", word, count);\n    }\n\n\n\n    // \u5408\u5e76\u591a\u4e2a HashMap\n    // \u5408\u5e76\u4e24\u4e2a\u6216\u591a\u4e2a HashMap, \u5c3d\u91cf\u4f7f\u7528 extend\u6216\u5176\u4ed6\u8fed\u4ee3\u5668\u9002\u914d\u5668\u65b9\u5f0f\uff0c \u800c\u4e0d\u8981\u7528 for\u5faa\u73af\u6765\u63d2\u5165 ,\u5426\u5219\u4f1a\u5e26\u6765\u6027\u80fd \u95ee\u9898\n    map1.extend(map2);//\u672c\u8d28\u4e0a\uff0c \u5728 extend\u65b9\u6cd5\u5185\u90e8\u4e5f\u5c06 HashMap\u8f6c\u6362\u4e3a\u6cd5\u4ee3\u5668\u8fdb\u884c\u64cd\u4f5c\n    map1.into_iter().chain(map2).collect()//\u540c\u6837\u662f\u901a\u8fc7 into_iter\u5f97\u5230 Chain\u8fed\u4ee3\u5668 \u7136\u540e\u64cd\u4f5c\n    // \u88ab\u6dfb\u52a0\u7684 map_ref \u662f\u4e2a\u5f15\u7528, \u539f\u59cb map \u4e0d\u4f1a\u4e22\u5931\u6240\u6709\u6743\n    map1.extend(\n        map_ref.into_iter()\n            .map(|(k, v)| (k.clone(), v.clone()))\n   );\n\n\n\n\n')),(0,l.kt)("h4",{id:"5542-\u590d\u5408\u7c7b\u578b\u4f5c\u4e3a-key"},"5.5.4.2. \u590d\u5408\u7c7b\u578b\u4f5c\u4e3a key"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'    // \u57fa\u7840\u7c7b\u578b\u7684 \u6d6e\u70b9\u6570, \u65e0\u6cd5\u4f5c\u4e3a key\n\n    // \u590d\u6742\u7c7b\u578b\u4f5c\u4e3a\u952e key, \u5fc5\u987b\u5b9e\u73b0 Hash\u548cEq trait\n    //\n    //f32 \u548c f64 \u6ca1\u6709\u5b9e\u73b0 Hash\uff0c\u8fd9\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u7531\u4e8e\u82e5\u4f7f\u7528\u6d6e\u70b9\u6570\u4f5c\u4e3a \u6563\u5217\u8868\u7684\u952e\uff0c\u6d6e\u70b9\u7cbe\u5ea6\u8bef\u5dee\u4f1a\u5f88\u5bb9\u6613\u5bfc\u81f4\u9519\u8bef\n    //\n    //\u5bf9\u4e8e\u6240\u6709\u7684\u96c6\u5408\u7c7b\uff08collection class\uff09\uff0c\u5982\u679c\u5b83\u4eec\u5305\u542b\u7684\u7c7b\u578b\u90fd\u5206\u522b\u5b9e\u73b0\u4e86 Eq \u548c Hash\uff0c\n    //\u90a3\u4e48\u8fd9\u4e9b\u96c6\u5408\u7c7b\u4e5f\u5c31\u5b9e\u73b0\u4e86 Eq \u548c Hash\u3002\u4f8b\u5982\uff0c\u82e5 T \u5b9e\u73b0\u4e86 Hash\uff0c\u5219 Vec<T> \u4e5f\u5b9e\u73b0\u4e86 Hash\n    //\n    //\u81ea\u5b9a\u4e49\u7c7b\u578b\u53ef\u4ee5\u8f7b\u677e\u5730\u5b9e\u73b0 Eq \u548c Hash\uff0c\u53ea\u9700\u52a0\u4e0a\u4e00\u884c\u4ee3\u7801\uff1a#[derive(PartialEq, Eq, Hash)]\n    //\n    // Eq \u8981\u6c42\u4f60\u5bf9\u6b64\u7c7b\u578b\u63a8\u5bfc PartiaEq\u3002\n    #[derive(PartialEq, Eq, Hash)]\n    struct Account<\'a>{\n        username: &\'a str,\n        password: &\'a str,\n    }\n    struct AccountInfo<\'a>{\n        name: &\'a str,\n        email: &\'a str,\n    }\n    type Accounts<\'a> = HashMap<Account<\'a>, AccountInfo<\'a>>;\n    fn try_logon<\'a>(accounts: &Accounts<\'a>,\n            username: &\'a str, password: &\'a str){\n        println!("Username: {}", username);\n        println!("Password: {}", password);\n        println!("Attempting logon...");\n\n        let logon = Account {\n            username: username,\n            password: password,\n        };\n\n        match accounts.get(&logon) {\n            Some(account_info) => {\n                println!("Successful logon!");\n                println!("Name: {}", account_info.name);\n                println!("Email: {}", account_info.email);\n            },\n            _ => println!("Login failed!"),\n        }\n    }\n\n\n\n    \n\n}\n\n')),(0,l.kt)("h4",{id:"5543-\u54c8\u5e0c\u78b0\u649e\u653b\u51fb"},"5.5.4.3. \u54c8\u5e0c\u78b0\u649e\u653b\u51fb"),(0,l.kt)("p",null,"map \u5e95\u5c42\u4f7f\u7528\u6570\u7ec4\u5b58\u50a8\u6570\u636e, \u9700\u8981\u4e00\u4e2a\u9ad8\u6548\u7684 hash \u51fd\u6570\u5747\u5300\u7684\u5c06\u5143\u7d20\u5206\u6563\u5b58\u50a8\u5728 \u6570\u7ec4\u4e2d "),(0,l.kt)("p",null,"\u8d1f\u8f7d\u56e0\u5b50: \u5f53\u524d\u7684\u9ed8\u8ba4\u6269\u5bb9\u7b56\u7565 \u4e3a\u8d1f\u8f7d\u56e0\u5b50\u8fbe\u5230 0.9 \u65f6\u5219\u8fdb\u884c\u6269\u5bb9"),(0,l.kt)("p",null,"Rust\u6807\u51c6\u5e93\u5b9e\u73b0\u7684 HashMap\uff0c \u9ed8\u8ba4\u7684 Hash \u51fd\u6570\u7b97\u6cd5\u662f SipHashl3o \u53e6\u5916\uff0c\u6807\u51c6\u5e93\u8fd8\u5b9e\u73b0 \u4e86 SipHash24, SipHash\u7b97\u6cd5\u53ef\u4ee5\u9632\u6b62 Hash\u78b0\u649e\u62d2\u7edd\u670d\u52a1\u653b\u51fb(Hash Collision DoS)\uff0c\u8fd9\u79cd\n\u653b\u51fb\u662f\u4e00\u79cd\u57fa\u4e8e\u5404\u8bed\u8a00 Hash \u7b97\u6cd5\u7684\u968f\u673a\u6027\u800c\u7cbe\u5fc3\u6784\u9020\u51fa\u6765\u7684\u589e\u5f3a Hash\u78b0\u649e\u7684\u624b\u6bb5\uff0c\u88ab\u653b\u51fb \u7684\u670d\u52a1\u5668 CPU \u5360\u7528\u7387\u4f1a\u8f7b\u677e\u5730\u5236\u5347\u5230 100%"),(0,l.kt)("p",null,"\u5982\u4f55\u89e3\u51b3\u54c8\u5e0c\u78b0\u649e?"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5916\u90e8\u62c9\u94fe\u6cd5: \u5728\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u4f4d\u7f6e, \u9047\u5230\u78b0\u649e\u540e, \u751f\u957f\u51fa\u4e00\u4e2a\u94fe\u8868, \u4f46\u662f\u6709\u9000\u5316\u5230\u5355\u94fe\u8868\u7684\u98ce\u9669"),(0,l.kt)("li",{parentName:"ul"},"\u5f00\u653e\u5b9a\u5740\u6cd5: \u5728\u53d1\u751f\u51b2\u7a81\u65f6\u76f4\u63a5\u53bb\u5bfb\u627e\u4e0b\u4e00\u4e2a\u7a7a\u7684\u5730\u5740, \u5f00\u653e\u5b9a\u5740\u6cd5\u7684\u4f18\u70b9\u5728\u4e8e\u8ba1\u7b97\u7b80\u5355\u3001\u5feb\u6377\uff0c\u5904\u7406\u65b9\u4fbf:\u7f3a\u70b9\u662f\u5b83\u4f1a \u4ea7\u751f\u805a\u96c6 \u73b0\u8c61\uff0c\u5e76\u4e14\u5220\u9664\u5143 \u7d20\u4e5f\u4f1a\u53d8\u5f97\u5341\u5206\u590d\u6742(\u56e0\u4e3a\u5e76\u4e0d\u80fd\u771f\u7684\u5220\u9664\uff0c \u5426\u5219\u4f1a\u7834\u574f\u5bfb\u5740\u7684\u6b63\u786e\u6027)\n\u5bfb\u627e\u4e0b\u4e00\u4e2a\u7a7a\u5730\u5740\u7684\u884c\u4e3a\uff0c\u53eb\u4f5c\u63a2\u6d4b (Probe)\u3002\u4f9d\u6b21 \u4e00 \u4e2a\u4e2a\u5730 \u5bfb\u627e \u53eb\u4f5c \u7eed\u6027\u63a2\u6d4b( Linear Probing), rust \u91c7\u7528\u8fd9\u79cd")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u5728\u7ebf\u6027\u63a2\u6d4b\u65f6\uff0c\u5982\u679c\u9047\u5230\u7a7a\u6876\uff0c \u5219\u6b63\u5e38\u63d2\u5165; \u5982\u679c\u9047\u5230\u6876\u5df1 \u7ecf\u88ab\u5360\u7528 \uff0c\u90a3\u4e48 \u5c31\u8981\u770b\u5360\u7528\u8fd9\u4e2a\u6876\u7684\u952e\u503c\u5bf9\u662f\u7ecf\u5386 \u8fc7\u51e0\u6b21 \u63a2\u6d4b\u624d\u88ab\u63d2\u5165\u8be5\u4f4d\u7f6e \u7684\uff0c \u5982\u679c\u8be5\u952e\u503c\u5bf9\u7684\u63a2\u6d4b\u6b21\u6570\u6bd4\u5f53\u524d\u5f85\u63d2\u5165\u7684\u952e\u503c\u5bf9\u7684\u63a2\u6d4b\u6b21\u6570\u5c11\uff0c\u5219\u5b83\u5c5e\u4e8e\u201c\u5bcc\u7fc1\u201d\uff0c \u5c31\u628a\u5f53\u524d\u7684\u952e\u503c\u5bf9\u63d2\u5165\u8be5\u4f4d\u7f6e\uff0c\u518d\u63a5\u7740\u627e\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u6765\u5b89\u7f6e\u88ab\u66ff\u6362\u7684\u201c\u5bcc\u7fc1\u201d\u952e\u503c\u5bf9\u3002 \u6b63\u662f\u56e0 \u4e3a\u8fd9\u79cd\u201c\u52ab \u5bcc\u6d4e\u8d2b \u201d\u7684\u601d\u8def\uff0c\u8fd9\u79cd \u7b97\u6cd5\u624d\u88ab\u79f0 \u4e3a\u7f57 \u5bbe\u6c49\u7b97\u6cd5\u3002")),(0,l.kt)("h3",{id:"555-btreemap-\u6709\u5e8f\u54c8\u5e0c\u8868"},"5.5.5. BTreeMap \u6709\u5e8f\u54c8\u5e0c\u8868"),(0,l.kt)("p",null,"\u57fa\u4e8e B \u6811\u7684\u6709\u5e8f\u6620\u5c04\u96c6\u5b9e\u73b0\uff0c\u6309 Key \u6392\u5e8f"),(0,l.kt)("h3",{id:"556-hashset-\u65e0\u5e8f\u96c6\u5408"},"5.5.6. hashset \u65e0\u5e8f\u96c6\u5408"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"\n// HashSet<K> BTreeSet<K>\u5176\u5b9e\u5c31\u662f HashMap<K, V>\u548c BTr\u5df3eMap<K, V>\u628a Value \u8bbe\u7f6e \u4e3a\u7a7a\u5143\u7ec4\u7684\u7279\u5b9a\u7c7b\u578b\uff0c\u7b49\u4ef7\u4e8e HashSet<K, ()>\u548c BTreeSet<K, ()>\n\n\n//\n    //\u6563\u5217\u96c6 HashSet\n    //\n    //union\uff08\u5e76\u96c6\uff09\uff1a\u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff08\u4e0d\u542b\u91cd\u590d\u503c\uff09\u3002\n    // difference\uff08\u5dee\u96c6\uff09\uff1a\u83b7\u53d6\u5c5e\u4e8e\u7b2c\u4e00\u4e2a\u96c6\u5408\u800c\u4e0d\u5c5e\u4e8e\u7b2c\u4e8c\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\u3002\n    // intersection\uff08\u4ea4\u96c6\uff09\uff1a\u83b7\u53d6\u540c\u65f6\u5c5e\u4e8e\u4e24\u4e2a\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\u3002\n    // symmetric_difference\uff08\u5bf9\u79f0\u5dee\uff09\uff1a\u83b7\u53d6\u6240\u6709\u53ea\u5c5e\u4e8e\u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\uff0c\u800c\u4e0d\u540c\u65f6\u5c5e\u4e8e \u4e24\u4e2a\u96c6\u5408\u7684\u6240\u6709\u5143\u7d20\u3002\n    //\n    use std::collections::HashSet;\n    let mut a: HashSet<i32> = vec!(1i32, 2, 3).into_iter().collect();\n    let mut b: HashSet<i32> = vec!(2i32, 3, 4).into_iter().collect();\n    a.insert(4); // \u5982\u679c\u503c\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48 `HashSet::insert()` \u8fd4\u56de false\n    a.contains(&4);//\u662f\u5426\u5b58\u5728\n    //\u5e76\u96c6\n    let c = a.union(&b).collect::<Vec<&i32>>();\n\n")),(0,l.kt)("h3",{id:"557-btreeset-\u6709\u5e8f\u96c6\u5408"},"5.5.7. BTreeSet \u6709\u5e8f\u96c6\u5408"),(0,l.kt)("h3",{id:"558-\u4f18\u5148\u961f\u5217-binaryheap"},"5.5.8. \u4f18\u5148\u961f\u5217 BinaryHeap"),(0,l.kt)("p",null,"\u4f7f\u7528 peek\u65b9\u6cd5\u53ef\u4ee5 \u53d6\u51fa\u5806\u4e2d\u7684\u6700\u5927\u503c"),(0,l.kt)("h2",{id:"56-\u7c7b\u578b\u8f6c\u6362"},"5.6. \u7c7b\u578b\u8f6c\u6362"),(0,l.kt)("h3",{id:"561-\u57fa\u672c\u7684\u7c7b\u578b\u8f6c\u6362"},"5.6.1. \u57fa\u672c\u7684\u7c7b\u578b\u8f6c\u6362"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n    // \u7c7b\u578b\u8f6c\u6362\n    //\n    //Rust \u4e0d\u63d0\u4f9b\u539f\u751f\u7c7b\u578b\u4e4b\u95f4\u7684\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\uff08coercion\uff09\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528 as \u5173\u952e\u5b57\u8fdb\u884c\u663e \u5f0f\u7c7b\u578b\u8f6c\u6362\uff08casting\uff09\n    //\n    println!("------\u7c7b\u578b\u8f6c\u6362--------------------------");\n    let decimal = 65.4321_f32; // \u901a\u8fc7\u5b57\u9762\u91cf\u76f4\u63a5\u58f0\u660e\u7c7b\u578b\n\n    // \u9519\u8bef\uff01\u4e0d\u63d0\u4f9b\u9690\u5f0f\u8f6c\u6362\n    let integer: u8 = decimal;\n     // \u53ef\u4ee5\u663e\u5f0f\u8f6c\u6362\n    let integer = decimal as u8;\n    let character = integer as char;\n\n\n\n')),(0,l.kt)("h3",{id:"562-\u8f6c\u6362\u76f8\u5173\u7684-trait"},"5.6.2. \u8f6c\u6362\u76f8\u5173\u7684 trait"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n//\n//\n// \u5176\u4ed6\u8f6c\u6362\u76f8\u5173\u7684 trait\n//\n//from\u548cinto \u65b9\u6cd5\u662f\u4e00\u5bf9\uff0c\u5b9e\u73b0\u4e86From trait\u5c31\u4f1a\u81ea\u52a8\u53cd\u8fc7\u6765\u5b9e\u73b0Into\n// - std::convert::From \u63a5\u53e3\u5b9a\u4e49 \u201c\u600e\u4e48\u6839\u636e\u53e6\u4e00\u79cd\u7c7b\u578b\u751f\u6210\u81ea\u5df1\u201d\n// - Into trait \u5c31\u662f\u628a From trait \u5012\u8fc7\u6765\u800c\u5df2; \u4f7f\u7528 Into trait \u901a\u5e38\u8981\u6c42\u6307\u660e\u8981\u8f6c\u6362\u5230\u7684\u7c7b\u578b\n//\n//- TryFrom and TryInto trait \u7528\u4e8e\u6613\u51fa\u9519\u7684\u8f6c\u6362\uff0c\u4e5f\u6b63\u56e0\u5982\u6b64\uff0c\u5176\u8fd4\u56de\u503c\u662f Result \n//\n//- ToString trait \u8981\u628a\u4efb\u4f55\u7c7b\u578b\u8f6c\u6362\u6210 String\uff0c\u53ea\u9700\u8981\u5b9e\u73b0 to_string \u65b9\u6cd5\u3002\n//\u7136\u800c\u4e0d\u8981\u76f4\u63a5\u8fd9\u4e48\u505a\uff0c\u5e94\u8be5\u5b9e\u73b0fmt::Display trait\uff0c\u5b83\u4f1a\u81ea\u52a8\u63d0\u4f9b ToString\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u7528\u6765\u6253\u5370\u7c7b\u578b\n//-  \u5bf9\u5e94\u7684\u6709 FromStr, \u53ea\u8981\u5bf9\u76ee\u6807\u7c7b\u578b\u5b9e\u73b0\u4e86 FromStr trait\uff0c\u5c31\u53ef\u4ee5\u7528 parse \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u76ee\u6807\u7c7b\u578b\n//\nuse std::convert::From;\n#[derive(Debug)]\nstruct Number {\n    value: i32,\n}\nimpl From<i32> for Number {\n    fn from(item: i32) -> Self {\n        Number { value: item }\n    }\n}\nlet num = Number::from(30);\nprintln!("My number is {:?}", num);\nlet int = 5;\nlet num: Number = int.into();// num \u7c7b\u578b\u5fc5\u987b\u6307\u5b9a\nprintln!("My number is {:?}", num);\n\n\n\n')),(0,l.kt)("h2",{id:"57-\u6240\u6709\u6743"},"5.7. \u6240\u6709\u6743"),(0,l.kt)("h3",{id:"571-\u4e3a\u4ec0\u4e48\u9700\u8981\u6240\u6709\u6743-raii\u673a\u5236"},"5.7.1. \u4e3a\u4ec0\u4e48\u9700\u8981\u6240\u6709\u6743 RAII\u673a\u5236"),(0,l.kt)("p",null,"\u6240\u6709\u6743\u662f\u5bf9\u5806\u5185\u5b58\u4e0a\u7684\u6570\u636e\u6765\u8bf4\u7684, \u6240\u6709\u6743\u4e3a\u6bcf\u4e2a\u6570\u636e\u89c4\u5b9a\u4e86\u4e3b\u4eba, \u907f\u514d\u4e86\u6570\u636e\u7ade\u4e89, \u540c\u65f6\u4e5f\u80fd\u51cf\u5c11bug. "),(0,l.kt)("p",null,"\u6808\u5185\u5b58\u4e2d\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u662f\u77ed\u6682\u7684, \u968f\u7740\u65b9\u6cd5\u8c03\u7528\u7684\u7ed3\u675f\u800c\u6e05\u7406, \u5806\u5185\u5b58\u7684\u53d8\u91cf\u867d\u7136\u53ef\u4ee5\u957f\u4e45\u5b58\u5728, \u4f46\u662f\u975e\u7ebf\u7a0b\u79c1\u6709, \u5176\u5185\u90e8\u7684\u6570\u636e\u9700\u8981\u901a\u8fc7\u6808\u5185\u5b58\u4e2d\u7684\u6307\u9488\u6765\u4f7f\u7528"),(0,l.kt)("p",null,"\u6307\u9488\u5728\u5806\u4e0a\u5f00\u8f9f\u5185\u5b58 \u7a7a \u95f4\uff0c\u5e76\u62e5\u6709\u5176\u6240\u6709\u6743\uff0c\u901a\u8fc7\u5b58\u50a8\u4e8estack\u4e2d\u7684\u6307\u9488\u6765\u7ba1\u7406\u5806\u5185\u5b58 , \u667a\u80fd\u6307\u9488\u7684 RAII \u673a\u5236\u5229\u7528stack\u7684\u7279\u70b9\uff0c\u5728\u5143\u7d20\u88ab\u81ea\u52a8\u6e05\u7a7a\u65f6\u81ea\u52a8\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u6765\u91ca\u653e\u667a \u80fd\u6307\u9488\u6240\u7ba1\u7406\u7684\u5806\u5185\u5b58 \u7a7a\u95f4"),(0,l.kt)("h3",{id:"572-\u57fa\u672c\u539f\u5219"},"5.7.2. \u57fa\u672c\u539f\u5219"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// \u6bcf\u79cd\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u81ea\u5df1\u7684\u4e00\u5957\u5185\u5b58\u7ba1\u7406\u7684\u65b9\u6cd5\u3002\n//\u6709\u4e9b\u9700\u8981\u663e\u5f0f\u7684\u5206\u914d\u548c\u56de\u6536\u5185\u5b58\uff08\u5982C\uff09\uff0c\n// \u6709\u4e9b\u8bed\u8a00\u5219\u4f9d\u8d56\u4e8e\u5783\u573e\u56de\u6536\u5668\u6765\u56de\u6536\u4e0d\u4f7f\u7528\u7684\u5185\u5b58\uff08\u5982Java\uff09\u3002\n// \u800cRust\u4e0d\u5c5e\u4e8e\u4ee5\u4e0a\u4efb\u4f55\u4e00\u79cd\uff0c\u5b83\u6709\u4e00\u5957\u81ea\u5df1\u7684\u5185\u5b58\u7ba1\u7406\u89c4\u5219\uff0c\u53eb\u505aOwnership\u3002\n//\n// //\n// 1.  \u5728\u540c\u4e00\u4e2a scope \u5185,"\u503c"\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a owner, \u5f53owner\u8d85\u51fa\u4f5c\u7528\u57df\u540e\uff0c\u503c\u4f1a\u88ab\u9500\u6bc1\n//          \u4f8b\u5982 , \n            let a = 11, let b = Person {};\n            func(a, b); \n//           \u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u5e95\u5c42\u5b9e\u9645\u662f \u5c06 a, b \u8d4b\u503c\u7ed9 \u51fd\u6570\u6808\u4e2d\u7684\u4e34\u65f6\u53d8\u91cf, \u9020\u6210 a, b \u7684\u6240\u6709\u6743\u8f6c\u79fb\n//            \u5bf9\u4e8e \u57fa\u672c\u7c7b\u578b a, \u5b9e\u73b0\u4e86 copy trait, \u6240\u6709\u6743\u8f6c\u79fb\u7684\u6548\u679c\u662f \u590d\u5236, a \u4ecd\u7136\u80fd\u7ee7\u7eed\u4f7f\u7528\n//            \u5bf9\u4e8e \u7b26\u5408\u7c7b\u578bb, \u6ca1\u6709 copy trait, \u6240\u6709\u6743\u8f6c\u79fb\u540e, b \u5c31\u5931\u6548\u4e86\n// \n// 2. \u53ef\u4ee5\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u548c\u552f\u4e00\u7684\u53ef\u53d8\u5f15\u7528 (\u7c7b\u4f3c\u8bfb\u5199\u9501)\n//       \u5728\u4e0d\u53ef\u53d8\u501f\u7528\u671f\u95f4\uff0c\u6240\u6709\u8005\u4e0d\u80fd\u4fee\u6539\u8d44\u6e90\uff0c\u5e76\u4e14\u4e5f\u4e0d\u80fd\u518d\u8fdb\u884c\u53ef\u53d8\u501f\u7528\n//       \u5728\u53ef\u53d8\u501f\u7528\u671f\u95f4\uff0c\u6240\u6709\u8005\u4e0d\u80fd\u8bbf\u95ee\u8d44\u6e90\uff0c\u5e76\u4e14\u4e5f\u4e0d\u80fd\u518d\u51fa\u501f\u6240\u6709\u6743\n//          \n//            \n// 3. references \u7684 lifecycle \u4e0d\u80fd\u8d85\u8fc7"\u503c"\u7684 lifecycle\n//          reference \u4e0d\u80fd\u6bd4 owner \u6d3b\u7684\u65f6\u95f4\u8fd8\u957f (\u6bd4\u5982\u901a\u8fc7 closure \u6355\u83b7\u4e00\u4e2a\u5916\u90e8\u53d8\u91cf, \u82e5\u4e0d\u663e\u5f0f\u6307\u5b9a move \u8bed\u4e49, name \u6355\u83b7\u7684\u662f reference, \u5916\u90e8\u7684 owner \u53ef\u80fd\u5df2\u7ecf\u88ab\u56de\u6536\u4e86, closure \u5185\u90e8\u7684 reference \u53ef\u80fd\u8fd8\u5728\u88ab\u4f7f\u7528, \u8fd9\u662f\u9519\u8bef\u7684)\n\n\n')),(0,l.kt)("h3",{id:"573-\u5b57\u7b26\u4e32\u8d4b\u503c\u7684\u6240\u6709\u6743"},"5.7.3. \u5b57\u7b26\u4e32\u8d4b\u503c\u7684\u6240\u6709\u6743"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'fn ownership() {\n    // \u5bf9\u4e8e basic type, \u6570\u636e\u7684\u4e92\u52a8\u90fd\u53d1\u751f\u5728\u6808\u4e0a, \u5927\u5c0f\u5df2\u7ecf\u786e\u5b9a, \u590d\u5236\u8d77\u6765\u5f88\u5feb, \u6240\u4ee5\u91c7\u7528\u7684\u662f\u590d\u5236\u514b\u9686\n    let x = 5;\n    let y = x; // \u73b0\u5728\u6808\u4e2d\u5c06\u6709\u4e24\u4e2a\u503c 5\n    println!("{}, {}", x, y);// \u90fd\u6709\u6548\n\n    //\u4ea7\u751f\u4e00\u4e2a String \u5bf9\u8c61\uff0c\u503c\u4e3a "hello"\u3002\u957f\u5ea6\u53ef\u53d8, \u9700\u8981\u5728\u5806\u4e2d\u5b58\u50a8\n    // s1 \u5b58\u50a8\u5728\u6808, \u7ed3\u6784\u4e2d\u5305\u542b\u4e00\u4e2a ptr, \u6307\u5411\u5806\u4e2d\u7684String \u5b57\u7b26\u5e8f\u5217\n    let s1 = String::from("hello");\n    let s2 = s1;// \u62f7\u8d1d s1  \u672c\u8eab\u7ed9 s2, \u5806\u4e2d\u7684\u6570\u636e\u8fd8\u662f\u540c\u4e00\u4efd\n    //\n    // \u6b64\u65f6, s1\u5df2\u7ecf\u5931\u6548\u4e86, \u8868\u73b0\u7684\u50cf s1 \u79fb\u52a8\u5230 s2\n    //\u4e3a\u4ec0\u4e48rust\u89c4\u5b9a\u6b64\u65f6 s1\u5931\u6548?  \u56e0\u4e3a\u5982\u679c\u7a0b\u5e8f\u5728\u8fd9\u91cc\u7ed3\u675f,  s1 \u548c s2 \u90fd\u88ab\u91ca\u653e\u7684\u8bdd\u5806\u533a\u4e2d\u7684 "hello" \u88ab\u91ca\u653e\u4e24\u6b21\uff0c\u4f1a\u51fa\u9519\n    // \u4e3a\u4e86\u786e\u4fdd\u5b89\u5168\uff0c\u5728\u7ed9 s2 \u8d4b\u503c\u65f6 s1 \u5df2\u7ecf\u65e0\u6548\u4e86\n    println!("s2 = {}", s2);\n    println!("s1 = {}", s1); // \u9519\u8bef\n\n    // \u590d\u5236\u514b\u9686\u5806\u4e2d\u7684\u5bf9\u8c61\n    let s1 = String::from("hello");\n    let s2 = s1.clone();\n    // \u6b64\u65f6, s1 s2 \u90fd\u6709\u6548\n    println!("s1 = {}, s2 = {}", s1, s2);\n\n')),(0,l.kt)("h3",{id:"574-\u51fd\u6570\u53c2\u6570\u7684\u6240\u6709\u6743"},"5.7.4. \u51fd\u6570\u53c2\u6570\u7684\u6240\u6709\u6743"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n    //\n    // \u51fd\u6570 \u53c2\u6570\u7684\u6240\u6709\u6743\u673a\u5236\n    //\n    //\u5982\u679c\u5c06\u53d8\u91cf\u5f53\u4f5c\u53c2\u6570\u4f20\u5165\u51fd\u6570\uff0c\u90a3\u4e48\u5b83\u548c\u79fb\u52a8\u7684\u6548\u679c\u662f\u4e00\u6837\u7684 (\u51fd\u6570\u5916\u90e8\u7684\u53d8\u91cf\u5931\u6548)\n    let s = String::from("nihao");\n    let a = 11;\n    fn fn_basic_type(a: i32) {\n        println!("a = {}", a);\n    } // \u51fd\u6570\u7ed3\u675f, a\u57fa\u672c\u7c7b\u578b, \u8d44\u6e90\u65e0\u9700\u91ca\u653e\n    fn fn_str_type(s: String) {\n        println!("s = {}", s);\n    } // \u51fd\u6570\u7ed3\u675f, s \u8d44\u6e90\u88ab\u91ca\u653e\n\n    // s \u88ab\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u5230\u51fd\u6570\u5185, \u5f62\u53c2\u6307\u5411 String\u5bf9\u8c61, \u90a3\u4e48\u524d\u9762\u7684 s \u5931\u6548\n    //\u76f8\u5f53\u4e8e\u6570\u636e\u88ab\u79fb\u52a8\u4e86\n    fn_str_type(s);\n    // \u6240\u4ee5\u8fd9\u91cc s \u65e0\u6548\u4e86\n    println!(s);//error\n\n    // a \u662f\u57fa\u672c\u7c7b\u578b, \u5b9e\u73b0\u4e86 copy trait, \u4f20\u9012\u65f6\u662f copy,\n    fn_basic_type(a);\n    // \u6240\u4ee5, \u6b64\u65f6 a \u4ecd\u7136\u6709\u6548\n    println!("a = {}", a);\n\n\n')),(0,l.kt)("h3",{id:"575-\u51fd\u6570\u8fd4\u56de\u503c\u6240\u6709\u6743"},"5.7.5. \u51fd\u6570\u8fd4\u56de\u503c\u6240\u6709\u6743"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n    //\n    // \u51fd\u6570\u8fd4\u56de\u503c\u7684\u6240\u6709\u6743\n    //\n    //\u51fd\u6570\u8fd4\u56de\u503c\u7684\u53d8\u91cf\u6240\u6709\u6743\u5c06\u4f1a\u88ab\u79fb\u52a8\u51fa\u51fd\u6570\u5e76\u8fd4\u56de\u5230\u8c03\u7528\u51fd\u6570\u7684\u5730\u65b9\uff0c\n    //\u800c\u4e0d\u4f1a\u76f4\u63a5\u88ab\u65e0\u6548\u91ca\u653e\u3002\n    fn return_str() -> String {\n        let s = String::from("hello");\n        return s;\n    }\n    fn give_and_return_str(s: String) -> String {\n        s\n    }\n    let s1 = return_str(); // \u51fd\u6570\u5c06\u5185\u90e8\u8fd4\u56de\u503c\u79fb\u52a8\u5230 s1\n    let s2 = String::from("hello");\n    let s3 = give_and_return_str(s2); // s2 \u88ab\u79fb\u52a8\u5931\u6548\n\n\n')),(0,l.kt)("h3",{id:"576-\u590d\u5408\u7c7b\u578b\u4e2d\u7684\u6240\u6709\u6743"},"5.7.6. \u590d\u5408\u7c7b\u578b\u4e2d\u7684\u6240\u6709\u6743"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n// \u6240\u6709\u6743\u673a\u5236\u4f1a\u5e26\u6765\u590d\u6742\u6027\n    //\n    #[derive(Debug)]\n    struct Person {\n        name: String,\n        email: String,\n    }\n    let mut p = Person {\n        name: "xiaoyu".to_owned(),\n        email: "775000738@qq.com".to_owned(),\n    };\n\n    let _name = p.name;// property "name" was been removed out of p\n    println!("{:?}", p); // \u7f16\u8bd1\u51fa\u9519 "value borrowed here after partial move" , \u5c5e\u6027 name \u4e3a string, \u6ca1\u6709 copy trait, \u88ab move \u6389\u540e, \u503c\u5c31\u4e3a \u7a7a\u4e86\n    p.name = "xy".to_owned(); // \u91cd\u65b0\u8d4b\u503c\n    println!("{:?}", p); // \u8fd9\u65f6\u4e0d\u4f1a\u62a5\u9519\u4e86\n\n    // \u6a21\u62df\u52a8\u753b\u6e32\u67d3\u793a\u4f8b\n    struct Buffer {\n        buf: String,\n    }\n    struct Render {\n        current: Buffer,\n        next: Buffer,\n    }\n    impl Render {\n        fn update_buffer(&mut self, buf: String) {\n            // \u7f16\u8bd1\u9519\u8bef, next \u6ca1\u6709\u5b9e\u73b0 copy trait, \u88ab move \u6389\u540e, \u5c31\u4e3a \u7a7a\u4e86,\n            //\u4e00\u4e2a\u53ef\u9009\u65b9\u6848\u662f\u5b9e\u73b0 copy trait, \u4f46\u662f\u8fd9\u6837\u5c31\u6ca1\u6cd5\u4eab\u53d7\u65b9\u4fbf\u7684 move \u8bed\u4e49\u4e86\n            //\n            self.current = self.next;\n            self.next = Buffer {buf,};\n\n            // \u89e3\u51b3:\n            //\u9700\u8981\u52a8\u7528 std::mem::replace(&dest, src) \u51fd\u6570\u4e86\uff0c \u8fd9\u4e2a\u51fd\u6570\u628a src \u7684\u503c move \u5230 dest \u4e2d\uff0c\u7136\u540e\u628a dest \u518d\u8fd4\u56de\u51fa\u6765\n            self.current = std::mem::replace(&mut self.next, Buffer {buf});\n        }\n    }\n}\n\n\n')),(0,l.kt)("h3",{id:"577-\u591a\u6240\u6709\u6743"},"5.7.7. \u591a\u6240\u6709\u6743"),(0,l.kt)("p",null,"\u9700\u8981\u4f7f\u7528\u667a\u80fd\u6307\u9488"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"     \n\nfn multi_ownership() {\n    \n\n\n    \n\n    }\n}\n\n\n")),(0,l.kt)("h2",{id:"58-\u751f\u547d\u5468\u671f\u53c2\u6570"},"5.8. \u751f\u547d\u5468\u671f\u53c2\u6570"),(0,l.kt)("h3",{id:"581-\u4ec0\u4e48\u662f\u751f\u547d\u5468\u671f"},"5.8.1. \u4ec0\u4e48\u662f\u751f\u547d\u5468\u671f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'let a = "hello";//let\u7ed1\u5b9a\u4e86\u6807\u8bc6\u7b26 a\u548c\u5b58 \u50a8\u5b57\u7b26\u4e32\u7684\u90a3\u5757\u5185\u5b58\uff0c\u4ece\u800c a\u5bf9\u90a3\u5757\u5185\u5b58\u62e5\u6709\u4e86\u6240\u6709\u6743, a \u4e5f\u53ef\u79f0\u4e3a\u4e00\u4e2a\u7ed1\u5b9a\nlet b = a; // a \u7684\u6240\u6709\u6743\u88ab\u8f6c\u7ed9b (a \u4e3a &str\u7c7b\u578b, \u65e0\u6cd5\u5b9e\u73b0 copy trait); \u5176\u5b9e\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u5bf9 a\u8fdb\u884c\u89e3\u7ed1\uff0c\u7136\u540e\u91cd\u65b0\u7ed1\u5b9a\u7ed9 b\u3002\n\n// \u7ed1\u5b9a\u5177\u6709\u65f6\u6548\u6027\uff0c\u4e5f\u5c31\u662f\u6307\u5b83\u7684\u751f\u5b58\u5468\u671f\n')),(0,l.kt)("h3",{id:"582-\u4e3a\u4ec0\u4e48\u5b58\u5728\u751f\u547d\u5468\u671f\u6ce8\u91ca"},"5.8.2. \u4e3a\u4ec0\u4e48\u5b58\u5728\u751f\u547d\u5468\u671f\u6ce8\u91ca"),(0,l.kt)("p",null,"\u56e0\u4e3a\u5b58\u5728\u751f\u547d\u5468\u671f\u68c0\u67e5, \u751f\u547d\u5468\u671f\u6ce8\u91ca\u662f\u7528\u6765\u65b9\u4fbf\u7f16\u8bd1\u5668\u8fdb\u884c\u751f\u547d\u5468\u671f\u68c0\u67e5\u7684 , \u5e76\u4e0d\u80fd\u6539\u53d8\u4efb\u4f55\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u957f\u77ed"),(0,l.kt)("p",null,"\u4e3a\u4ec0\u4e48\u8981\u751f\u547d\u5468\u671f\u68c0\u67e5? \u56e0\u4e3a\u5b58\u5728\u5f15\u7528, \u56e0\u4e3a\u8981\u4fdd\u8bc1\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u4e0d\u80fd\u957f\u4e8e\u51fa\u501f\u65b9\u7684\u751f\u547d\u5468\u671f(\u9632\u6b62\u5782\u60ac\u5f15\u7528), \u6709\u5f15\u7528\u5c31\u4f1a\u6709\u751f\u547d\u5468\u671f\u68c0\u67e5 "),(0,l.kt)("p",null,"\u4e3a\u4ec0\u9700\u8981\u5f15\u7528\u5462? \u590d\u5408\u7c7b\u578b\u5982\u679c\u514b\u9686\u7684\u8bdd, \u4f1a\u6709\u6027\u80fd\u95ee\u9898, \u8fd9\u79cd\u60c5\u51b5, \u53ea\u80fd\u4f20\u9012\u5f15\u7528\u4e86."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u603b\u7ed3\u4e00\u4e0b\u5c31\u662f: \u51fd\u6570\u53c2\u6570\u53ef \u4ee5\u6309\u503c\u4f20\u9012\uff0c \u4e5f\u53ef\u4ee5\u6309 \u5f15 \u7528\u4f20\u9012\u3002\u5f53\u53c2\u6570\u6309\u503c \u4f20\u9012\u8098 \uff0c \u4f1a\u8f6c\u79fb\u6240\u6709\u6743\u6216\u8005\u6267\u884c\u590d\u5236( Copy)\u8bed\u4e49\u3002\u5f53\u53c2\u6570\u6309\u5f15\u7528\u4f20\u9012 \u65f6\uff0c \u6240\u6709\u6743\u4e0d\u4f1a\u53d1\u751f \u53d8\u5316 \uff0c\u4f46\u662f\u9700\u8981\u6709\u751f\u547d\u5468\u671f\u53c2\u6570 \u3002\u5f53 \u7b26\u5408\u751f\u547d\u5468\u671f\u53c2\u6570\u7701\u7565\u89c4 \u5219\u65f6\uff0c \u7f16\u8bd1\u5668\u53ef \u4ee5\u901a\u8fc7\u81ea\u52a8\u51c6 \u65ad\u8865\u9f50\u51fd\u6570\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u5426\u5219\uff0c\u9700\u8981\u663e\u5f0f\u5730\u4e3a\u53c2\u6570\u6807\u660e\u751f\u547d\u5468\u671f\u53c2\u6570")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'/// \u751f\u547d\u5468\u671f\u6ce8\u91ca: \u7528\u6765\u6807\u6ce8\u591a\u4e2a\u53d8\u91cf\u95f4\u751f\u547d\u5468\u671f\u7684\u5173\u7cfb, \u6bd4\u5982\u751f\u547d\u5468\u671f\u662f\u5426\u4e00\u6837\u957f\n/// \n/// \u76ee\u7684: \u907f\u514d\u5782\u60ac\u5f15\u7528\n/// \n/// \u751f\u547d\u5468\u671f\u6ce8\u91ca\u5e76\u4e0d\u6539\u53d8\u4efb\u4f55\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u7684\u957f\u77ed\n/// \u5355\u4e2a\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\u672c\u8eab\u6ca1\u6709\u591a\u5c11\u610f\u4e49\uff0c\u56e0\u4e3a\u751f\u547d\u5468\u671f\u6ce8\u89e3\u544a\u8bc9 Rust \u591a\u4e2a\u5f15\u7528\u7684\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\u5982\u4f55\u76f8\u4e92\u8054\u7cfb\u7684\n/// \n/// \u5927\u90e8\u5206\u60c5\u51b5, \u751f\u547d\u5468\u671f\u90fd\u662f\u53ef\u4ee5\u81ea\u52a8\u63a8\u65ad\u7684, \u5c31\u50cf\u7c7b\u578b\u63a8\u65ad , \u6ca1\u6cd5\u63a8\u65ad\u65f6, \u5c31\u9700\u8981\u624b\u52a8\u6807\u6ce8\u751f\u547d\u5468\u671f\u6ce8\u91ca\u4e86\n// \n// \u8bed\u6cd5: \n// &\u2019a i32\n// &\'a mut i32 \n/// \n/// \nfn life_cycle() {\n    // \u770b\u4e00\u4e2a\u6709\u95ee\u9898\u7684\u4f8b\u5b50:\n    let a;\n    {\n        let x = 1;\n        a = &x; // \u9519\u8bef, `x` does not live long enough, \u51fa\u4e86x \u4f5c\u7528\u57df, a \u5bf9 x \u7684\u501f\u7528\u5c31\u5931\u6548\u4e86\n    }\n    println!("{}", a);// \u6b64\u65f6 a \u53d8\u4e3a\u5782\u60ac\u5f15\u7528\n\n    &i32        // \u5e38\u89c4\u5f15\u7528\n    &\'a i32     // \u542b\u6709\u751f\u547d\u5468\u671f\u6ce8\u91ca\u7684\u5f15\u7528\n    &\'a mut i32 // \u53ef\u53d8\u578b\u542b\u6709\u751f\u547d\u5468\u671f\u6ce8\u91ca\u7684\u5f15\u7528\n    //\n\n    // \u53ea\u6709\u4e00\u4e2a\u53c2\u6570\u5e76\u4e14\u76f4\u63a5\u8fd4\u56de\u7684\u4f8b\u5b50\n    // \u56e0\u4e3a\u7f16\u8bd1\u5668\u53ef\u4ee5\u81ea\u5df1\u63a8\u5bfc\u51fa\u6765\uff0c\u51fd\u6570 foo() \u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u4ed6\u4eec\u7684\u751f\u547d\u5468\u671f\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\uff0c\u4e5f\u5c31\u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\n    fn foo (s: &mut String) -> &String {\n        s.push_str("coolshell");\n        s\n    }\n    let mut s = "hello, ".to_string();\n    println!("{}", foo(&mut s))\n\n    // \u8fd9\u4e2a\u4f8b\u5b50\u5c31\u4e0d\u884c\u4e86 , \u7f16\u8bd1\u5668\u65e0\u6cd5\u5728\u7f16\u8bd1\u671f\u95f4\u77e5\u9053\u4f1a\u8fd4\u56de\u54ea\u4e2a\u53d8\u91cf, \u4e5f\u5c31\u65e0\u6cd5\u81ea\u52a8\u63a8\u5bfc\u51fa\u751f\u547d\u5468\u671f\u662f\u5426\u7b26\u5408\u8981\u6c42\n    //\n    // \u8fd9\u4e2a\u9519\u8bef\u4f8b\u5b50\u53ea\u9488\u5bf9\u8fd4\u56de\u5f15\u7528\u7684\u60c5\u51b5\n    //\n    fn longer(s1: &str, s2: &str) -> &str {// error, \u8fd4\u56de\u7684\u5f15\u7528 \u53ef\u80fd\u548c\u53c2\u6570\u5b9a\u4e49\u7684\u5730\u65b9\u4e0d\u5728\u540c\u4e00\u4e2a\u4f5c\u7528\u57df, \u8fd4\u56de\u7684\u5f15\u7528\u5b69\u7838\u4f7f\u7528\u7684\u65f6\u5019, \u53c2\u6570\u8d85\u51fa\u4f5c\u7528\u57df\u800c\u5931\u6548\u4e86\n        if s1.len() > s2.len() {s1}\n        else {s2}\n    }\n    // \u6b63\u786e\u7684\u5199\u6cd5: \u9700\u8981\u624b\u52a8\u6307\u5b9a\u751f\u547d\u5468\u671f\u6ce8\u91ca\n    //\n    fn longer<\'a>(s1: &\'a str, s2: &\'a str) -> &\'a str {//\u51fd\u6570\u5b9a\u4e49\u6307\u5b9a\u4e86\u7b7e\u540d\u4e2d\u6240\u6709\u7684\u5f15\u7528\u5fc5\u987b\u6709\u76f8\u540c\u7684\u751f\u547d\u5468\u671f \'a\n    // \u52a0\u4e0a\u5468\u671f\u6ce8\u91ca\u5c31\u662f\u544a\u8bc9\u7f16\u8bd1\u5668: \u51fd\u6570\u8fd4\u56de\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f <= \u6bcf\u4e2a\u4f20\u5165\u53c2\u6570\u7684\u751f\u547d\u5468\u671f, \u5373\u8fd4\u56de\u503c\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d, \u662f\u5b89\u5168\u7684, \u4e0d\u4f1a\u6307\u5411\u7a7a\n        if s2.len() > s1.len() {\n            s2\n        } else {\n            s1\n        }\n    }\n    let r;\n    {\n        let s1 = "rust";\n        let s2 = "ecmascript";\n        r = longer(s1, s2);\n    }\n    println!("{} is longer", r); // \u6b64\u65f6 s1, s2 \u90fd\u9500\u6bc1\u4e86, \u4e3a\u4ec0\u4e48 r \u4ecd\u7136\u6709\u6548\u5462? \u56e0\u4e3a s1, s2 \u90fd\u662f &str \u7c7b\u578b, \u5206\u914d\u5728 \u6808\u4e2d, \u5728\u65b9\u6cd5\u9000\u51fa\u524d, \u90fd\u6709\u6548\n\n    //\u770b String \u7684\u4f8b\u5b50:\n    let string1 = String::from("long string is long");\n    let result;\n    {\n        let string2 = String::from("xyz"); // \u8fd9\u91cc\u5c31\u6709\u95ee\u9898\u4e86, String \u7c7b\u578b \u5b57\u7b26\u5e8f\u5217\u5206\u914d\u5728 heap, \u8d85\u51fa \u4f5c\u7528\u57df\u81ea\u884c\u9500\u6bc1\u4e86\n        result = longer(string1.as_str(), string2.as_str());// error, borrowed value does not live long enough\n                                                                //  string2 \u751f\u547d\u5468\u671f\u6bd4 result \u77ed\n    }\n    println!("The longest string is {}", result);\n\n\n    //\n    //\u52a0\u4e0d\u52a0 \'a \u90fd\u662f\u9519\u8bef, cannot return value referencing local variable `s`\n    // \u56e0\u4e3a\u51fd\u6570\u7ed3\u675f, s \u4f1a\u79bb\u5f00\u4f5c\u7528\u57df, \u88ab\u6e05\u7406\n    // \u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u8fd4\u56de\u4e00\u4e2a\u6709\u6240\u6709\u6743\u7684\u6570\u636e\u7c7b\u578b\u800c\u4e0d\u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u8fd9\u6837\u51fd\u6570\u8c03\u7528\u8005\u5c31\u9700\u8981\u8d1f\u8d23\u6e05\u7406\u8fd9\u4e2a\u503c\u4e86\u3002\n    //\n    fn as_str<\'a>(s: &\'a str) -> &\'a str {\n        let s = String::from("hello");\n        s.as_str() \n    }\n\n')),(0,l.kt)("h3",{id:"583-\u51fd\u6570\u4e2d\u7684\u751f\u547d\u5468\u671f\u53c2\u6570"},"5.8.3. \u51fd\u6570\u4e2d\u7684\u751f\u547d\u5468\u671f\u53c2\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"fn foo<\u2019a>(s: &\u2019a str, t: &\u2019a str) -> &\u2019a str\n// \u8f93\u51fa(\u501f\u7528\u65b9)\u7684\u751f\u547d\u5468\u671f\u957f\u5ea6\u5fc5\u987b \u77ed\u4e8e/\u7b49\u4e8e \u8f93\u5165(\u51fa\u501f\u65b9)\u7684\u751f\u547d\u5468\u671f\u957f\u5ea6\n// -\u300b\u8fd4\u56de\u7684\u5f15\u7528\u5fc5\u987b\u548c\u8f93\u5165\u53c2\u6570\u6709\u70b9\u5173\u7cfb\u624d\u884c\n\n")),(0,l.kt)("h3",{id:"584-\u7ed3\u6784\u4f53\u4e2d\u751f\u547d\u5468\u671f-\u7701\u7565\u7684\u89c4\u5219"},"5.8.4. \u7ed3\u6784\u4f53\u4e2d\u751f\u547d\u5468\u671f \u7701\u7565\u7684\u89c4\u5219"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// \u751f\u547d\u5468\u671f\u7701\u7565\n//\n// \u7701\u7565\u9075\u5faa\u7684\u89c4\u5219:\n// - \u53ea\u6709\u4e00\u4e2a\u751f\u547d\u5468\u671f\u53c2\u6570, \u53ef\u4ee5\u7701\u7565, \u5982 fn bar<'a>(x: &'a i32) -> &'a 32 \u7b49\u4ef7 fn bar(x: &i32) -> &i32\n// - \u6bcf\u4e2a\u5f15\u7528\u53c2\u6570\u90fd\u6709\u5c5e\u4e8e\u81ea\u5df1\u7684\u5468\u671f\u53c2\u6570, \u5982 fn foo<'a, 'b>(x: &'a i32, y: &'b i32), fn bar<'a>(x: &'a i32)\n// - \u5bf9\u4e8e struct \u7684\u65b9\u6cd5, \u7b2c\u4e00\u4e2a\u53c2\u6570\u90fd\u662f &self, \u90a3\u4e48 self \u7684\u5468\u671f\u88ab\u8d4b\u4e88\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f\u53c2\u6570 , \u6240\u4ee5 \u8fd4\u56de\u53c2\u6570\u53ef\u4ee5\u7701\u7565\u5468\u671f\u53c2\u6570\n    //\n    // \n    //\n    // \u52a0\u4e0a\u5468\u671f\u6ce8\u91ca, \u544a\u8bc9\u7f16\u8bd1\u5668, \u7ed3\u6784\u4f53\u7684\u751f\u547d\u5468\u671f <= \u6210\u5458\u5f15\u7528\u7684\u751f\u547d\u5468\u671f, \u5373\u6210\u5458\u7684\u5468\u671f\u8981\u4fdd\u8bc1\u7ed3\u6784\u4f53\u5468\u671f\u7684\u5b89\u5168, \u6210\u5458\u7684\u5468\u671f\u5fc5\u987b\u8981\u66f4\u5927\n    struct Str<'a> {\n        content: &'a str // \u4f7f\u7528\u5b57\u7b26\u4e32\u5207\u7247\u5f15\u7528, \u4e4b\u524d\u90fd\u662f\u4f7f\u7528\u7684 String \n    }\n    impl<'a> Str<'a> {\n        //\n        //\u8fd9\u91cc\u8fd4\u56de\u503c\u5e76\u6ca1\u6709\u751f\u547d\u5468\u671f\u6ce8\u91ca\uff0c\u4f46\u662f\u52a0\u4e0a\u4e5f\u65e0\u59a8\u3002\u8fd9\u662f\u4e00\u4e2a\u5386\u53f2\u95ee\u9898\uff0c\u65e9\n        //\u671f Rust \u4e0d\u652f\u6301\u751f\u547d\u5468\u671f\u81ea\u52a8\u5224\u65ad\uff0c\u6240\u6709\u7684\u751f\u547d\u5468\u671f\u5fc5\u987b\u4e25\u683c\u58f0\u660e\uff0c\u4f46\u4e3b\u6d41\n        //\u7a33\u5b9a\u7248\u672c\u7684 Rust \u5df2\u7ecf\u652f\u6301\u4e86\u8fd9\u4e2a\u529f\u80fd\n        fn get_content(&self) -> &str {\n            self.content\n        }\n\n        //\u6307\u5b9a: \u7ed3\u6784\u4f53\u65b9\u6cd5\u7684\u201c\u5f15\u7528\u53c2\u6570\u201d\u7684\u751f\u547d\u5468\u671f >= \u7ed3\u6784\u4f53\u7684\u751f\u547d\u5468\u671f, \u4fdd\u8bc1\u7ed3\u6784\u4f53\u5468\u671f\u7684\u5b89\u5168\n        // \u82e5\u6ca1\u6709 \u2018a, \u4f1a\u62a5\u9519\n        fn replate(&mut self, new: &'a str) {...}\n    }\n    let s = Str {\n        content: \"string_slice\" // \u65b9\u4fbf\u591a\u4e86\n    };\n    println!(\"s.content = {}\", s.get_content());\n\n   \n}\n\n\n")),(0,l.kt)("h3",{id:"585-\u9759\u6001\u751f\u547d\u5468\u671f\u6ce8\u91ca"},"5.8.5. \u9759\u6001\u751f\u547d\u5468\u671f\u6ce8\u91ca"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"}," //\u9759\u6001\u751f\u547d\u5468\u671f\n    //\n    //'static \u6240\u8868\u793a\u7684\u751f\u547d\u5468\u671f\u4ece\u7a0b\u5e8f\u8fd0\u884c\u5f00\u59cb\u5230\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f\u3002(\u82e5\u4e00\u4e2a\u7c7b\u578b\u88ab\u9650\u5236\u4e3a 'static ,\u5219\u8868\u793a\u8be5\u7c7b\u578b\u4e0d\u80fd\u662f\u4efb\u4f55\u501f\u7528\u7684\u6570\u636e, \u5fc5\u987b\u662f own \u7684\u6570\u636e, \u5fc5\u987b\u62e5\u6709ownership; \u56e0\u4e3a 'static \u8bf4\u660e\u4ed6\u7684 lifecycle \u6700\u957f, \u82e5\u8be5\u7c7b\u578b\u63a5\u6536\u7684\u662f\u501f\u7528\u7684\u6570\u636e, \u90a3\u4e48\u65e0\u6cd5\u4fdd\u8bc1 lifecycle \u6700\u957f)\n    //\n    //\u6240\u6709\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u90fd\u662f &'static str \uff0c\n    let s: &'static str = \"hello\";\n    // \u7b49\u4ef7\n    let s = \"hello\";\n\n    //\u4e00\u4e2a\u7efc\u5408\u4f8b\u5b50\ud83c\udf30\n    use std::fmt::Display;\n    fn longest_with_an_announcement<'a, T>(x: &'a str, y: &'a str, ann: T) -> &'a str\n        where T: Display\n    {\n        println!(\"Announcement! {}\", ann);\n        if x.len() > y.len() {\n            x\n        } else {\n            y\n        }\n    }\n")),(0,l.kt)("h3",{id:"586-\u751f\u547d\u5468\u671f\u7ea6\u675f"},"5.8.6. \u751f\u547d\u5468\u671f\u7ea6\u675f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// T:\u2019a\uff0c \u8868\u793aT\u7c7b\u578b\u4e2d\u7684\u4efb\u4f55\u5f15\u7528\u90fd\u8981\u201c\u6d3b\u5f97\u201d \u548c \u2019a \u4e00\u6837\u957f\u3002\n// T: Trait + \u2018a\uff0c\u8868\u793a T\u7c7b\u578b\u5fc5\u987b\u5b9e\u73b0 Trait\u8fd9\u4e2a trait\uff0c\u5e76\u4e14 T\u7c7b\u578b\u4e2d\u4efb\u4f55\u5f15\u7528\u90fd\u8981\u201c\u6d3b\u5f97\u201d\u548c \u2019a \u4e00\u6837\u957f\u3002\n\n")),(0,l.kt)("h2",{id:"59-\u5f15\u7528"},"5.9. \u5f15\u7528"),(0,l.kt)("h3",{id:"591-\u5f15\u7528\u57fa\u672c\u4ecb\u7ecd"},"5.9.1. \u5f15\u7528\u57fa\u672c\u4ecb\u7ecd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n/// \u501f\u7528(\u5f15\u7528)\n/// "&"\u7b26\u53f7\u7528\u4e8e\u4ece\u53d8\u91cf\u501f\u7528\u6240\u6709\u6743, \u751f\u6210\u4e00\u4e2a\u53d8\u91cf\u7684\u5f15\u7528\n/// ref \u58f0\u660e\u67d0\u4e2a\u53d8\u91cf\u4e3a\u5f15\u7528\u7c7b\u578b, \u7528\u6765\u66f4\u6539\u8d4b\u503c\u884c\u4e3a, \u4f7f\u5f97\u666e\u901a\u7684\u53d8\u91cf\u8d4b\u503c\u884c\u4e3a\u53d8\u4e3a\u7ed9\u5f15\u7528\u8d4b\u503c ; \u53ef\u7528\u4e8e\u5148\u58f0\u660e\u67d0\u4e2a\u5f15\u7528\u7c7b\u578b, \u540e\u8d4b\u503c\n/// \n///\n///\n/// \u5f15\u7528\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u7c7b\u578b\u5e76\u5177\u6709\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u8bb0\u5f55\u7684\u662f\u522b\u7684\u503c\u6240\u5728\u7684\u4f4d\u7f6e\n///\n/// \u5f15\u7528\u4e0d\u4f1a\u83b7\u5f97\u503c\u7684\u6240\u6709\u6743, \u5f15\u7528\u53ea\u80fd\u79df\u501f\uff08Borrow\uff09\u503c\u7684\u6240\u6709\u6743, \u6240\u4ee5 \u53d8\u91cf a \u7684\u503c\u88ab\u501f\u7528\u4e3a b \u65f6\uff0ca \u672c\u8eab\u4ecd\u7136\u6709\u6548\u3002\n/// \n/// \u89e3\u5f15\u7528 \u4f7f\u7528 * ---- \u5728\u7b49\u53f7\u53f3\u8fb9 (\u4f1a\u83b7\u5f97\u539f\u59cb\u503c\u7684\u6240\u6709\u6743)\n/// \u53d6\u5730\u5740 \u4f7f\u7528 & ---- \u5728\u7b49\u53f3\u8fb9\n/// \u89e3\u6784 \u4f7f\u7528 & --- \u5728\u7b49\u53f7\u5de6\u8fb9\n/// \n/// match\u7684\u6a21\u5f0f\u5339\u914d\u7684\u5339\u914d\u9879\u4e0a\u53ea\u80fd\u4f7f\u7528 ref\uff0c\n/// \u5728\u51fd\u6570\u58f0\u660e\u4e0a\u53ea\u80fd\u4f7f\u7528&\u6765\u8868\u793a\u5f15\u7528\u7c7b\u578b\n/// \n/// \u4e00\u4e2a\u5f15\u7528\u7684\u4f5c\u7528\u57df\u4ece\u58f0\u660e\u7684\u5730\u65b9\u5f00\u59cb\u4e00\u76f4\u6301\u7eed\u5230\u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e3a\u6b62\n/// \n/// \u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u95f4\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\n\n// \n/// \u5206\u4e3a\u53ef\u53d8, \u4e0d\u53ef\u53d8\u5f15\u7528\n// \n// \u4e00\u4e2a\u539f\u59cb\u503c, \u5b58\u5728\u53ef\u53d8\u501f\u7528, \u5c31\u65e0\u6cd5\u5b58\u5728\u5176\u4ed6\u501f\u7528\u4e86, \u65e0\u8bba\u662f\u53ef\u53d8\u501f\u7528\u8fd8\u662f\u4e0d\u53ef\u53d8\u501f\u7528 (\u53ef\u53d8\u501f\u7528\u5177\u6709\u72ec\u5360\u6027)\n// \u5b58\u5728\u4e0d\u53ef\u53d8\u501f\u7528, \u8fd8\u80fd\u5b58\u5728\u5176\u4ed6\u4e0d\u53ef\u53d8\u501f\u7528 (\u76f8\u5f53\u4e8e\u5185\u5b58\u7684\u8bfb\u5199\u9501 \uff0c\u540c\u4e00\u65f6\u523b\uff0c\u53ea\u80fd \u62e5\u6709\u4e00\u4e2a\u5199\u9501\uff0c\u6216\u8005\u591a\u4e2a\u8bfb\u9501\uff0c\u4e0d\u80fd\u540c\u65f6\u62e5\u6709)\n/// \nlet a = 20;  \nlet b = &a;  // \u53d6\u5730\u5740\nif a==*b  // true  , *\u53f7\u4e3a\u89e3\u5f15\u7528\u7b26\u53f7\n{  \nprintln!("a and *b are equal");  // \u5c06\u6253\u5370\u8fd9\u53e5\n}  \n\nelse  \n{  \nprintln!("they are not equal");  \n}  \n\n\n\n\n    //\n    //\n    // ref \u5173\u952e\u5b57\n    //\n    let ref a=2;\n    let a = &2; // \u7b49\u6548, \u4e24\u4e2a\u503c\u90fd\u662f&i32\u7c7b\u578b\n\n    let ref b: i32; // \u5148\u58f0\u660e\u4e00\u4e2a\u5f15\u7528\u7c7b\u578b\n    //b = 1;// \u9519\u8bef, \u7c7b\u578b\u4e0d\u5339\u914d, expected `&i32`, found integer. expected &i32\uff0cconsider borrowing here: `&1`\n    b = &1;// \u518d\u8d4b\u503c\n    //\n    // \u4e3a\u53c2\u6570\u58f0\u660e\u7c7b\u578b\u7684\u65f6\u5019, \u53ea\u80fd\u7528 &, \u4e0d\u80fd\u7528 ref, ref \u53ea\u7528\u4e8e\u53d8\u91cf\u7c7b\u578b\u58f0\u660e\n    //\n    struct B<\'l> {\n        pub a: &\'l u32,\n        pub b: ref u32, //\u9519\u8bef, expected type, found keyword `ref`\n    }\n    let ref a = &1;\n    let b = B{ a: a };\n\n    fn test(a: ref i32) {    } // \u9519\u8bef\n\n\n    let v = 2;\n    let mut v_mut = 2;\n    match v {\n        // ref \u4f1a\u58f0\u660e val \u662f &i32 \u7c7b\u578b, \u901a\u8fc7 val \u63a5\u6536 v\n        ref val => println!("val \u662f\u5f15\u7528, val = {}", val),// \u6253\u5370, *val \u4e5f\u53ef, \u6253\u5370\u65f6\u53ef\u4ee5\u7701\u7565 *\n    }\n    match v_mut {\n        ref mut val => {\n            // \u9700\u8981 val \u58f0\u660e\u4e3a mut\n            *val = 3; \n            println!("val \u662f\u53ef\u53d8\u5f15\u7528, val = {}", val);\n        },\n    }\n\n\n\n\n\n    // \u89e3\u5f15\u7528\n    let r=&1;// r \u662f\u5f15\u7528\u7c7b\u578b &i32\n    let &a=r;// a \u662f\u666e\u901a\u7c7b\u578b, i32\n    let c=*r; // c \u540c a, \u662f i32 (\u89e3\u5f15\u7528)\n\n\n    //\n    // match \u4e2d\u4f7f\u7528\u89e3\u5f15\u7528\n    let r = &1;\n    match r {\n        &val => println!("\u901a\u8fc7\u89e3\u5f15\u7528\u83b7\u53d6\u503c: {}", val), \n    }\n\n    \n    match r {\n        *val => println!("\u4f7f\u7528 * \u89e3\u5f15\u7528: {}", val),// \u9519\u8bef, * \u4e0d\u80fd\u7528\u6765\u505a\u58f0\u660e\n    }\n    // \u9700\u8981\u5148\u89e3\u5f15\u7528, \u518d\u5185\u90e8\u4f7f\u7528\n    match *r {\n        val => println!("\u5339\u914d\u524d\u5148\u89e3\u5f15\u7528: {}", val),\n    }\n    \n\n\n    std::mem:size_of<&[u32; 5]>() //\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u7c7b\u578b\u7684\u5b57\u8282\u6570\n    // &[u32;5]\u7c7b\u578b\u4e3a\u666e\u901a\u6307\u9488 (\u56e0\u4e3a\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b, \u5143\u7d20\u4e2a\u6570\u786e\u5b9a\u4e86, \u65e0\u9700\u989d\u5916\u7684\u5bb9\u91cf\u6765\u5b58\u50a8\u6570\u636e\u7684\u957f\u5ea6)\uff0c\u53608\u4e2a\u5b57\u8282:\n    // &mut[u32]\u7c7b\u578b\u4e3a\u80d6\u6307\u9488 (\u5bbd\u5ea6\u662f\u53cc\u5bbd\u5ea6\u7684, \u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u786e\u5b9a, \u9664\u4e86\u8981\u4fdd\u5b58\u6307\u5411\u8d77\u59cb\u4f4d\u7f6e\u7684\u5730\u5740\u5916, \u8fd8\u8981\u4fdd\u5b58\u6570\u636e\u7684\u957f\u5ea6  )\uff0c\u536016 \u4e2a\u5b57\u8282\u3002 \u53ef\u89c1\uff0c \u6574\u6574\u591a\u51fa\u4e86\u4e00\u500d\u7684\u5360\u7528\u7a7a\u95f4\uff0c\u8fd9\u4e5f\u662f\u79f0\u5176\u4e3a\u80d6\u6307\u9488\u7684\u539f\u56e0\n\n\n}\n\n')),(0,l.kt)("h3",{id:"592-\u4e0d\u53ef\u53d8\u5f15\u7528"},"5.9.2. \u4e0d\u53ef\u53d8\u5f15\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'println!("------------------\u5f15\u7528/\u501f\u7528---------------------------");\n    let s1 = String::from("hello");\n    let s2 = &s1; // \u83b7\u53d6\u5f15\u7528\n    println!("s1 is {}, s2 is {}", s1, s2);\n\n    // \u51fd\u6570\u8c03\u7528\n    fn calculate_length(s: &String) -> usize {\n        s.len()\n    }\n    let s1 = String::from("hello");\n    let len = calculate_length(&s1);\n    println!("The length of \'{}\' is {}.", s1, len);// s1 \u8fd8\u6709\u6548\n\n    let s1 = String::from("hello");\n    let s2 = &s1;\n    // \u9519\u8bef, \u6267\u884c\u8fd9\u53e5, s1 \u4f1a\u79fb\u52a8\u800c\u5931\u6548\n    // \u9020\u6210 s2 \u5bf9 s1 \u7684\u79df\u501f\u4e5f\u5931\u6548\n    let s3 = s1;\n    println!("{}", s2);//error\n\n    let s1 = String::from("hello");\n    let mut s2 = &s1;\n    let s3 = s1;\n    s2 = &s3; // // \u91cd\u65b0\u4ece s3 \u79df\u501f\u6240\u6709\u6743, \u8981\u6c42 s2 \u662f mut \u7684\n    println!("s2 = {}", s2);\n\n    //\n    // \u5f15\u7528\u7684\u6240\u6709\u6743\u662f\u79df\u501f\u7684, \u4e0d\u5141\u8bb8\u4fee\u6539\u503c\n    //\n    let s1 = String::from("run");\n    let s2 = &s1;\n    println!("{}", s2);\n    s2.push_str("oob"); // \u9519\u8bef\uff0c\u7981\u6b62\u4fee\u6539\u79df\u501f\u7684\u503c\n\n')),(0,l.kt)("h3",{id:"593-\u53ef\u53d8\u5f15\u7528"},"5.9.3. \u53ef\u53d8\u5f15\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n\nfn borrow() {\n    \n\n    //\n    //\u53ef\u53d8\u5f15\u7528\n    //\n    // \u53ef\u4fee\u6539\u503c\u7684\u79df\u501f\n    let mut s1 = String::from("run");\n    // s1 \u662f\u53ef\u53d8\u7684\n    let s2 = &mut s1;\n    // s2 \u662f\u53ef\u53d8\u7684\u5f15\u7528\n    s2.push_str("oob");\n    println!("\u53ef\u53d8\u5f15\u7528, s2 = {}", s2);//runoob\n    println!("s1 = {}", s1);//runoob\n\n    //\n    //\u53ef\u53d8\u5f15\u7528\u4e0d\u5141\u8bb8\u591a\u91cd\u5f15\u7528\n    //\n    //\u4e00\u4e2a\u503c\u88ab\u53ef\u53d8\u5f15\u7528\u65f6\u4e0d\u5141\u8bb8\u518d\u6b21\u88ab\u4efb\u4f55\u5f15\u7528\u3002\n    // \u4e3b\u8981\u51fa\u4e8e\u5bf9\u5e76\u53d1\u72b6\u6001\u4e0b\u53d1\u751f\u6570\u636e\u8bbf\u95ee\u78b0\u649e\u7684\u8003\u8651\uff0c\u5728\u7f16\u8bd1\u9636\u6bb5\u5c31\u907f\u514d\u4e86\u8fd9\u79cd\u4e8b\u60c5\u7684\u53d1\u751f\n    let mut s = String::from("hello");\n    let r1 = &mut s;\n    // \u9519\u8bef, \u56e0\u4e3a \u4e24\u4e2a\u53ef\u53d8\u5f15\u7528\u6307\u5411\u4e86 s;\n    let r2 = &mut s;\n\n    // \u7c7b\u4f3c\u7684\u591a\u91cd\u5f15\u7528\u95ee\u9898\n    //\n    let mut s = String::from("hello");\n    let r1 = &s; // \u6ca1\u95ee\u9898\n    let r3 = &mut s; // \u5927\u95ee\u9898\n    println!("{}", r1);\n\n\n')),(0,l.kt)("h3",{id:"594-\u5782\u60ac\u5f15\u7528\u95ee\u9898dangling-references"},"5.9.4. \u5782\u60ac\u5f15\u7528\u95ee\u9898\uff08Dangling References)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n\n    //\n    //\u5782\u60ac\u5f15\u7528\uff08Dangling References\uff09---- \u5982\u4f55\u89e3\u51b3 -> \u751f\u547d\u5468\u671f\u6ce8\u91ca\n    //\n    //\n    // \u5782\u60ac\u5f15\u7528\uff08Dangling References): \u6ca1\u6709\u5b9e\u9645\u6307\u5411\u4e00\u4e2a\u771f\u6b63\u80fd\u8bbf\u95ee\u7684\u6570\u636e\u7684\u6307\u9488\n    //\n    //\u5728 Rust \u8bed\u8a00\u91cc\u4e0d\u5141\u8bb8\u51fa\u73b0\n    fn dangle() -> &String {\n        let s = String::from("hello");\n        //\u51fd\u6570\u7684\u7ed3\u675f\uff0c\u5176\u5c40\u90e8\u53d8\u91cf\u7684\u503c\u672c\u8eab\u6ca1\u6709\u88ab\u5f53\u4f5c\u8fd4\u56de\u503c\uff0c\u88ab\u91ca\u653e\u4e86\u3002\u4f46\u5b83\u7684\u5f15\u7528\u5374\u88ab\u8fd4\u56de\n        &s\n    }\n    \n    // \u518d\u6bd4\u5982:\n    //\n    let r;\n    {\n        let x = 3;\n        r = &x; //`x` does not live long enough,  r \u6240\u5f15\u7528\u7684\u503c\u5df2\u7ecf\u5728\u4f7f\u7528\u4e4b\u524d\u88ab\u91ca\u653e\n    }\n    println!("r = {}", r);\n    //\n    // \u518d\u6bd4\u5982:\n    fn longer(s1: &str, s2: &str) -> &str {\n        if s2.len() > s1.len() {\n            s2\n        } else {\n            s1\n        }\n    }\n    // //\u4e0a\u4e2a\u51fd\u6570\u9519\u8bef, \u65e0\u6cd5\u7f16\u8bd1, \u539f\u56e0\u662f\u8fd4\u56de\u503c\u5f15\u7528\u53ef\u80fd\u4f1a\u8fd4\u56de\u8fc7\u671f\u7684\u5f15\u7528, \u4f8b\u5982\u8fd9\u6837\u4f7f\u7528:\n    let r;\n    {\n        let s1 = "rust";\n        let s2 = "ecmascript";\n        r = longer(s1, s2);\n    }\n    println!("{} is longer", r); // r \u88ab\u4f7f\u7528\u7684\u65f6\u5019\u6e90\u503c s1 \u548c s2 \u90fd\u5df2\u7ecf\u5931\u6548\u4e86, \u9700\u8981\u4f7f\u7528\u751f\u547d\u5468\u671f\u6ce8\u91ca, \u4e3a\u8fd4\u56de\u503c\u58f0\u660e\u4e00\u4e2a\u6ce8\u91ca, \u8d34\u5230 \u53c2\u6570\u4e0a\n\n\n\n\n\n\n\n')),(0,l.kt)("h2",{id:"510-\u88f8\u6307\u9488"},"5.10. \u88f8\u6307\u9488"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u539f\u751f \u6307\u9488\u662f\u6307\u5f62\u5982* const T \u548c*mut T \u8fd9\u6837\u7684\u7c7b\u578b \u3002\n// \u53ef\u4ee5\u901a\u8fc7 as\u64cd\u4f5c\u7b26\u968f\u610f\u8f6c\u6362\u4e3a\u539f\u751f\u6307\u9488\uff0c\u4f8b\u5982 &T as *constT \u548c &mut T as *mutT\u3002\n\n\n// \u573a\u666f:\n// - \u5728\u9700\u8981\u7684\u65f6\u5019\u8df3\u8fc7 Rust \u5b89\u5168\u68c0\u67e5\n// - \u4e0e C \u8bed\u8a00\u201c\u6253\u4ea4\u9053"\n\n\n// \u5185\u7f6e\u51fd\u6570\n// \u2022 std::ptr::null \u51fd\u6570\u548c is_null \u65b9\u6cd5 \n// \u2022 offset\u65b9\u6cd5\n// \u2022 read/write\u65b9\u6cd5\n// \u2022 replace/swap \u65b9\u6cd5\n\n\n\n// \u89e3\u5f15\u7528\n// \nfn main() {\n    let mut s = "hello".to_string();\n    // \u8f6c\u6362\n    let r1 = &s as *const String;\n    let r2 = &mut s as *mut String;\n    assert_eq!(r1, r2);\n    \n    let address = 0x7fff1d72307d;// \u968f\u4fbf\u6307\u5b9a\u7684\u5730\u5740\n    let r3 = address as *const String;\n    unsafe {\n        println!("r1 is: {}", *r1);\n       println!("r2 is: {}", *r2);\n    //    error\n       // Segmentation fault  \n       assert_eq!(*r1, *r3)\n   }\n}\n\n\n// \u521b\u5efa\nfn main() {\n    // \u521b\u5efa\u7a7a\u6307\u9488\n    let p: *const u8 = std::ptr::null();\n    // \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u6307\u9488\n    assert!(p.is_null());\n\n    let s: &str = "hello";\n    // \u83b7\u5f97\u4e0d\u53ef\u53d8\u539f\u751f\u6307\u9488 (\u6307\u5411\u5177\u4f53\u6570\u636e/\u6570\u636e\u5185\u90e8\u7684\u5143\u7d20)\n    // \u6307\u9488 ptr \u7684\u7c7b\u578b\u4e3a*const u8\uff0c \u8fd9 \u662f\u56e0\u4e3a\u5b57\u7b26\u4e32\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u5b58\u50a8\u7684\n    let ptr: *const u8 = s.as_ptr();\n    assert!(!ptr.is_null());\n\n    //\u5bf9\u6bd4 \u901a\u8fc7 as_ptr()\u83b7\u53d6\u6307\u9488:\n    // - \u901a\u8fc7 as_ptr \u5f97\u5230\u7684\u6307\u9488\u662f\u6307\u5411\u5b58\u653e\u6570\u636e\u5806/\u6808 \u5185\u5b58\u7684\u6307\u9488\uff0c\u800c\u5f15\u7528\u5219\u662f\u5bf9\u5b57\u7b26\u4e32\u6216\u6570\u7ec4\u672c\u8eab\u7684\u5f15\u7528(\u6bd4\u524d\u8005\u5355\u7eaf\u7684\u6307\u9488\u5305\u542b\u66f4\u591a\u6570\u636e)\u3002\n    let mut x = "";\n   let y = &mut x as *mut &str;\n   unsafe {\n       assert_eq!(y.read(), "hello");\n   }\n    \n    let mut s = [1, 2, 3];\n    // \u83b7\u5f97\u53ef\u53d8\u539f\u751f\u6307\u9488\n    let ptr: *mut u32 = s.as_mut_ptr();\n    assert!(!ptr.is_null());\n}\n\n\n\n// offset() \u53ef\u4ee5\u6307\u5b9a\u76f8\u5bf9\u4e8e\u6307\u9488\u5730\u5740\u7684\u504f\u79fb\u5b57\u8282\u6570\uff0c\n// \n// \nfn main() {\n    let s: &str = "Rust";\n    let ptr: *const u8 = s.as_ptr();\n    // offset\u65b9\u6cd5\u4e0d\u80fd\u4fdd\u8bc1\u4f20\u5165\u7684\u504f\u79fb\u91cf\u5408\u6cd5\uff0c\u6545\u4e3aunsafe\n    unsafe {\n        println!("{:?}", *ptr.offset(1) as char); // u\n        println!("{:?}", *ptr.offset(3) as char); // t\n        println!("{:?}", *ptr.offset(255) as char); // \xff \u6709UB\u98ce\u9669\n    }\n}\n\n\n\n// read/write  \u53ef\u4ee5\u8bfb\u53d6\u6216\u5199\u5165\u6307\u9488\u76f8\u5e94 \u5185\u5b58\u4e2d\u7684 \u5185\u5bb9\n// \nfn main() {\n    let x = "hello".to_string();\n    let y: *const u8 = x.as_ptr();\n    unsafe {\n        assert_eq!(y.read() as char, \'h\');\n    }\n    let x = [0, 1, 2, 3];\n    // \u8fd9\u91cc\u7684\u539f\u751f\u6307\u9488\u7c7b \u578b\u662f\u5e26\u957f\u5ea6\u7684\uff0c\n    // \u5982\u679c\u5c06\u7c7b\u578b\u6539\u4e3a* const [u32;3] \uff0c\u5219\u901a\u8fc7 read \u65b9\u6cd5\u53ea\u80fd\u8bfb\u53d6\u5230\u524d\u4e09\u4e2a\u5143\u7d20\n    let y = x[0..].as_ptr() as *const [u32; 4];\n    unsafe {\n       assert_eq!(y.read(), [0,1,2,3]);\n   }\n   let x = vec![0, 1, 2, 3];\n   let y = &x as *const Vec<i32>;\n   unsafe {\n        assert_eq!(y.read(), [0,1,2,3]);\n   }\n   let mut x = "";\n   let y = &mut x as *mut &str;\n   let z = "hello";\n   unsafe {\n       y.write(z);\n       assert_eq!(y.read(), "hello");\n   }\n}\n\n\n\n\n// replace/swap   \u66ff\u6362\u6307\u5b9a\u4f4d\u7f6e \u7684\u5185\u5b58 \u6570\u636e\n// \nfn main() {\n   let mut v: Vec<i32> = vec![1, 2];\n   let v_ptr : *mut i32 = v.as_mut_ptr();\n   unsafe{\n       let old_v = v_ptr.replace(5);\n       assert_eq!(1, old_v);\n       assert_eq!([5, 2], &v[..]);    \n   }\n   let mut v: Vec<i32> = vec![1, 2];\n  let v_ptr  = &mut v as *mut Vec<i32>;\n  unsafe{\n      let old_v = v_ptr.replace(vec![3,4,5]);\n      assert_eq!([1, 2], &old_v[..]);\n      assert_eq!([3, 4, 5], &v[..]);   \n  }\n  let mut array = [0, 1, 2, 3];\n  let x = array[0..].as_mut_ptr() as *mut [u32; 2];\n  let y = array[1..].as_mut_ptr() as *mut [u32; 2];\n  unsafe {\n      assert_eq!([0, 1], x.read());\n      assert_eq!([1, 2], y.read());\n      x.swap(y);\n      assert_eq!([1, 0, 1, 3], array);\n  }\n}\n')),(0,l.kt)("h2",{id:"511-\u667a\u80fd\u6307\u9488"},"5.11. \u667a\u80fd\u6307\u9488"),(0,l.kt)("h3",{id:"5111-\u667a\u80fd\u6307\u9488\u4ecb\u7ecd-\u5de5\u4f5c\u673a\u5236"},"5.11.1. \u667a\u80fd\u6307\u9488\u4ecb\u7ecd \u5de5\u4f5c\u673a\u5236"),(0,l.kt)("p",null,"\u667a\u80fd\u6307\u9488\u5c31\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5176\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u5f15\u7528, \u6307\u5411\u4e00\u5757\u5185\u5b58\u7684\u5730\u5740, \u6b64\u5916\u8fd8\u6709\u5b58\u50a8\u7684\u6709\u9644\u5e26\u7684\u5143\u6570\u636e"),(0,l.kt)("p",null,"\u667a\u80fd\u6307\u9488\u533a\u522b\u4e8e\u5e38\u89c4\u7ed3\u6784\u4f53\u7684\u7279\u6027\u5728\u4e8e\uff0c\u5b83\u5b9e\u73b0\u4e86 Deref (\u6240\u4ee5\u6709\u4e86\u6307\u9488\u8bed\u4e49, \u800c\u4e14\u4f7f\u7528\u65f6, \u53ef\u4ee5\u81ea\u52a8\u89e3\u5f15\u7528) \u548c Drop (\u6240\u4ee5\u80fd\u591f\u81ea\u52a8\u7ba1\u7406\u5185\u5b58\u91ca\u653e) ; \u6bd4\u5982: String \u548c Vec \u7c7b\u578b \u4e5f\u662f\u4e00\u79cd\u667a\u80fd\u6307\u9488, \u5b83\u4eec\u4e5f\u90fd\u5b9e\u73b0\u4e86 Deref\u548cDrop (\u8fd9\u5c31\u662f\u667a\u80fd\u6307\u9488\u667a\u80fd\u7684\u6240\u5728)"),(0,l.kt)("p",null,"\u667a\u80fd\u6307\u9488\u62e5\u6709\u8d44\u6e90\u7684\u6240\u6709\u6743\uff0c\u800c\u666e\u901a\u5f15\u7528 \u53ea \u662f\u5bf9\u6240\u6709\u6743 \u7684\u501f\u7528 \u3002"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u7ebf\u7a0b\u5b89\u5168\u7684: Arc, RwLock, Mutex"),(0,l.kt)("li",{parentName:"ul"},"\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684: Box , Cell, RefCell, Rc")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"let x =Box::new(\u201dhello\u201d);\nlet y = x;\n// error, \u56e0\u4e3a\u667a\u80fd\u6307\u9488\u62e5\u6709\u539f\u59cb\u503c\u7684\u6240\u6709\u6743, x\u5df2\u7ecf\u88ab\u8f6c\u79fb\u4e86\n// \u5bf9\u4e8ebox<T>, \u82e5\u5305\u542b\u7684 T\u662f\u79fb\u52a8\u8bed\u4e49, \u5219box \u4e5f\u662f, \u82e5T\u662f\u590d\u5236\u8bed\u4e49, \u5219box \u4e5f\u662f\u590d\u5236\u8bed\u4e49\nprintln1(\u201d(:?}\u201d, x);\n")),(0,l.kt)("h3",{id:"5112-raii\u673a\u5236-\u5b9e\u73b0\u5185\u5b58\u56de\u6536"},"5.11.2. RAII\u673a\u5236 \u5b9e\u73b0\u5185\u5b58\u56de\u6536"),(0,l.kt)("p",null,"RAII: \u667a\u80fd\u6307\u9488\u5728\u5806\u5185\u5b58\u4e0a\u5f00\u8f9f\u7a7a\u95f4\u5b58\u50a8\u6570\u636e, \u81ea\u8eab\u5b58\u50a8\u5728\u6808\u4e0a, \u5728\u51fd\u6570\u8c03\u7528\u7ed3\u675f\u65f6, \u6307\u9488\u53d8\u91cf\u88ab\u6e05\u7406, \u6307\u9488\u6267\u884c\u81ea\u8eab\u7684drop\u65b9\u6cd5, \u6765\u91ca\u653e\u667a \u80fd\u6307\u9488\u6240\u7ba1\u7406\u7684\u5806\u5185\u5b58 \u7a7a\u95f4"),(0,l.kt)("p",null,"RAII , \u667a\u80fd\u6307\u9488, \u5747\u8d77\u6e90\u4e8e\u73b0\u4ee3 C++"),(0,l.kt)("h3",{id:"5113-\u81ea\u5b9a\u4e49\u667a\u80fd\u6307\u9488-\u81ea\u52a8\u89e3\u5f15\u7528-deref-\u548c-drop"},"5.11.3. \u81ea\u5b9a\u4e49\u667a\u80fd\u6307\u9488 \u81ea\u52a8\u89e3\u5f15\u7528 Deref \u548c Drop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n\u624b\u52a8\u663e\u5f0f\u89e3\u5f15\u7528: *x  <=>   *(x.deref()), deref() \u662f\u7f16\u8bd1\u5668\u5e2e\u5fd9\u52a0\u7684 (deref() \u8fd4\u56de\u5185\u90e8\u6570\u636e\u7684\u5f15\u7528)\n\n"."\u8c03\u7528 or \u5728\u51fd\u6570\u53c2\u6570\u4f4d\u7f6e\u4e0a, \u4f1a\u5bf9x \u81ea\u52a8\u89e3\u5f15\u7528, \u7b49\u4ef7\u4e8e x.deref()\n    \n\n    // \u81ea\u5b9a\u4e49\u667a\u80fd\u6307\u9488\n    //\n    struct MyBox<T>(T);\n    impl<T> MyBox<T> {\n        fn new(x: T) -> MyBox<T> {\n            MyBox(x)\n        }\n    }\n    //\u5b9e\u73b0 Deref trait \u5141\u8bb8\u6211\u4eec\u91cd\u8f7d \u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\n    use std::ops::Deref;\n    impl<T> Deref for MyBox<T> {\n        type Target = T;\n\n        fn deref(&self) -> &T {\n            &self.0\n        }\n    }\n    let x = 5;\n    let y = MyBox::new(x);\n    println!("y = {}", *y);\n\n\n\n\n    // \u9690\u5f0f\u89e3\u5f15\u7528 (\u89e3\u5f15\u7528\u591a\u6001)\n    fn hello(name: &str) {\n        println!("Hello, {}!", name);\n    }\n    let m = MyBox::new(String::from("Rust"));\n    hello(&m);\n    //\u5728 MyBox<T> \u4e0a\u5b9e\u73b0\u4e86 Deref trait\uff0cRust \u53ef\u4ee5\u901a\u8fc7 deref \u8c03\u7528\u5c06 &MyBox<String> \u53d8\u4e3a &String\u3002\n    //\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u4e86 String \u4e0a\u7684 Deref \u5b9e\u73b0\uff0c\u5176\u4f1a\u8fd4\u56de\u5b57\u7b26\u4e32 slice\uff0c\u8fd9\u53ef\u4ee5\u5728 Deref \u7684 API \u6587\u6863\u4e2d\u770b\u5230\u3002\n    //Rust \u518d\u6b21\u8c03\u7528 deref \u5c06 &String \u53d8\u4e3a &str\uff0c\u8fd9\u5c31\u7b26\u5408 hello \u51fd\u6570\u7684\u5b9a\u4e49\u4e86\u3002\n\n\n')),(0,l.kt)("h3",{id:"5114-box-\u65e0\u75db\u4f7f\u7528\u5806\u5185\u5b58"},"5.11.4. Box \u65e0\u75db\u4f7f\u7528\u5806\u5185\u5b58"),(0,l.kt)("h4",{id:"51141-box\u57fa\u672c\u4f7f\u7528"},"5.11.4.1. Box\u57fa\u672c\u4f7f\u7528"),(0,l.kt)("p",null,"\u7c7b\u4f3c cpp \u7684 unique_ptr;"),(0,l.kt)("p",null,"\u901a\u8fc7 Box\uff0c\u7528\u4e8e\u5728\u5806\u4e0a\u5206\u914d\u503c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// \n// \u4e3a\u4ec0\u4e48\u4f7f\u7528\n// Rust \u4e2d\u7684\u503c\u9ed8\u8ba4\u88ab\u5206\u914d\u5230stack\u5185\u5b58, stack \u5185\u5b58\u9700\u8981\u77e5\u9053\u503c\u7684\u5177\u4f53\u5927\u5c0f, \u5bf9\u4e8e \u9012\u5f52\u7c7b\u578b \u548c trait object, \u7f16\u8bd1\u65f6\u5e76\u4e0d\u77e5\u9053\u5927\u5c0f, \u800c Box<T> \u7684\u5927\u5c0f\u662f\u5df2\u77e5\u7684\u3002 \u53ef\u4ee5\u901a\u8fc7 Box <T>\u5c06\u503c\u88c5\u7bb1, \u5728\u5806\u5185\u5b58\u4e2d\u5206\u914d\n// \n///\u6838\u5fc3\u4f5c\u7528\u5c31\u662f\u53ef\u4ee5\u5b9a\u4e49\u52a8\u6001\u5927\u5c0f\u7684\u7c7b\u578b, \u5b9e\u9645\u5927\u5c0f\u8981\u5230\u8fd0\u884c\u671f\u624d\u80fd\u786e\u5b9a, \u5982 \u7528\u5728 \u9012\u5f52\u4e2d and \u7528\u5728\u5305\u88c5 trait \u4e2d \n// \n/// \u5f53\u7bb1\u5b50\u5b9e\u4f8b\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u5b83\u7684\u6790\u6784\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\uff0c\u5185\u90e8\u7684\u5bf9\u8c61\u4f1a\u88ab \u9500\u6bc1\uff0c\u5806\u4e0a\u5206\u914d\u7684\u5185\u5b58\u4e5f\u4f1a\u88ab\u91ca\u653e\n// \n//  Box<T>\u6307\u9488\u5bf9\u6240\u7ba1\u7406\u7684\u5806\u5185\u5b58\u6709\u552f\u4e00\u62e5\u6709\u6743\uff0c \u6240\u4ee5\u5e76\u4e0d\u5171\u4eab\n/// \n/// \u4f7f\u7528 * \u8fd0\u7b97\u7b26\u8fdb\u884c\u89e3\u5f15\u7528\uff1b\u8fd9\u4f1a\u79fb\u9664\u6389\u4e00\u5c42\u88c5\u7bb1\n///\nfn box_demo() {\n    println!("-------------box_demo--------------");\n    let b = Box::new(5);//\u4f7f\u7528 box \u5728\u5806\u4e0a\u50a8\u5b58\u4e00\u4e2a i32 \u503c\n    println!("b = {}", b);//5\n    println!("*b = {}", *b);//5\n\n    // \u5c1d\u8bd5\u6784\u9020\u94fe\u8868\n    enum List {\n        Cons(i32, List),// error, \u65e0\u9650\u9012\u5f52, \u7f16\u8bd1\u5668\u68c0\u6d4b\u51fa\u4e86\u65e0\u9650\u5927\u5c0f\n        Nil,\n    }\n    // \u6b63\u786e: (\u8fd9\u79cd\u65b9\u6cd5\u5b58\u5728\u9650\u5236, \u6784\u9020\u51fa\u7684 \u94fe\u8868\u65e0\u6cd5\u5b58\u5728\u591a\u4e2a\u5f15\u7528, \u4f7f\u7528\u4e00\u6b21\u5c31\u5931\u6548\u4e86, \u6ca1\u6cd5\u7ed9\u7b2c\u4e8c\u4e2a\u4f7f\u7528\u8005\u4f7f\u7528\u4e86, \u89e3\u51b3: Rc)\n    #[derive(Debug)]\n    enum List {\n        Cons(i32, Box<List>),\n        Nil,\n    }\n    use List::Cons;\n    use List::Nil;\n    let l = Cons(\n        1,\n        Box::new(Cons(\n            2,\n            Box::new(Cons(\n                3,\n                Box::new(Nil),\n            ))\n        ))\n    );\n    println!("{:?}", l);//Cons(1, Cons(2, Cons(3, Nil)))\n\n')),(0,l.kt)("h4",{id:"51142-\u5305\u88c5\u52a8\u6001\u5927\u5c0f\u7c7b\u578b-dst"},"5.11.4.2. \u5305\u88c5\u52a8\u6001\u5927\u5c0f\u7c7b\u578b DST"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"    // \u52a8\u6001\u5927\u5c0f\u7c7b\u578b\n    // \u7f16\u8bd1\u671f\u95f4\u65e0\u6cd5\u77e5\u9053\u5927\u5c0f, \u53ea\u6709\u5230\u8fd0\u884c\u65f6\u624d\u77e5\u9053\n    //\n    // \u52a8\u6001\u5927\u5c0f\u7c7b\u578b\u7684\u503c\u5fc5\u987b\u901a\u8fc7\u6307\u9488\u8bbf\u95ee , \u5982 Box<str>, Rc<str>\n    //\n    //\n    // \u5982:\n    // - str \u5728\u7f16\u8bd1\u671f\u65e0\u6cd5\u77e5\u9053\u5927\u5c0f, &str \u7684\u5927\u5c0f\u53ef\u4ee5\u5728\u7f16\u8bd1\u671f\u77e5\u9053 (&str \u5b58\u50a8\u4e86 str \u7684\u5730\u5740 \u548c\u957f\u5ea6)\n    // - trait , \u4efb\u4f55 trait \u90fd\u662f\u52a8\u6001\u5927\u5c0f\u7c7b\u578b, \u5e94\u8be5\u8fd9\u4e48\u4f7f\u7528: Box<XXXTrait>\n    //\n    // Sized trait\n    // \u5b9e\u73b0\u4e86\u8fd9\u4e2a trait \u7684\u7c7b\u578b, \u5728\u7f16\u8bd1\u671f\u5373\u53ef\u786e\u5b9a\u5927\u5c0f\n    fn xxx_fn<T>(t: T) {} // T \u4e3a\u7f16\u8bd1\u671f\u77e5\u9053\u5927\u5c0f\u7684\u7c7b\u578b\n    // \u7b49\u4ef7:\n    fn xxx_fn<T: Sized>(t: T) {}\n    // \u653e\u5bbd\u9650\u5236\n    fn xxx_fn<T: ?Sized>(t:T) {}// T \u53ef\u80fd\u662f sized \u7684, \u4e5f\u53ef\u80fd\u4e0d\u662f sized \u7684\n}\n\n\n\n")),(0,l.kt)("h3",{id:"5115-rc-\u548c-weak-\u5171\u4eab\u5806\u5185\u5b58"},"5.11.5. Rc \u548c Weak \u5171\u4eab\u5806\u5185\u5b58"),(0,l.kt)("h4",{id:"51151-rc-\u5f3a\u5f15\u7528"},"5.11.5.1. Rc \u5f3a\u5f15\u7528"),(0,l.kt)("p",null,"\u7c7b\u4f3c cpp \u7684 shared_ptr"),(0,l.kt)("p",null,"\u5f15\u7528\u8ba1\u6570\u6307\u9488, \u5176\u6570\u636e\u53ef\u4ee5\u6709\u591a\u4e2a\u6240\u6709\u8005, \u5185\u90e8\u5305\u542b\u7684\u6570\u636e\u662f\u4e0d\u53ef\u53d8\u7684,"),(0,l.kt)("p",null,"\u53ea\u80fd\u7528\u4e8e\u5355\u7ebf\u7a0b\u4e2d, \u56e0\u4e3a\u5185\u90e8\u64cd\u4f5c\u4e0d\u662f\u539f\u5b50\u6027\u7684, rust \u4e5f\u4e3a \u5176\u5b9e\u73b0\u4e86 !send trait , \u8868\u793a\u65e0\u6cd5\u5728\u7ebf\u7a0b\u95f4\u79fb\u52a8; \u53ef\u4ee5\u4f7f\u7528\u591a\u7ebf\u7a0b\u7248\u672c: Arc"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'/// Rc<T> \u7684\u7c7b\u578b\u3002\u5176\u540d\u79f0\u4e3a \u5f15\u7528\u8ba1\u6570\uff08reference counting\uff09\n// \n// Rc<T> \u4e3b\u8981\u7528\u4e8e\u540c\u4e00\u5806\u4e0a\u6240\u5206\u914d\u7684\u6570\u636e\u533a\u57df\u9700\u8981\u6709\u591a\u4e2a\u53ea\u8bfb\u8bbf\u95ee\u7684\u60c5\u51b5, \u6bd4\u8d77\u4f7f\u7528 Box<T> \u7136\u540e\u521b\u5efa\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u65b9\u6cd5\u66f4\u4f18\u96c5\u4e5f\u66f4\u76f4\u89c2\u4e00\u4e9b\n// \n/// \u5141\u8bb8 "\u4e0d\u53ef\u53d8\u6570\u636e" \u6709\u591a\u4e2a\u6240\u6709\u8005, \u6570\u636e\u672c\u8eab\u65e0\u6cd5\u4fee\u6539 (\u5c06\u591a\u4e2a\u6240\u6709\u6743\u5171\u4eab\u7ed9\u591a\u4e2a\u53d8\u91cf)\n// \n// \u5185\u90e8\u7ef4\u62a4\u7740\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u5668\uff0c\u6bcfclone\u4e00\u6b21(\u5171\u4eab\u4e00\u6b21)\uff0c \u8ba1\u6570\u5668\u52a01, \u8fd4\u56de\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c \u5f53\u5b83\u4eec\u90fd\u79bb\u5f00\u4f5c\u7528\u57df\u8098\uff0c \u8ba1 \u6570\u5668\u4f1a\u88ab\u6e05\u96f6\uff0c\u5bf9\u5e94\u7684\u5806\u5185\u5b58\u4e5f\u4f1a\u88ab\u81ea\u52a8\u91ca\u653e\u3002\n// \n// \u5e38\u7528\u65b9\u6cd5:\n// \n// \n// \n// \n// \n///\nlet x =Rc::new(45)\nlet yl = x .clone() ; //\u589e\u52a0\u5f3a\u5f15\u7528\u8ba1\u6570, \u5e76\u975e \u514b\u9686, \u53ea\u662f\u589e\u52a0\u8ba1\u6570, \u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528 (\u5373\u5171\u4eab\u6240\u6709\u6743)\nlet y2 = x.clone(); //\u589e\u52a0\u5f3a\u5f15\u7528\u8ba1\u6570\npri\u03b7tln!(\u201d{:?}\u201d, Rc::strong_count(&x));//3\nletw= Rc::downgrade(&x); //\u589e\u52a0\u5f31\u5f15\u7528\u8ba1\u6570\nprintln!(\u201d {:?) \u201d, Rc : :weak_count(&x));\nlet y3 = &*x; //\u4e0d\u589e\u52a0\u8ba1\u6570\n')),(0,l.kt)("h4",{id:"51152-\u6784\u9020\u94fe\u8868"},"5.11.5.2. \u6784\u9020\u94fe\u8868"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// \n// \u901a\u8fc7 box \u6784\u9020\u94fe\u8868\u5b58\u5728\u95ee\u9898: \u94fe\u8868\u53ea\u80fd\u88ab\u4f7f\u7528\u4e00\u6b21, \u6f14\u793a:\nenum List {\n    Cons(i32, Box<List>),\n    Nil,\n}\nuse List::{Cons, Nil};\nlet a = Cons(5,\n                Box::new(Cons(10,\n                            Box::new(Nil))));\nlet b = Cons(3, Box::new(a)); //a \u88ab\u79fb\u52a8\u5230\u4e86 b \u5185\u90e8\nlet c = Cons(4, Box::new(a));//  error \u9519\u8bef, value used here after move\n\n// \u4f7f\u7528 Rc \u89e3\u51b3\nenum List {\n    Cons(i32, Rc<List>),\n    Nil,\n}\nuse List::{Cons, Nil};\nuse std::rc::Rc;\nlet a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));\n//\u6bcf\u6b21\u8c03\u7528 Rc::clone\uff0cRc<List> \u4e2d\u6570\u636e\u7684\u5f15\u7528\u8ba1\u6570\u90fd\u4f1a\u589e\u52a0\uff0cRc::strong_count(&a) \u83b7\u53d6 a \u7684\u88ab\u5f15\u7528\u4e2a\u6570\n// \u76f4\u5230\u6709\u96f6\u4e2a\u5f15\u7528\u4e4b\u524d\u5176\u6570\u636e\u90fd\u4e0d\u4f1a\u88ab\u6e05\u7406\n//\n//\u4e5f\u53ef\u4ee5\u8c03\u7528 a.clone() \u800c\u4e0d\u662f Rc::clone(&a), \u4e24\u8005\u610f\u601d\u662f\u4e00\u6837\u7684, \u53ea\u4f1a\u589e\u52a0\u5f15\u7528\u8ba1\u6570\uff0c\u4e0d\u4f1a\u4f5c\u6df1\u5ea6\u590d\u5236\n//\n// \u8fd9\u91cc, b, c \u5171\u4eab a \u7684\u6240\u6709\u6743, a \u4e2d\u7684\u6570\u636e\u4e0d\u53ef\u4fee\u6539\nlet b = Cons(3, Rc::clone(&a));\nlet c = Cons(4, Rc::clone(&a));\n\n\n\n// #### \u5bf9\u5185\u90e8\u503c\u8fdb\u884c\u4fee\u6539\n///\n///\u5982\u679c\u4f60\u8981\u4fee\u6539 Rc \u91cc\u7684\u503c\uff0cRust \u4f1a\u7ed9\u4f60\u4e24\u4e2a\u65b9\u6cd5\uff0c\u4e00\u4e2a\u662f get_mut()\uff0c\u4e00\u4e2a\u662f make_mut() \uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u90fd\u6709\u526f\u4f5c\u7528\u6216\u662f\u9650\u5236\n/// - get_mut() \u9700\u8981\u505a\u4e00\u4e2a\u201c\u552f\u4e00\u5f15\u7528\u201d\u7684\u68c0\u67e5\uff0c\u4e5f\u5c31\u662f\u6ca1\u6709\u4efb\u4f55\u7684\u5171\u4eab\u624d\u80fd\u4fee\u6539\n///- make_mut() \u5219\u662f\u4f1a\u628a\u5f53\u524d\u7684\u5f15\u7528\u7ed9clone\u51fa\u6765\uff0c\u518d\u4e5f\u4e0d\u5171\u4eab\u4e86\uff0c \u662f\u4e00\u4efd\u5168\u65b0\u7684\n// \u66f4\u597d\u7684\u4fee\u6539\u65b9\u6cd5:\n/// RefCell<T> \u80fd\u591f\u5728\u5bf9\u8c61\u88ab\u8ba4\u4e3a\u662f\u4e0d\u53ef\u53d8\u7684\u60c5\u51b5\u4e0b\u4fee\u6539\u5185\u90e8\u5b57\u6bb5; (\u5e76\u975e\u7f16\u8bd1\u5668\u68c0\u67e5, \u4e8c\u662f\u8fd0\u884c\u671f\u8fdb\u884c\u68c0\u67e5, \u4e0d\u662f\u5f88\u597d)\n/// Cell<T>\uff0c\u5b83\u7c7b\u4f3c RefCell<T> \u4f46\u6709\u4e00\u70b9\u9664\u5916\uff1a\u5b83\u5e76\u975e\u63d0\u4f9b\u5185\u90e8\u503c\u7684\u5f15\u7528\uff0c\u800c\u662f\u628a\u503c\u62f7\u8d1d\u8fdb\u548c\u62f7\u8d1d\u51fa Cell<T>\u3002\n///\n/// \n//\n//\u4fee\u6539\u5f15\u7528\u7684\u53d8\u91cf - get_mut \u4f1a\u8fd4\u56de\u4e00\u4e2aOption\u5bf9\u8c61\n//\u4f46\u662f\u9700\u8981\u6ce8\u610f\uff0c\u4ec5\u5f53\uff08\u53ea\u6709\u4e00\u4e2a\u5f3a\u5f15\u7528 && \u6ca1\u6709\u5f31\u5f15\u7528\uff09\u4e3a\u771f\u624d\u80fd\u4fee\u6539\nif let Some(val) = Rc::get_mut(&mut strong) {\n    *val = 555;\n}\n// \u6216\u8005:\n//\u6b64\u5904\u53ef\u4ee5\u4fee\u6539\uff0c\u4f46\u662f\u662f\u4ee5 clone \u7684\u65b9\u5f0f\uff0c\u4e5f\u5c31\u662f\u8ba9strong\u8fd9\u4e2a\u6307\u9488\u72ec\u7acb\u51fa\u6765\u4e86\u3002\n*Rc::make_mut(&mut strong) = 555;\n\n\n")),(0,l.kt)("h4",{id:"51153-weak-\u5f31\u5f15\u7528"},"5.11.5.3. Weak \u5f31\u5f15\u7528"),(0,l.kt)("p",null,"\u7c7b\u4f3c cpp \u7684 weak_ptr"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n\n\n// \u5f31\u5f15\u7528\n\n/// \u5f31\u5f15\u7528: Weak<T>\n// Weak \u5171\u4eab\u7684\u6307\u9488\u6ca1\u6709\u6240\u6709\u6743, \u79f0\u4e3a\u5f31\u5f15\u7528\n/// - \u901a\u8fc7 Rc::downgrade \u4f20\u9012 Rc \u5b9e\u4f8b\u7684 reference, \u5f97\u5230 Weak \u7c7b\u578b\u7684\u6307\u9488, \u540c\u65f6\u5c06 weak_count +1, \u4e0d\u662f strong_count +1\n/// - \u5373\u4f7f weak_count \u4e0d\u4e3a\u96f6, \u4e5f\u53ef\u80fd\u4f7f\u5f97 Rc \u5b9e\u4f8b\u88ab\u6e05\u7406, \u53ea\u8981 strong_count == 0 \u5c31\u884c\u4e86 (\u89e3\u51b3\u5faa\u73af\u94fe\u8868\u9020\u6210\u7684\u5185\u5b58\u6cc4\u6f0f)\n/// - \u53ef\u4ee5\u901a\u8fc7 Rc::upgrade \u8fd4\u56de Option<Rc<T>> \u5347\u7ea7\u6210\u5f3a\u5f15\u7528\n///\n/// \u8fd9\u4e48\u9ebb\u70e6\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u8fd8\u8981 Weak ? \u8fd9\u662f\u56e0\u4e3a\u5f3a\u5f15\u7528\u7684 Rc \u4f1a\u6709\u5faa\u73af\u5f15\u7528\u7684\u95ee\u9898\u2026\u2026\n\n// \u57fa\u672c\u4f7f\u7528\nuse std::rc::Rc;\nuse std::rc::Weak;\n\nlet weak: Weak<i32>;\nlet strong: Rc<i32>;\n{\n    let five = Rc::new(5); //\u5c40\u90e8\u53d8\u91cf\n    strong = five.clone(); //\u8fdb\u884c\u5f3a\u5f15\u7528\n    weak = Rc::downgrade(&five); //\u5bf9\u5c40\u90e8\u53d8\u91cf\u8fdb\u884c\u5f31\u5f15\u7528\n}\n//\u6b64\u65f6\uff0cfive\u5df2\u6790\u6784\uff0c\u6240\u4ee5 Rc::strong_count(&strong)=1\uff0c Rc::weak_count(&strong)=1\n\n//\u5982\u679c\u8c03\u7528 drop(strong)\uff0c\u90a3\u4e2a\u6574\u4e2a\u5185\u5b58\u5c31\u91ca\u653e\u4e86\n//drop(strong);\n\n//\u5982\u679c\u8981\u8bbf\u95ee\u5f31\u5f15\u7528\u7684\u503c\uff0c\u9700\u8981\u628a\u5f31\u5f15\u7528 upgrade \u6210\u5f3a\u5f15\u7528\uff0c\u624d\u80fd\u5b89\u5168\u7684\u4f7f\u7528\n//\u8fd9\u4e2a\u5347\u7ea7\u53ef\u80fd\u4f1a\u4e0d\u6210\u529f\uff0c\u56e0\u4e3a\u5185\u5b58\u53ef\u80fd\u5df2\u7ecf\u88ab\u522b\u4eba\u6e05\u7a7a\u4e86\nmatch  weak_five.upgrade() {\n    Some(r) => println!("{}", r),\n    None => println!("None"),\n\n}\n\n// \u89e3\u51b3\u5faa\u73af\u5f15\u7528\u7684\u5185\u5b58\u6cc4\u6f0f\u95ee\u9898\nuse std::{\n    cell::RefCell,\n    rc::{Rc, Weak},\n};\nfn main() {\n    struct Node {\n        head: Option<Weak<RefCell<Node>>>,\n        next: Option<Rc<RefCell<Node>>>,\n    }\n    impl Drop for Node {\n        fn drop(&mut self) {\n            println!("dropping")\n        }\n    }\n\n    let one = Rc::new(RefCell::new(Node {\n        head: None,\n        next: None,\n    }));\n    let two = Rc::new(RefCell::new(Node {\n        head: None,\n        next: None,\n    }));\n    let three = Rc::new(RefCell::new(Node {\n        head: None,\n        next: None,\n    }));\n    one.borrow_mut().next = Some(two.clone());\n    two.borrow_mut().next = Some(three.clone());\n    three.borrow_mut().head = Some(Rc::downgrade(&one));// \u5f31\u5f15\u7528, \u5373\u4f7f\u8ba1\u6570\u6ca1\u6709\u5f52\u96f6, \u4ecd\u7136\u53ef\u56de\u6536\u5185\u5b58\n}\n\n\n\n    \n\n')),(0,l.kt)("h3",{id:"5116-refcell-\u548c-cell-\u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027"},"5.11.6. RefCell \u548c Cell \u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027"),(0,l.kt)("p",null,"\u5185\u90e8\u53ef\u53d8\u6027: \u5c06\u53ef\u53d8\u7684\u6570\u636e\u5305\u88c5\u5728\u4e0d\u53ef\u53d8\u7684\u7ed3\u6784\u4e2d, \u800c\u65e0\u9700\u663e\u5f0f\u58f0\u660e mut"),(0,l.kt)("p",null,"\u9700\u8981\u6ce8\u610f\u7684\u662f Cell \u548c RefCell \u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\u5728\u591a\u7ebf\u7a0b\u4e0b\uff0c\u9700\u8981\u4f7f\u7528Mutex\u8fdb\u884c\u4e92\u65a5\u3002"),(0,l.kt)("h4",{id:"51161-cell"},"5.11.6.1. Cell"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// Cell<T>\n// \n// \u89c4\u907f borrow check: Cell<T> \u5176\u5b9e\u548c Box<T> \u5f88\u50cf\uff0c\u4f46\u540e\u8005\u540c\u65f6\u4e0d\u5141\u8bb8\u5b58\u5728\u591a\u4e2a\u5bf9\u5176\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u5982\u679c\u6211\u4eec\u771f\u7684\u5f88\u60f3\u505a\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u5728\u9700\u8981\u7684\u65f6\u5019\u968f\u65f6\u6539\u53d8\u5176\u5185\u90e8\u7684\u6570\u636e\uff0c\u800c\u4e0d\u53bb\u8003\u8651 Rust \u4e2d\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u7ea6\u675f\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 Cell<T>\u3002Cell<T> \u5141\u8bb8\u591a\u4e2a\u5171\u4eab\u5f15\u7528\u5bf9\u5176\u5185\u90e8\u503c\u8fdb\u884c\u66f4\u6539\uff0c\u5b9e\u73b0\u4e86\u300c\u5185\u90e8\u53ef\u53d8\u6027\u300d\n// \n// \u63d0\u4f9b\u4e86\u4e00\u79cd\u5185\u90e8\u53ef\u53d8\u6027, \u5982, \u67d0\u4e2a struct \u662f\u4e0d\u53ef\u53d8\u7684, \u4f46\u662f \u5185\u90e8\u67d0\u4e2a\u5b57\u6bb5\u9700\u8981\u53ef\u53d8\n\n    #[derive(Debug)]\n    struct P {\n        x: i32,\n        y: Cell<i32>,// \u8fd9\u91cc\u5b9a\u4e49\u7684\u662f Cell\u7684\u4e0d\u53ef\u53d8\u7c7b\u578b, \u4f46\u662f \u5185\u90e8\u7684\u6570\u786e\u5b9e\u53ef\u4ee5\u4fee\u6539\u7684, \u5408\u6cd5\u7684\u907f\u5f00\u7684\u501f\u7528\u68c0\u67e5\n    }\n    let p = P { x: 0, y: Cell::new(11)};\n    println!("{:?}", p);\n    p.y.set(1); // set() \u5bf9\u5185\u90e8\u6570\u636e\u7684\u7c7b\u578b\u6ca1\u6709\u8981\u6c42\n    println!("{}", p.y.get());// \u5185\u90e8\u7684\u6570\u636e\u5fc5\u987b\u662f copy trait \u624d\u80fd\u4f7f\u7528 get(), \u8fd9\u91cc\u5b9e\u9645\u662f\u83b7\u53d6\u62f7\u8d1d, \n                        //  \u82e5\u662f\u975e copy\u7c7b\u578b, \u63d0\u4f9b get_mut() \u83b7\u53d6\u5185\u90e8\u6570\u636e\u7684\u53ef\u53d8\u5f15\u7528\n    println!("{:?}", p);\n\n')),(0,l.kt)("h4",{id:"51162-refcell"},"5.11.6.2. RefCell"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n/// RefCell<T>\n/// \u5b83\u7c7b\u4f3c Cell<T>,  \u4f46\u6709\u4e00\u70b9\u9664\u5916\uff1a\u63d0\u4f9b\u5185\u90e8\u503c\u7684\u5f15\u7528, \u800c\u4e0d\u662f\u62f7\u8d1d\u4e86, \u56e0\u6b64\u5bf9\u4e8e\u5185\u90e8\u6570\u636e\u7684\u7c7b\u578b\u6ca1\u6709 copy trait \u8981\u6c42 (Cell \u7684\u5185\u90e8\u6570\u636e\u6709 copy trait \u8981\u6c42)\n// \n// \u65e2\u7136\u4e0d\u80fd\u5728\u8bfb\u5199\u6570\u636e\u65f6\u7b80\u5355\u7684 Copy \u51fa\u6765\u8fdb\u53bb\u4e86\uff0c\u8be5\u548b\u4fdd\u8bc1\u5185\u5b58\u5b89\u5168\u5462?\n// \n//      borrow chec \u653e\u5230\u4e86\u8fd0\u884c\u65f6\n//      \u867d\u7136\u6ca1\u6709\u5206\u914d\u7a7a\u95f4\uff0c \u4f46\u5b83\u662f\u6709\u8fd0\u884c\u65f6\u5f00\u9500\u7684\uff0c\u56e0\u4e3a\u5b83\u81ea\u5df1\u7ef4\u62a4\u7740\u4e00\u4e2a\u8fd0\u884c\u65f6\u501f\u7528\u68c0\u67e5\u5668, \u6bd4\u5982\u83b7\u53d6\u591a\u4e2a\u53ef\u53d8\u5f15\u7528, \u4f1aPanic\n// \n// \u4e3b\u8981\u4e24\u4e2a\u65b9\u6cd5:\n// borrow_mut() \u83b7\u53d6\u53ef\u53d8\u5f15\u7528 (RefMut<T>)\n// borrow(), \u83b7\u53d6\u4e0d\u53ef\u53d8\u5f15\u7528 (Mut<T>)\n// \n// refcell \u66f4\u5e38\u7528, \u7701\u5185\u5b58, cell \u7684 get() \u662f\u83b7\u53d6\u62f7\u8d1d, \u6d6a\u8d39\u5185\u5b58\n// \n    let v = RefCell::new(vec![1]);\n    println!("{:?}", v.borrow());//1\n    v.borrow_mut().push(1);\n    println!("{:?}", v.borrow());//1, 1\n\n\n    let x = RefCell::new(vec![1, 2, 3, 4]);\n    println!("{:?}", *x.borrow()); //[1, 2, 3, 4]\n    {\n        let mut my_ref = x.borrow_mut();\n        my_ref.push(1);\n    }\n    // \u82e5\u4e0a\u9762\u7684\u53ef\u53d8\u501f\u7528\u4e0d\u53e6\u5f00\u4e00\u4e2a \u4f5c\u7528\u57df, \u8fd9\u91cc\u62a5\u9519: \u53ef\u53d8\u501f\u7528\u540e, \u4e0d\u5141\u8bb8\u518d\u6b21\u4e0d\u53ef\u53d8\u501f\u7528\u4e86\n    // \u53e6\u5f00\u4e00\u4e2a\u4f5c\u7528\u57df\u7684\u6548\u679c: my_ref \u8fd9\u4e2a\u53ef\u53d8\u501f\u7528\u5230\u8fd9\u91cc\u7684\u65f6\u5019\u5df2\u7ecf\u88ab\u91ca\u653e\u4e86\n    println!("{:?}", *x.borrow()); //[1, 2, 3, 4, 1]\n\n\n\n    // RefCell<T> \u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u4e0e Rc<T> \u7ed3\u5408\u6784\u9020\u94fe\u8868, rc \u5141\u8bb8\u591a\u91cd\u5f15\u7528, \u62b1\u5728\u5916\u5c42, refcel \u83b7\u53d6\u53ef\u53d8\u5f15\u7528\n    //\n    //\u4ed6\u4eec\u63d0\u4f9b\u4e86 set()/get() \u4ee5\u53ca borrow()/borrow_mut() \u7684\u65b9\u6cd5\n    //\n    #[derive(Debug)]\n    enum List1 {\n        Cons(Rc<RefCell<i32>>, Rc<List1>),\n        Nil,\n    }\n    use List1::{Cons, Nil};\n    let value = Rc::new(RefCell::new(5));\n    let a = Rc::new(Cons(Rc::clone(&value), Rc::new(Nil)));\n    let b = Cons(Rc::new(RefCell::new(6)), Rc::clone(&a));\n    let c = Cons(Rc::new(RefCell::new(10)), Rc::clone(&a));\n    *value.borrow_mut() += 10;\n    println!("a after = {:?}", a);\n    println!("b after = {:?}", b);\n    println!("c after = {:?}", c);\n\n\n\n\n\n\n// \u5b9e\u4f8b:\n// \u5b9a\u4e49\u4e00\u4e2a trait, \u5b9a\u4e49\u53d1\u9001\u65b9\u6cd5 send, \u8fd9\u91cc self \u662f\u4e0d\u53ef\u53d8\u7684\n// \u540e\u7eed\u4f1a\u901a\u8fc7 \u8fd9\u4e2a\u4e0d\u53ef\u53d8 self \u5f97\u5230\u53ef\u53d8\u7684\u6210\u5458\u53d8\u91cf\n    trait MsgSender {\n        fn send(&self, msg: &str); // \u8fd9\u4e2a trait \u5df2\u7ecf\u56fa\u5b9a, &self \u4e0d\u5141\u8bb8\u6539\u6210 &mut self\n    }\n    // \u76d1\u63a7\u5668\n    struct LimitTracker<\'a, S: MsgSender> {\n        sender: &\'a S,\n        max: usize, // \u6700\u5927\u9650\u91cf\u9608\u503c\n        value: usize, // \u5df2\u7ecf\u4f7f\u7528\u4e86\u591a\u5c11\n    }\n    impl<\'a, T> LimitTracker<\'a, T>\n    where\n        T: MsgSender,\n    {\n        fn new(sender: &\'a T, max: usize) -> Self {\n            LimitTracker {\n                sender,\n                max,\n                value: 0,\n            }\n        }\n\n        fn set_value(&mut self, value: usize) {\n            self.value = value;\n\n            let percent = self.value as f64 / self.max as f64;\n            if percent >= 1.0 {\n                self.sender.send(">= 1.0");\n            } else if percent >= 0.8 {\n                self.sender.send(">= 0.8");\n            }\n        }\n    }\n\n    use std::cell::RefCell;\n    //\u6d88\u606f\u53d1\u9001\u6a21\u62df\u5668\n    struct MsgSenderMock {\n        // \u4e3a\u4ec0\u4e48\u8981\u5305\u88c5?\n        //\u540e\u9762\u9700\u8981\u901a\u8fc7 \u4e0d\u53ef\u53d8\u7684 &self \u62ff\u5230\u53ef\u53d8\u7684 msg_send (\u4e0d\u53ef\u53d8 &self \u662f\u5728 trait \u4e2d\u5b9a\u4e49\u7684, send\u65b9\u6cd5\u83b7\u53d6\u7684\u662f self\u4e0d\u53ef\u53d8\u5f15\u7528)\n        //\u5982\u679c\u4e0d\u5305\u88c5\u4e00\u4e0b, \u5219\u8fd9\u91cc\u65e0\u6cd5\u4fee\u6539 msg_send \u6765\u8bb0\u5f55\u53d1\u9001\u7684\u6d88\u606f\n        msg_send: RefCell<Vec<String>>,// \u8bb0\u5f55\u53d1\u9001\u7684\u4fe1\u606f, \u53d1\u9001\u7684\u6d88\u606f\u4f1a\u5b58\u50a8\u5230\u8fd9\u91cc\n    }\n    impl MsgSenderMock {\n        fn new() -> Self {\n            MsgSenderMock {\n                msg_send: RefCell::new(vec![]),\n            }\n        }\n    }\n    impl MsgSender for MsgSenderMock {\n        fn send(&self, msg: &str) {\n            // \u6539\u4e3a refcell\u540e, \u901a\u8fc7 borrow_mut \u5f97\u5230\u53ef\u53d8\u5f15\u7528, \u7c7b\u578b Ref, \u7c7b\u4f3c\u666e\u901a\u5f15\u7528\n            self.msg_send.borrow_mut().push(msg.to_string());\n        }\n    }\n    // \u6d4b\u8bd5\n    let mock_sender = MsgSenderMock::new();\n    let mut tracker = LimitTracker::new(&mock_sender, 10);\n    tracker.set_value(8);\n    println!("{}", mock_sender.msg_send.borrow()[0]); // \u83b7\u53d6\u4e0d\u53ef\u53d8\u5f15\u7528\n')),(0,l.kt)("h3",{id:"5117-rc-box-refcell-cell-\u51e0\u79cd\u6307\u9488\u7684\u533a\u522b\u5bf9\u6bd4-\u7ec4\u5408\u4f7f\u7528"},"5.11.7. Rc Box RefCell Cell \u51e0\u79cd\u6307\u9488\u7684\u533a\u522b\u5bf9\u6bd4 \u7ec4\u5408\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n/// \u533a\u522b:\n/// - owner \u4e2a\u6570: Rc<T> \u5141\u8bb8\u6570\u636e\u6709\u591a\u4e2a\u6240\u6709\u8005\uff1bBox<T> \u548c RefCell<T> \u53ea\u80fd\u5141\u8bb8\u6709\u5355\u4e00\u6240\u6709\u8005\u3002\n// \n/// - borrow checker \u65f6\u671f: Box<T> \u5728\u7f16\u8bd1\u65f6\u6267\u884c\u501f\u7528\u68c0\u67e5\uff1bRc<T>\u4e5f\u5728\u7f16\u8bd1\u65f6\u6267\u884c\u501f\u7528\u68c0\u67e5\uff1bRefCell<T> \u5141\u8bb8\u5728\u8fd0\u884c\u65f6\u6267\u884c\u501f\u7528\u68c0\u67e5\n// \n// - \u8fd0\u884c\u65f6\u5f00\u9500: Cell<T>\u65e0\u8fd0\u884c \u65f6\u5f00\u9500\uff0c\u5e76\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u5728\u8fd0\u884c \u65f6\u5f15\u53d1 panic \u9519\u8bef\u3002 refcell \u8981\u5728\u8fd0\u884c\u65f6\u6267\u884c\u501f\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u6709\u8fd0\u884c\u65f6\u5f00\u9500\n// \n// - \u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027\n//  - Cell<T>\u4f7f\u7528 set/get \u65b9\u6cd5\u76f4\u63a5\u64cd\u4f5c\u5305\u88f9\u7684\u503c (\u5e95\u5c42\u662f\u5c06\u5185\u90e8\u503c\u62f7\u8d1d\u51fa, \u4fee\u6539\u540e\u5728\u62f7\u8d1d\u8fdb\u53bb, \u9002\u5408\u4e8e\u5b9e\u73b0Copy\u7684\u7c7b\u578b\u5373\u590d\u5236\u8bed\u4e49\u7c7b\u578b)\n//  - RefCell<T>\u901a\u8fc7 borrow/borrow_mut \u8fd4\u56de \u5305\u88c5\u8fc7\u7684\u5f15\u7528 Ref<T>\u548c RefMut<T>\u6765\u64cd\u4f5c\u5305\u88f9\u7684\u503c (\u9002\u5408\u6ca1\u6709\u5b9e\u73b0Copy\u7684\u7c7b\u578b, \u5373\u79fb\u52a8\u8bed\u4e49\u7c7b\u578b\u3002)\n// \n// \n\n// \n// \u5982\u679c\u9047\u5230\u8981\u5b9e\u73b0\u4e00\u4e2a\u540c\u65f6\u5b58\u5728\u591a\u4e2a\u4e0d\u540c\u6240\u6709\u8005\uff0c\u4f46\u6bcf\u4e2a\u6240\u6709\u8005\u53c8\u53ef\u4ee5\u968f\u65f6\u4fee\u6539\u5176\u5185\u5bb9\uff0c\u4e14\u8fd9\u4e2a\u5185\u5bb9\u7c7b\u578b T \u6ca1\u6709\u5b9e\u73b0 Copy \u7684\u60c5\u51b5\u8be5\u600e\u4e48\u529e\nlet shared_vec: Rc<RefCell<_>> = Rc::new(RefCell::new(Vec::new()));\n// Output: []\nprintln!("{:?}", shared_vec.borrow());\n{\n    let b = Rc::clone(&shared_vec);\n    b.borrow_mut().push(1);\n    b.borrow_mut().push(2);\n}\nshared_vec.borrow_mut().push(3);\n// Output: [1, 2, 3]\nprintln!("{:?}", shared_vec.borrow());\n')),(0,l.kt)("h3",{id:"5118-pin-\u548c-unpin"},"5.11.8. Pin \u548c Unpin"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'/// \u4f7f\u7528 Pin<P> \u5219\u4ee3\u8868\u5c06\u6570\u636e\u7684\u5185\u5b58\u4f4d\u7f6e\u7262\u7262\u5730\u201c\u9489\u201d\u5728\u539f\u5730\uff0c\u4e0d\u8ba9\u5b83\u79fb\u52a8 \u3002(\u4f5c\u7528\u7684\u7c7b\u578b\u662f\u6307\u9488) \n\n//    \u662f\u4e3a\u4e86\u89e3\u51b3\u81ea\u6211\u5f15\u7528\u7684\u6570\u636e\u7ed3\u6784( \u5178\u578b\u5982: \u5185\u90e8\u5305\u542b\u6307\u9488 p \u548c\u6570\u636e data, p \u6307\u5411 data)\u5728\u5185\u5b58\u4e2d\u505a\u5730\u5740\u79fb\u52a8\u540e, p \u7684\u503c\u8fd8\u662f\u539f\u6765\u7684\u503c, \u4f46\u662f data \u6709\u4e86\u65b0\u7684\u5730\u5740, \u56e0\u6b64\u6574\u4e2a\u6570\u636e\u7ed3\u6784\u5c31\u4e0d\u80fd\u4f7f\u7528\u4e86, \u5982\u5728\u505a swap \u64cd\u4f5c\u65f6\u5bb9\u6613\u51fa\u73b0\u5faa\u73af\u5f15\u7528 (\u7c7b\u6bd4 "\u523b\u821f\u6c42\u5251"\u7684\u6545\u4e8b)\n//  (\n// \u81ea\u5f15\u7528\u7ed3\u6784\u6709\u5565\u7528\u5904\u554a?\n// \u4e3b\u8981\u662f\u4e3a\u4e86\u652f\u6301Rust\u7684\u5f02\u6b65\u7f16\u7a0b\n// )\n\n// Unpin \u5219\u6b63\u597d\u548c Pin \u7684\u89e3\u836f\uff0c \u4ee3\u8868\u88ab\u201c\u9489\u201d\u4f4f\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u5b89\u5168\u5730\u79fb\u52a8\u3002\u5927\u591a\u6570\u7c7b\u578b\u90fd\u81ea\u52a8\u5b9e\u73b0\u4e86 Unpin\u3002\n\n//      \u82e5 P \u662f !Unpin \u7c7b\u578b, Pin<P> \u65e0\u6cd5 deref_mut, \u4e5f\u5c31\u662f\u65e0\u6cd5\u62ff\u5230 P \u7684\u53ef\u53d8\u5f15\u7528\n\n//      Unpin \u662f auto trait, \u4f1a\u81ea\u52a8\u5b9e\u73b0\n\n//      impl Future \u662f !Unpin \u7c7b\u578b, \u56e0\u4e3a Future \u662f\u5178\u578b\u7684 \u81ea\u5f15\u7528\u7ed3\u6784 \n\n\n\n\n// tokio \u4e0b\u7684 AsyncRead AsyncWrite\n\n// futures \u4e0b\u7684 Stream \u548c Sink\n')),(0,l.kt)("h3",{id:"5119-cow-\u5199\u65f6\u590d\u5236"},"5.11.9. Cow \u5199\u65f6\u590d\u5236"),(0,l.kt)("p",null,"\u5199\u65f6\u590d\u5236( Copy on Write)\u6280\u672f\u662f\u4e00\u79cd\u7a0b\u5e8f\u4e2d\u7684\u4f18\u5316\u7b56\u7565, \u7ffb\u8bd1\u6210\u4eba\u8bdd\u5c31\u662f \u62d6\u5ef6\u5230\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\u624d\u590d\u5236\u4e00\u4efd\u62f7\u8d1d, \u6bd4\u5982 Linux \u4e2d\u7236\u8fdb\u7a0b\u521b\u5efa\u4e8e\u8fdb\u7a0b\u65f6 \uff0c \u5e76\u4e0d\u662f\u7acb\u523b\u8ba9\u5b50\u8fdb\u7a0b\u590d\u5236\u4e00\u4efd\u8fdb\u7a0b\u7a7a\u95f4\uff0c\u800c\u662f\u5148\u8ba9\u5b50\u8fdb\u7a0b\u5171\u4eab\u7236\u8fdb \u7a0b\u7684\u8fdb\u7a0b\u7a7a\u95f4 \uff0c \u53ea\u6709\u7b49\u5230\u5b50\u8fdb\u7a0b\u771f\u6b63\u9700\u8981\u5199\u5165\u7684\u65f6\u5019\u624d\u590d\u5236\u8fdb\u7a0b\u7a7a\u95f4\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u662f\u4e00\u4e2a\u679a\u4e3e\u4f53\u7684\u667a\u80fd\u6307\u9488\n// Borrowed\uff0c \u7528\u4e8e\u5305\u88f9\u5f15\u7528\u3002\u8868\u793a\u662f\u5bf9\u6570\u636e\u7684\u501f\u7528\n// Owned\uff0c \u7528\u4e8e\u5305\u88f9\u6240\u6709\u8005\u3002\u8868\u793a\u662f\u5bf9\u6570\u636e\u7684\u62e5\u6709\n// \n// \u4ee5\u4e0d\u53ef\u53d8\u7684\u65b9\u5f0f\u8bbf\u95ee\u501f\u7528\u5185\u5bb9\uff0c\u4ee5\u53ca\u5728\u9700\u8981\u53ef\u53d8\u501f\u7528\u6216\u6240\u6709\u6743 \u7684\u65f6\u5019\u518d\u514b\u9686\u4e00\u4efd\u6570\u636e\n//\u65e8\u5728\u51cf\u5c11\u590d\u5236\u64cd\u4f5c\uff0c\u63d0\u9ad8\u6027\u80fd\uff0c \u4e00\u822c\u7528\u4e8e\u8bfb\u591a\u5199\u5c11\u7684\u573a\u666f\n// \n// - Cow<T>\u5b9e\u73b0\u4e86 Deref\uff0c \u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u5176\u5305\u542b\u6570\u636e\u7684\u4e0d\u53ef\u53d8 \u65b9\u6cd5\u3002\n// - to_mut \u65b9\u6cd5\u6765\u83b7\u53d6\u53ef\u53d8\u501f\u7528. \n//      \u82e5 T \u662f \u501f\u7528, \u8be5\u65b9\u6cd5\u4f1a\u4ea7\u751f\u514b\u9686\uff0c\u4f46\u4ec5\u514b\u9686\u4e00\u6b21 \uff0c \u5982\u679c\u591a\u6b21\u8c03\u7528\uff0c\u5219\u53ea\u4f1a\u4f7f\u7528\u7b2c\u4e00\u6b21\u7684\u514b\u9686\u5bf9\u8c61\n//      \u5982\u679c T \u672c\u8eab\u62e5\u6709\u6240\u6709\u6743\uff0c\u5219\u6b64\u65f6\u8c03\u7528 to_mut\u4e0d\u4f1a\u53d1\u751f\u514b\u9686. \u6240\u6709\u6743\u8f6c\u79fb\n// into_owned\u65b9\u6cd5\u6765\u83b7\u53d6\u4e00\u4e2a\u62e5\u6709\u6240\u6709\u6743\u7684\u5bf9\u8c61\n//      \u82e5 T \u662f\u501f\u7528, \u53d1\u751f\u514b\u9686\uff0c\u4e95\u521b\u5efa\u65b0\u7684\u6240\u6709\u6743\u5bf9 \u8c61\n//      \u5982\u679c T \u662f\u6240\u6709\u6743\u5bf9\u8c61\uff0c \u5219\u4f1a\u5c06\u6240\u6709\u6743\u8f6c\u79fb\u5230\u65b0\u7684\u514b\u9686\u5bf9\u8c61\u3002\n\n\nuse std::borrow::Cow;\n// \u6c42\u5143\u7d20\u7edd\u5bf9\u503c\nfn abs_all(input: &mut Cow<[i32]>) {\n    for i in 0..input.len() {\n        let v = input[i];\n        if v < 0 {\n            // \u83b7\u53d6\u53ef\u53d8\u5f15\u7528\n            //to_mut \u65b9\u6cd5\u4f1a\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u514b\u9686\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u5728\u540e\u7eed\u7684 for \u5faa\u73af\u4e2d \u7ee7\u7eed\u7528\u65b0\u7684\u514b\u9686\u5bf9\u8c61\n            input.to_mut()[i] = -v;\n        }\n    }\n}\n// \u6c42\u548c\nfn abs_sum(ns: &[i32]) -> i32 {\n    let mut lst = Cow::from(ns);\n    abs_all(&mut lst);\n    lst.iter().fold(0, |acc, &n| acc + n)\n}\nfn main() {\n    let s1 = [1,2,3];\n    let mut i1 = Cow::from(&s1[..]);\n    // i1 \u4e2d\u7684\u5143\u7d20\u90fd\u4e3a\u6b63, \u4e0d\u4f1a\u8fdb\u5165if\u903b\u8f91, \u4e0d\u6d89\u53ca\u5230\u53ef\u53d8\u9700\u6c42\uff0c\u6240\u4ee5\u4e0d\u4f1a\u514b\u9686\n    abs_all(&mut i1);\n    println!("IN: {:?}", s1);//1,2,3\n    println!("OUT: {:?}", i1);//1,2,3\n    \n    \n    let s2 = [1,2,3, -45, 5];\n    let mut i2 = Cow::from(&s2[..]);\n    // \u8fd9\u91cc\u6709\u53ef\u53d8\u9700\u6c42\uff0c\u4e14\u7a7f\u8fdbcow \u7684\u6570\u636e\u662f\u4e2a\u5f15\u7528, \u6ca1\u6709\u6240\u6709\u6743, \u6240\u4ee5\u4f1a\u514b\u9686, i2 \u5b9e\u9645\u662f\u514b\u9686\u51fa\u7684\u65b0\u5bf9\u8c61\n    abs_all(&mut i2);\n    println!("IN: {:?}", s2);//[1, 2, 3, -45, 5]\n    println!("OUT: {:?}", i2);//[1, 2, 3, 45, 5]\n    \n    // \u8fd9\u91cc\u4e0d\u4f1a\u514b\u9686\uff0c\u56e0\u4e3a\u6570\u636e\u672c\u8eab\u62e5\u6709\u6240\u6709\u6743\n    let mut v1 = Cow::from(vec![1,2,-3,4]);//v1\u662f\u672c\u8eab\u5c31\u662f\u53ef\u53d8\u7684\n    abs_all(&mut v1);\n    println!("IN/OUT: {:?}", v1);//[1, 2, 3, 4]\n}\n\n\n// \u53e6\u4e00\u4e2a\u7528\u5904\u662f\u7edf\u4e00\u5b9e\u73b0\u89c4\u8303\nuse std::borrow::Cow;\nuse std::thread;\n#[derive(Debug)]\nstruct Token<\'a> {\n    raw: Cow<\'a, str>,//\u8be5\u7528&str\u7c7b\u578b\u8fd8\u662f String\u7c7b\u578b\u5462?\u4e3a\u4e86\u5bfb\u6c42\u7edf\u4e00\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86 Cow<T>\n}\nimpl<\'a> Token<\'a> {\n    pub fn new<S>(raw: S) -> Token<\'a>\n    where\n        S: Into<Cow<\'a, str>>,\n   {\n        Token { raw: raw.into() }\n   }\n}\nfn main() {\n   let token = Token::new("abc123");\n   let token = Token::new("api.example.io".to_string());\n// \u8fd8\u53ef\u4ee5\u8de8\u7ebf\u7a0b\u5b89\u5168\u4f20\u9012\n   thread::spawn(move || {\n       println!("token: {:?}", token);\n   }).join().unwrap();\n\n//    \u4f7f\u7528\u52a8\u6001\u5b57\u7b26\u4e32\u5207\u7247\uff0c\u5219\u4f1a\u56e0\u4e3a\u751f\u547d\u5468\u671f\u7684\u95ee\u9898\u800c\u65e0\u6cd5\u8de8\u7ebf\u7a0b\u5b89\u5168\u4f20\u9012\n    //error\n    let raw = String::from("abc");\n    let s = &raw[..];\n    let token = Token::new(s);\n    thread::spawn(move || {\n        println!("token: {:?}", token);\n    }).join().unwrap();\n}\n')),(0,l.kt)("h2",{id:"512-\u51fd\u6570"},"5.12. \u51fd\u6570"),(0,l.kt)("h3",{id:"5121-\u51fd\u6570\u57fa\u672c\u8bed\u6cd5"},"5.12.1. \u51fd\u6570\u57fa\u672c\u8bed\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'/// \u5982\u679c\u4e0d\u6307\u5b9a\u8fd4\u56de\u503c\u7c7b\u578b, \u9ed8\u8ba4 \u8fd4\u56de\u7c7b\u578b\u4e3a () \u7a7a\u5143\u7ec4\n// \u540c\u540d\u51fd\u6570\u5728\u5b58\u5728\u4e8e\u591a\u4e2a\u4f5c\u7528\u57df(\u6bd4\u5982 main \u5916, main \u5185, main \u5185\u7684\u65b0\u4f5c\u7528\u57df \u5206\u522b\u6709\u4e09\u4e2a\u540c\u540d\u51fd\u6570), \u4f1a\u53d1\u751f\u5c4f\u853d\n\nfn sum(aa: i8, bb: i8) -> i8 {\n    // \u8fd4\u56de\u503c\u660e\u786e\u6307\u5b9a\u7c7b\u578b\n    // \u82e5\u5e26 return, \u5c31\u662f\u8bed\u53e5, \u9700\u8981\u5206\u53f7\n    // return aa +bb;\n\n    // \u4e0d\u5e26 return, \u5c31\u662f\u8868\u8fbe\u5f0f, \u6ca1\u6709\u5206\u53f7\n    aa + bb\n}\nlet sum = sum(3, 9);\nprintln!("sum = {}", sum);\n\n// \u51fd\u6570\u53c2\u6570\u652f\u6301\u6a21\u5f0f\u5339\u914d\nfn a(mut b: [i32; 2]) { // \u53c2\u6570\u4e3a\u6570\u7ec4\u53ef\u53d8\u7c7b\u578b, \u4e0d\u662f\u5f15\u7528\u7c7b\u578b (mut \u65e0\u6cd5\u653e\u5728\u5192\u53f7\u540e\u9762)\n}\n\n')),(0,l.kt)("h3",{id:"5122-\u51fd\u6570\u4f53\u8868\u8fbe\u5f0f"},"5.12.2. \u51fd\u6570\u4f53\u8868\u8fbe\u5f0f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'let x = 1;\n\n// \u51fd\u6570\u4f53\u8868\u8fbe\u5f0f\nlet b = {\n    let x = 2;\n    // \u5757\u672b\u5c3e\u662f\u8868\u8fbe\u5f0f, \u4e0d\u662f\u8bed\u53e5, \u6ca1\u6709\u5206\u53f7, \u6ca1\u6709 return\n    x + 1\n    // return x + 1;\n};\nprintln!("x = {}", x); //1\nprintln!("b = {}", b); //3\n')),(0,l.kt)("h3",{id:"5123-\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570"},"5.12.3. \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'//\n    // \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\n    //\n    fn inc1(num: i32) -> i32 { num + 1}\n    fn print_num(num: i32, func: fn(i32) ->i32) {\n        println!("{}", func(num));\n    }\n    print_num(1, inc1);\n\n// mut \u53c2\u6570\n// \u8fd9\u91cc\u5f62\u5f0f\u53c2\u6570\u7c7b\u578b\u5e76\u975e\u5f15\u7528, \u6240\u4ee5\u4f20\u5165\u5b9e\u9645\u53c2\u6570\u65f6, \u4f1a\u8f6c\u79fb\u6240\u6709\u6743, \u5b9e\u9645\u53c2\u6570\u662f\u4e0d\u662f mut \u90fd\u53ef\u4ee5\nfn modify (mut v: Vec<u32> ) - > Vec<u32>\n// \u8fd9\u91cc\u5f62\u53c2\u4e3a\u5f15\u7528, \u6240\u4ee5\u5b9e\u9645\u53c2\u6570\u5fc5\u987b\u4e3a & mut\nfn modify(v: &mut [u32]) ;\n\n\n// \u51fd\u6570\u53c2\u6570\u652f\u6301\u6a21\u5f0f\u5339\u914d\n// (\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u7b49\u4ef7\u4e8e\u4e00\u4e2a\u9690\u5f0f\u7684 let\u7ed1\u5b9a\uff0c\u800c let\u7ed1\u5b9a\u672c\u8eab\u662f\u4e00\u4e2a\u6a21\u5f0f\u5339\u914d\u7684\u884c\u4e3a)\n#[derive(Debug)]\nstruct S { i: i32 }\n//\u8868\u793a \u53c2\u6570\u4e3a\u4e0d\u53ef\u53d8\u5f15\u7528, \u76f8\u5bf9\u7684, ref mut \u8868\u793a\u53c2\u6570\u4e3a\u53ef\u53d8\u5f15\u7528\nfn f(ref _s: S) {\n    println!("{:p}", _s); //0x7ffdd1364b80\n}\nfn main() {\n    let s = S { i: 42 };\n    f(s);\n    // error, \u6240\u6709\u6743\u8f6c\u79fb\n    println!("{:?}", s);\n}\n\n// \u5229\u7528\u4e86\u6a21\u5f0f\u5339\u914d\u6765\u89e3\u6784\u5143\u7ec4\nfn swap((x, y) : (&str, i32)) {}\n\n\n\n')),(0,l.kt)("h3",{id:"5124-result-\u8fd4\u56de\u503c"},"5.12.4. Result \u8fd4\u56de\u503c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"\n// \u5373\u4fbf\u662f\u6ca1\u6709\u663e\u5f0f\u8fd4\u56de\u503c\u7684\u51fd\u6570\uff0c\u5176\u5b9e \u4e5f\u76f8\u5f53\u4e8e\u8fd4\u56de\u4e86\u4e00\u4e2a\u5355\u5143\u503c()\u3002\u5982\u679c\u9700\u8981\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u4ea6\u53ef\u4f7f\u7528\u5143\u7ec4\u7c7b\u578b\n\n\n\n/// \u51fd\u6570\u8fd4\u56de\u503c Result<T, E> \u89c1 error_handling\n/// \n/// \n")),(0,l.kt)("h3",{id:"5125-\u7f16\u8bd1\u671f\u51fd\u6570\u6267\u884c-cfe"},"5.12.5. \u7f16\u8bd1\u671f\u51fd\u6570\u6267\u884c cfe"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"\n\n    // \u7f16\u8bd1\u65f6\u51fd\u6570\u6267\u884c, \u7b80\u79f0 cfe\n    //\u51fd\u6570\u4f1a\u5728\u7f16\u8bd1\u671f\u88ab\u6267\u884c, \u8ba1\u7b97\u51fa\u5e38\u91cf\u7ed3\u679c\n    const fn const_fn() -> u8 {2};\n    let arr = [0u8, const_fn()];\n\n\n\n")),(0,l.kt)("h3",{id:"5126-\u53d1\u6563\u51fd\u6570"},"5.12.6. \u53d1\u6563\u51fd\u6570"),(0,l.kt)("p",null,"\u611f\u53f9\u53f7 \u60ca\u53f9\u53f7"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n/// \u53d1\u6563\u51fd\u6570: \u8fd4\u56de\u503c\u7c7b\u578b\u4e3a "!" (never type), \u6807\u8bc6\u51fd\u6570\u6c38\u8fdc\u4e0d\u4f1a\u8fd4\u56de\u503c, \u6bd4\u5982 \u51fd\u6570\u5305\u542b\u6b7b\u5faa\u73af, \u6216\u8005 panic\n///     \u53d1\u6563\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u4efb\u4f55\u7c7b\u578b. \u5e94\u7528:\u53ef\u4ee5\u5728\u6b63\u5e38\u6709\u8fd4\u56de\u503c\u51fd\u6570\u4e2d panic, \u5728if \u5224\u65ad\u4e2d panic (\u56e0\u4e3a panic \u8fd4\u56de\u7c7b\u578b\u4e3a never type)\n///     https://www.zhihu.com/question/54540714/answer/146231560\n/// \n\n')),(0,l.kt)("h3",{id:"5127-\u6cdb\u578b\u51fd\u6570"},"5.12.7. \u6cdb\u578b\u51fd\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"//\u8c03\u7528\u65f6, \u7f16\u8bd1\u5668\u6765\u8fdb\u884c\u81ea\u52a8\u63a8\u65ad\n// \u65e0\u6cd5\u81ea\u52a8\u63a8\u65ad, \u5219\u9700\u8981\u663e\u5f0f\u6307\u5b9a, \u5982\u4e3a\u63a5\u6536\u7684\u53d8\u91cf\u6307\u5b9a\u7c7b\u578b, \u6216\u8005\u65b9\u6cd5\u8c03\u7528\u7684\u65f6\u5019, \u4f7f\u7528 turbofish\u64cd\u4f5c\u7b26\nlet a: i32 = square(37 , 41) ;\nlet a= square::<u32>(37, 41)\n")),(0,l.kt)("h3",{id:"5128-\u9ad8\u9636\u51fd\u6570"},"5.12.8. \u9ad8\u9636\u51fd\u6570"),(0,l.kt)("h4",{id:"51281-\u51fd\u6570\u6307\u9488"},"5.12.8.1. \u51fd\u6570\u6307\u9488"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u51fd\u6570\u6307\u9488\n// \n// \n// \u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\n// \u5b9e\u73b0\u8fd9\u4e00\u5207\u7684\u57fa\u7840\u5728\u4e8e Rust\u652f\u6301\u7c7b\u4f3c CIC++\u8bed\u8a00\u4e2d\u7684\u51fd\u6570\u6307\u9488\nfn math(op: fn(i32, i32) -> i32, a: i32, b: i32) -> i32\n// \nfn hello(){\n    println!("hello function pointer");\n}\nfn main(){\n    // \u5fc5\u987b\u663e\u5f0f\u6307\u5b9a\u51fd\u6570\u6307\u9488\u7c7b\u578b fn()\n    let fn_ptr: fn() = hello;\n    println!("{:p}", fn_ptr); // 0x562bacfb9f80\n    // \u82e5\u6ca1\u6307\u5b9a\u51fd\u6570\u6307\u9488\u7c7b\u578b, \u5c31\u4e0d\u662f\u6307\u9488, other_fn \u7684\u7c7b\u578b\u5b9e\u9645\u4e0a\u662f fn() {hello}\uff0c\u8fd9\u5176\u5b9e\u662f\u51fd\u6570 hello \u672c\u8eab\u7684\u7c7b\u578b\uff0c\u800c\u975e\u51fd\u6570\u6307\u9488\u7c7b\u578b\n    let other_fn = hello;\n    // error\n    println!("{:p}", other_fn);  // not function pointer\n    \n    hello();\n   other_fn();\n   fn_ptr();\n   (fn_ptr)();\n}\n\n// \u5bf9\u4e8e\u51fd\u6570\u6307\u9488\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528 type \u5173\u952e\u5b57\u4e3a\u5176\u5b9a\u4e49\u522b\u540d \ntype MathOp = fn (i32 \uff0c i32) - > i32\nfn math(op: MathOp, a: i32, b: i32) -> i32\nfn math(op: &str) -> MathOp\n\n\n\n')),(0,l.kt)("h4",{id:"51282-\u7981\u6b62\u51fd\u6570\u6355\u83b7\u5916\u90e8\u73af\u5883\u4e2d\u53d8\u91cf"},"5.12.8.2. \u7981\u6b62\u51fd\u6570\u6355\u83b7\u5916\u90e8\u73af\u5883\u4e2d\u53d8\u91cf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// error, // \u56e0\u4e3a\u51fd\u6570\u4e0d\u80fd\u6355\u6349\u52a8\u6001\u73af\u5883\u4e2d\u7684\u53d8\u91cfi, \u53d8\u91cf \u7ed1\u5b9a i \u4f1a\u968f\u7740\u5e27\u7684\u91ca\u653e\u800c\u91ca\u653e\uff0c\u9700\u8981\u95ed\u5305\u624d\u53ef\u4ee5\u6355\u83b7\nfn counter(i: i32) -> fn(i32) -> i32 {\n    fn inc(n: i32) -> i32 {\n        n + i  // error[E0434]: can't capture dynamic environment in a fn item\n    }\n    inc\n}\nfn main() {\n    let f = counter(2);\n    assert_eq!(3, f(1));\n}\n\n// \u6b63\u786e, \nfn counter() -> fn(i32) -> i32 {\n    fn inc(n: i32) -> i32 {\n        n + 1\n    }\n    inc\n}\nfn main() {\n    let f = counter();\n    assert_eq!(2, f(1));\n}\n\n// \u82e5\u679c\u4e00\u5b9a\u8981\u6355\u83b7\u73af\u5883\u53d8\u91cf, \u9700\u8981\u95ed\u5305\n// 2015 edition:\nfn counter(i: i32) -> Box<Fn(i32) -> i32> {//\u653e\u5230\u4e86 Box<T>\u4e2d\uff0c \u56e0\u4e3a\u95ed\u5305\u7684\u5927 \u5c0f\u5728\u7f16\u8bd1\u671f\u662f\u672a\u77e5\u7684\n    Box::new(move |n: i32| n + i )\n}\n// or 2018:\n// \u4ee5\u5927\u5199\u5b57\u6bcd F \u5f00\u5934\u7684 Fn \u5e76\u4e0d\u662f\u51fd\u6570\u6307\u9488\u7c7b\u578b Fn(i32)->i32\uff0c \u5b83\u662f\u4e00\u4e2atrait\nfn counter(i: i32) -> impl Fn(i32) -> i32 {//\u52a8\u6001\u5927\u5c0f\u7c7b\u578b  impl Trait, \u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u4f7f\u7528 Box<T>\u4e86\n    move |n: i32|{ n + i }\n}\n\n\n")),(0,l.kt)("h2",{id:"513-\u95ed\u5305"},"5.13. \u95ed\u5305"),(0,l.kt)("h3",{id:"5131-\u95ed\u5305\u57fa\u672c\u4f7f\u7528"},"5.13.1. \u95ed\u5305\u57fa\u672c\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'///\u95ed\u5305 (\u533f\u540d\u51fd\u6570): \u662f\u4e00\u4e2a\u6301\u6709\u5916\u90e8\u73af\u5883\u53d8\u91cf\u7684\u51fd\u6570\u3002 \u5916\u90e8\u73af\u5883\u662f\u6307\u95ed\u5305\u5b9a\u4e49\u65f6\u6240\u5728\u7684\u8bcd\u6cd5\u4f5c\u7528\u57df\n/// \n/// \u5ef6\u8fdf\u6267\u884c \u3002\n// \u6355\u83b7\u73af\u5883\u53d8\u91cf \u3002\u95ed\u5305\u4f1a\u83b7\u53d6\u5176\u5b9a\u4e49\u65f6\u6240\u5728\u4f5c\u7528\u57df\u4e2d\u7684\u81ea\u7531\u53d8 \u91cf \uff0c\u4ee5\u4f9b\u4e4b\u540e\u8c03\u7528\u65f6\u4f7f\u7528\n/// \n// \u4e24\u4e2a\u5b9a\u4e49\u4e00\u6a21\u4e00\u6837\u7684\u95ed\u5305 \u4e5f\u5e76\u4e0d\u4e00\u5b9a\u5c5e\u4e8e\u540c \u4e00\u79cd\u7c7b\u578b, \u65e0\u6cd5\u5c06\u5b83\u4eec\u4fdd\u5b58\u5230\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u56e0\u4e3a\u6570\u7ec4\u53ea\u80fd\u4fdd \u5b58\u76f8\u540c\u7c7b\u578b\u7684\u5143\u7d20\n/// \nfn closure_demo() {\n    println!("------------------------ closure demo");\n    \n    let inc = |num: i32| -> i32 { ////\u8fd4\u56de\u503c\u7c7b\u578b\u63a8\u5bfc: \u65e0\u8bba\u540e\u9762\u662f\u5426\u88ab\u8c03\u7528, \u8fd4\u56de\u503c\u90fd\u53ef\u7701\u7565, \u4f46\u662f\u65e0\u6cd5\u4e24\u6b21\u63a8\u5bfc\u4e0d\u540c\u7684\u53c2\u6570/\u8fd4\u56de\u503c\u7c7b\u578b\n        num + 1\n    };\n    // num \u7684\u53c2\u6570\u7c7b\u578b\u53ef\u4ee5\u7701\u7565, \u8fd4\u56de\u503c\u7c7b\u578b\u53ef\u4ee5\u7701\u7565, \u82b1\u62ec\u53f7\u53ef\u4ee5\u7701\u7565; \n    //\u8fd9\u662f\u56e0\u4e3a\u540e\u9762 print_num \u51fd\u6570\u4e2d\u5df2\u7ecf\u6709\u7c7b\u578b\u4fe1\u606f\u4e86, \u5355\u72ec\u5b9a\u4e49\u95ed\u5305, \u6ca1\u6709\u540e\u9762\u7684\u8c03\u7528\u4fe1\u606f, \u5219\u53c2\u6570\u7c7b\u578b\u4e0d\u80fd\u7701\n    let inc0 = |num| num+1\n\n    fn inc1(num: i32) -> i32 { num + 1} \n    // \u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\n    fn print_num(num: i32, func: fn(i32) ->i32) {\n        println!("{}", func(num));\n    }\n    print_num(1, inc1);\n    print_num(1, inc);\n    print_num(1, inc0)\n\n')),(0,l.kt)("h3",{id:"5132-rust-\u5b9e\u73b0\u95ed\u5305\u7684\u539f\u7406"},"5.13.2. rust \u5b9e\u73b0\u95ed\u5305\u7684\u539f\u7406"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u5728 Rust \u4e2d\uff0c\u95ed\u5305\u662f\u4e00\u79cd\u8bed\u6cd5\u7cd6, \u662f\u5728\u57fa\u672c\u8bed\u6cd5\u529f\u80fd\u4e4b\u4e0a\u53c8\u63d0\u4f9b\u7684\u4e00\u5c42\u65b9\u4fbf\u5f00\u53d1\u8005\u7f16\u7a0b\u7684\u8bed\u6cd5\n// \n// \u6700\u521d\u95ed\u5305\u662f\u901a\u8fc7  \u88c5\u7bb1( Boxed) \u95ed\u5305 \u5b9e\u73b0\u7684, \u6027\u80fd\u5dee, LLVM \u96be\u4ee5\u5bf9\u5176\u8fdb\u884c\u5185\u8054\u548c\u4f18\u5316\u3002\n// \u5982: \u95ed\u5305 || {a+b} \u7684\u5b9e\u73b0\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u6307\u9488 \u548c\u6355\u83b7\u53d8\u91cf\u6307\u9488\u7ec4\u5408\u6765\u5b9e\u73b0\u3002\u6307\u9488\u653estack\u4e0a\uff0c\u6355\u83b7\u53d8\u91cf\u653e\u5230\u5806\u4e0a\n\n\n\n// \u975e\u88c5\u7bb1 CUnboxed) \u95ed\u5305 (\u73b0\u5728\u7684\u5b9e\u73b0\u65b9\u5f0f): \u652f\u6301\u95ed\u5305\u6309\u503c\u548c\u6309\u5f15\u7528\u7ed1\u5b9a\u73af\u5883\u53d8\u91cf ; \u652f\u6301\u4e09\u79cd\u4e0d\u540c\u7684\u95ed\u5305\u8bbf\u95ee\uff0c \u5bf9\u5e94 self\u3001&self\u548c&mut self\u4e09\u79cd\u65b9\u6cd5\n// \u5c06\u51fd\u6570\u8c03\u7528\u62bd\u8c61\u4e3a\u4e09\u79cd, \u65b0\u589e\u4e09\u4e2a trait \u8868\u793a\n// \n// \u8fd9\u6837, \u65b9\u6cd5\u8c03\u7528 a(b, c, d)\u53d8\u4e3a\u4e00\u4e0b\u4e09\u79cd\u6267\u884c\u65b9\u5f0f:\n// \n// Fn::call(&a, (b, c, d))          - \u8c03\u7528 \u53c2\u6570\u4e3a &self\uff0c \u8fd9\u610f\u5473\u7740\u5b83\u4f1a\u5bf9\u65b9\u6cd5\u63a5\u6536\u8005\u8fdb\u884c\u4e0d\u53ef\u53d8\u501f\u7528 \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u79cd\u65b9\u6cd5\u8c03\u7528\u53ef\u4ee5\u88ab\u8c03\u7528\u591a\u6b21\u3002\n// FnMut::callmut(&muta, (b, c, d)) - \u8c03\u7528\u53c2\u6570\u4e3a& mut self\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4f1a\u5bf9\u65b9\u6cd5\u63a5\u6536\u8005\u8fdb\u884c\u53ef\u53d8\u501f\u7528\n// FnOnce::call once(a, (b, c, d)) - \u8c03\u7528\u53c2\u6570\u4e3a self\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4f1a\u8f6c\u79fb\u65b9\u6cd5\u63a5\u6536\u8005\u7684\u6240\u6709\u6743\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u8fd9 \u79cd\u65b9\u6cd5\u8c03\u7528\u53ea\u80fd\u88ab\u8c03\u7528 \u4e00\u6b21\n// \n// \u73b0\u5728\u5b9e\u73b0\u95ed\u5305\u5c31\u7b80\u5355\u4e86, \u76f4\u63a5\u5b9a\u4e49\u4e00\u4e2a struct \u8868\u793a \u95ed\u5305, \u5185\u90e8\u4f7f\u7528\u4e00\u4e2a\u5b57\u6bb5\u8868\u793a\u6355\u83b7\u7684\u81ea\u7531\u53d8\u91cf, \u5728\u8c03\u7528\u7684\u65f6\u5019\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u5373\u53ef\n// \u5b9e\u9645\u4e0a, \u95ed\u5305\u8868\u8fbe\u5f0f\u4f1a\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u7ffb\u8bd1\u4e3a\u7ed3\u6784\u4f53\u5b9e\u4f8b\uff0c\u5e76\u4e3a\u5176\u5b9e\u73b0 Fn\u3001FnMut\u3001FnOnce\u4e09\u4e2a trait \u4e2d\u7684 \u4e00\u4e2a\n// \u624b\u52a8\u5b9e\u73b0\u5982\u4e0b:\n#![feature(unboxed_closures, fn_traits)]\nstruct Closure {\n    env_var: u32,\n}\nimpl FnOnce<()> for Closure {\n    type Output = u32;\n    // \u5c06\u51fd\u6570\u53c2\u6570\u4e2d\u7684\u5143 \u7ec4\u7c7b\u578b\u505a\u52a8\u6001\u6269\u5c55\uff0c\u4ee5\u4fbf\u652f\u6301\u53ef\u53d8\u957f\u53c2\u6570\u3002\n    // \u56e0\u4e3a\u5728 Fn\u3001 FnMut\u3001 FnOnce \u8fd9\u4e09\u4e2a trait \u91cc\u7684\u65b9 \u6cd5\u8981\u63a5\u6536\u95ed\u5305\u7684\u53c2\u6570\uff0c\u800c\u7f16\u8bd1\u5668\u672c\u8eab\u5e76\u4e0d\u53ef\u80fd\u77e5\u9053\u5f00\u53d1\u8005\u7ed9\u95ed\u5305\u8bbe\u5b9a\u7684\u53c2\u6570\u4e2a\u6570\uff0c\u6240\u4ee5\u8fd9\u91cc \u53ea\u80fd\u4f20\u5143\u7ec4\uff0c\u7136\u540e\u7531 rust-callABI\u5728\u5e95\u5c42\u505a\u52a8\u6001\u6269\u5c55\n    // \u9700\u8981 unboxed closures\u7279\u6027\u652f\u6301\n    extern "rust-call" fn call_once(self, args: ()) -> u32 {\n        println!("call it FnOnce()");\n        self.env_var + 2\n    }\n}\nimpl FnMut<()> for Closure {\n    extern "rust-call" fn call_mut(&mut self, args: ()) -> u32 {\n        println!("call it FnMut()");\n        self.env_var + 2\n    }\n}\nimpl Fn<()> for Closure {\n    extern "rust-call" fn call(&self, args: ()) -> u32 {\n        println!("call it Fn()");\n        self.env_var + 2\n    }\n}\nlet env_var = 1;\nlet mut c = Closure { env_var: env_var };\n// \u7ed3\u6784\u4f53\u5b9e\u4f8b\u53ef\u4ee5\u50cf\u51fd\u6570\u90a3\u6837\u88ab\u8c03\u7528, \u56e0\u4e3a \u5b9a\u4e49\u65b9\u6cd5\u65f6\u5019, \u4f7f\u7528\u4e86 extern \u5173\u952e\u5b57\uff0c\u8868\u793a\u4f7f\u7528\u6307\u5b9a\u7684 ABI (Application Binary Interface\uff0c \u7a0b \u5e8f\u4e8c\u8fdb\u5236\u63a5\u53e3)\nc();\nc.call(());\nc.call_mut(());\nc.call_once(());\n')),(0,l.kt)("h3",{id:"5133-\u6355\u83b7\u73af\u5883\u53d8\u91cf-and-\u4e09\u79cd\u95ed\u5305\u7c7b\u578b"},"5.13.3. \u6355\u83b7\u73af\u5883\u53d8\u91cf and \u4e09\u79cd\u95ed\u5305\u7c7b\u578b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'/// \u95ed\u5305\u4e2d\u53ef\u4ee5\u6355\u83b7\u5916\u90e8\u73af\u5883\u4e2d\u7684\u53d8\u91cf\n\n    //\u6355\u83b7\u73af\u5883\u53d8\u91cf\n    // \u6709\u4e09\u79cd\u65b9\u5f0f, \u6839\u636e\u6355\u83b7\u53d8\u91cf\u65b9\u5f0f\u4e0d\u540c, \u5c06\u95ed\u5305\u5b9a\u4e49\u4e3a\u4e09\u79cd trait:\n    // \n    // Fn\uff0c\u8868\u793a\u95ed\u5305\u4ee5\u4e0d\u53ef\u53d8\u501f\u7528\u7684\u65b9\u5f0f\u6765\u6355\u83b7\u73af\u5883\u4e2d\u7684\u81ea\u7531\u53d8 \u91cf \uff0c\u540c\u65f6\u4e5f\u8868\u793a \u8be5\u95ed \u5305\u6ca1\u6709 \u6539\u53d8\u73af\u5883\u7684\u80fd\u529b \uff0c \u5e76\u4e14\u53ef\u4ee5\u591a\u6b21\u8c03\u7528\u3002\u95ed\u5305\u63a5\u6536\u8005\u662f\u4e0d\u53ef\u53d8\u5f15\u7528, \u5bf9\u5e94 &self\u3002\n    //                  \u7b49\u53f7\u53f3\u4fa7\u95ed\u5305\u8868\u8fbe\u5f0f  \u6ca1\u52a0 move, \u5185\u90e8\u65e0\u5199\u64cd\u4f5c\n    //              \u672a\u6355\u83b7\u4efb\u4f55\u73af\u5883\u53d8\u91cf\u7684\u95ed\u5305\u4f1a\u81ea\u52a8\u5b9e\u73b0 Fn\n    //              \u6355\u83b7\u7684\u81ea\u7531\u53d8\u91cf\u82e5\u4e3a\u590d\u5236\u8bed\u4e49\u7c7b\u578b, \u5219\u95ed\u5305\u5b9e\u73b0\u4e86 Fn (\u4e0d\u9700\u8981\u5bf9\u5916\u90e8\u53d8\u91cf\u8fdb\u884c\u5199\u64cd\u4f5c)\n    //              \u4f7f\u7528 move \u5173\u952e\u5b57\u5219\u81ea\u52a8\u5b9e\u73b0 Fn\n    // FnMut\uff0c\u8868\u793a\u95ed\u5305\u4ee5\u53ef\u53d8\u501f\u7528\u7684\u65b9\u5f0f\u6765\u6355\u83b7\u73af\u5883\u4e2d\u7684\u81ea\u7531\u53d8 \u91cf \uff0c\u540c\u65f6\u610f\u5473 \u7740\u8be5 \u95ed\u5305\u6709 \u6539\u53d8\u73af\u5883\u7684\u80fd\u529b \uff0c\u4e5f\u53ef\u4ee5 \u591a\u6b21 \u8c03\u7528 \u3002 \u95ed\u5305\u63a5\u6536\u8005\u662f\u53ef\u53d8\u5f15\u7528, \u5bf9\u5e94&mut self\u3002\n    //                      \u6ca1\u52a0 move, \u5185\u90e8\u6709\u5199\u64cd\u4f5c\n    //                     \u4fee\u6539\u73af\u5883\u53d8\u91cf\u4ee5\u81ea\u52a8\u5b9e\u73b0 FnMut\n    // FnOnce\uff0c \u8868\u793a\u95ed\u5305\u901a\u8fc7\u8f6c\u79fb\u6240\u6709\u6743\u6765\u6355\u83b7\u73af\u5883\u4e2d\u7684\u81ea\u7531\u53d8\u91cf\uff0c\u540c\u65f6\u610f\u5473\u7740\u8be5\u95ed\u5305\u6ca1 \u6709\u6539\u53d8\u73af\u5883\u7684\u80fd\u529b\uff0c\u53ea\u80fd\u8c03\u7528\u4e00\u6b21\uff0c\u56e0\u4e3a\u8be5\u95ed\u5305\u4f1a\u6d88\u8017\u81ea\u8eab\u3002\u95ed\u5305\u63a5\u6536\u8005\u662f\u503c, \u5e76\u975e\u5f15\u7528, \u5bf9\u5e94 self\u3002\n    //                      \u52a0\u4e86 move\n    //              \u7531\u4e8e\u6240\u6709\u6240\u6709\u95ed\u5305\u90fd\u53ef\u4ee5\u81f3\u5c11\u8c03\u7528\u4e00\u6b21, \u6240\u4ee5\u6d89\u53ca\u5230\u6355\u83b7\u73af\u5883\u53d8\u91cf \u7684\u6240\u6709\u95ed\u5305\u90fd\u5b9e\u73b0\u4e86 FnOnce \n    //\n    // \n    // \u4e09\u79cd trait \u5305\u542b\u5173\u7cfb: fn \u5c5e\u4e8e(\u7ee7\u627f\u4e8e) fnmut \u5c5e\u4e8e(\u7ee7\u627f\u4e8e) fnonce;\n    // \uff0c\u5982\u679c\u8981\u5b9e\u73b0 Fn\uff0c \u5c31\u5fc5\u987b\u5b9e\u73b0 FnMut\u548c FnOnce;\u5982\u679c\u8981\u5b9e\u73b0 FnMut, \u5c31\u5fc5\u987b\u5b9e\u73b0 FnOnce; \u5982\u679c\u53ea\u9700\u8981\u5b9e\u73b0 FnOnce\uff0c \u5c31\u4e0d\u9700\u8981\u5b9e\u73b0 FnMut \u548c Fn\n    // \n    // \n    // \n    // \u95ed\u5305\u6355\u83b7\u5176\u73af\u5883\u53d8\u91cf\u7684\u65b9\u5f0f:\n    // \n    // \u5bf9\u4e8e\u590d\u5236\u8bed\u4e49\u7c7b\u578b \uff0c\u82e5 \u8868\u8fbe\u5f0f\u52a0\u4e86 move , \u4ee5 copy \u7684\u5f62\u5f0f\u8fdb\u884c\u6355\u83b7\n    //                  \u82e5\u672a\u52a0 move, \u4ee5 \u5f15\u7528/\u53ef\u53d8\u5f15\u7528 \u7684\u5f62\u5f0f\u8fdb\u884c\u6355\u83b7\n    // \n    // \u5bf9\u4e8e\u79fb\u52a8\u8bed\u4e49\u7c7b\u578b \uff0c\u8f6c\u79fb\u6240\u6709\u6743\u6765\u8fdb\u884c\u6355\u83b7 (\u65e0\u8bba\u52a0\u6ca1\u52a0 move)\n    //              \u79fb\u52a8\u8bed\u4e49\u7c7b\u578b\u81ea\u52a8\u5b9e\u73b0\u4e86 FnOnce\n    // \n    // \u5bf9\u4e8e\u53ef\u53d8\u7ed1\u5b9a\uff0c\u5e76\u4e14\u5728\u95ed\u5305\u4e2d\u5305\u542b\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u7684\u64cd \u4f5c\uff0c\u5219\u4ee5\u53ef \u53d8\u5f15\u7528 (&mut T) \u6765\u8fdb\u884c\u6355\u83b7 \u3002\n    // \n    // \n    // \n    let mut i = 1;\n    // \u4fee\u6539\u4e86 \u81ea\u7531\u53d8\u91cf, \u6ca1\u52a0 move, \u95ed\u5305\u4e3a FnMut, \u9700\u8981\u58f0\u660e\u4e3a \u53ef\u53d8\n    let mut func =  || {\n        i+=1;\n    };\n    func();\n    println!("{}", i);//2\n\n    let mut i = 1;\n    let mut plus_one = move || {// move \u53ef\u9009, \u6d89\u53ca\u5230\u591a\u7ebf\u7a0b\u5e76\u53d1, \u4e00\u5b9a\u8981\u52a0 move, i \u6240\u6709\u6743\u79fb\u52a8\u5230\u95ed\u5305, \u5bf9\u4e8e\u57fa\u672c\u7c7b\u578b, \u76f8\u5f53\u4e8e\u590d\u5236\u4e86\u4e00\u4efd, \u5728\u95ed\u5305\u5185\u7684\u64cd\u4f5c\u4e0d\u5f71\u54cd\u5916\u90e8\u7684 i\n        i += 1;                // \u4f46\u662f  , \u82e5\u6709\u8fd4\u56de\u503c, \u5c31\u53d8\u4e3a\u590d\u5236\u5f15\u7528\u4e86\n    };\n    plus_one(); \n    println!("i = {}", i); //1,  \n\n    \n    //\n    // \u5bf9\u4e8e\u590d\u6742\u7c7b\u578b\u7684 \u6355\u83b7\n    //\n    let v = vec![1,2,3];\n    let eq = move |x| x==v; // v\u7684\u6240\u6709\u6743\u79fb\u52a8\u5230\u4e86\u95ed\u5305\u5185\u90e8, \u5916\u90e8\u7684 v \u5931\u6548\u4e86\n    println!("eq? {}", eq(vec![1,2,3]));//true\n    println!("v = {:?}", v);// \u9519\u8bef, borrow of moved value: `v`\n\n\n\n\n\n// \u66f4\u591a\u793a\u4f8b\u5bf9\u6bd4\n\nlet mut i = 11;\n// \u6ca1\u6709 move, \u95ed\u5305\u5185\u90e8\u662f \u5f15\u7528, \nlet mut fu1 = || i += 1;\nfu1();\nprintln!("{}", i) //12\n\n//-----------Move\u7684\u60c5\u51b5----------- (\u5bf9\u4e8e\u57fa\u672c\u7c7b\u578b, \u5b9e\u73b0\u4e86 copy trait, \u662f copy, \u5bf9\u4e8e \u7b26\u5408\u7c7b\u578b, \u82e5\u6ca1\u6709\u5b9e\u73b0 copy trait, \u5219\u6240\u6709\u6743\u8f6c\u79fb)\n// \u5b58\u5728 move, \u95ed\u5305\u5185\u662f\u590d\u5236\nlet mut fu1 = move || i += 1; // \u5c40\u90e8\u53d8\u91cf\u88ab\u4e22\u5f03\nfu1();\nprintln!("{}", i);//11\n\n\n// \u5b58\u5728\u8fd4\u56de\u503c\u7684\u60c5\u51b5\nlet mut fu = || {\n    i += 1;\n    i\n};\nfu();\nprintln!("{}", i)//12\n//-----------Move\u7684\u60c5\u51b5-----------\nlet mut fu = move || {\n    i += 1;\n    i\n};\nfu();\nprintln!("{}", i)//11\n\n\n\n\n//\u5bf9\u4e8e\u6ca1\u6709\u5b9e\u73b0 Copy \u7684 \u590d\u5408\u7c7b\u578b\uff0c\n// \u5728\u95ed\u5305\u4e2d\u53ef\u4ee5\u8c03\u7528\u5176\u65b9\u6cd5\uff0c\u662f\u201c\u501f\u7528\u201d\uff0c\n// \u5b58\u5728\u8fd4\u56de\u503c, \u8fd4\u56de\u503c\u4e86\u5c31\u53d1\u751f\u6240\u6709\u6743\u8f6c\u79fb, \u56e0\u4e3a \u8fd4\u56de\u503c\u6709\u53ef\u80fd\u5728\u522b\u7684\u5730\u65b9\u4f7f\u7528, \u4e3a\u4e86\u5b89\u5168, \u6240\u6709\u6743\u8f6c\u79fb\u4e86\n//\n//\nlet s = String::from("coolshell");\nlet take_str = || s; // \u79fb\u52a8\nprintln!("{}", s); //ERROR\nprintln!("{}",  take_str()); // OK\n\nlet mut s1 = String::from("hello");\nlet mut change_s1 = || s1.push(\'!\');// \u6ca1\u6709\u8fd4\u56de\u503c, \u4e0d\u4f1a\u79fb\u8d70, \u53ea\u4f1a\u53ef\u53d8\u501f\u7528\nprintln!("{}", s1);// error, \u5355\u72ec\u51fa\u73b0\u6ca1\u9519, \u4f46\u662f\u548c\u4e0b\u9762\u51fd\u6570\u8c03\u7528\u4e00\u8d77\u51fa\u73b0\u51fa\u9519\u4e86, \u53ef\u53d8\u501f\u7528\u540e, \u6ca1\u6cd5\u8fdb\u884c\u4e0d\u53ef\u53d8\u501f\u7528\u4e86\nchange_s1();\nprintln!("{}", s1);// hello!\n\n\n\nstruct Person {\n    name: String,\n    age: u8,\n}\nlet p = Person{name: "xiaoyu".to_string(), age: 11};\nlet age = |p: Person| p.age; // \u5b58\u5728\u8fd4\u56de\u503c, \u6240\u6709\u6743\u79fb\u52a8\nprintln!("{}", age(p));\nlet name = |p: Person| p.name;\nprintln!("{}", name(p));// name(p)\u7f16\u8bd1\u9519\u8bef, p \u4e22\u5931\u6240\u6709\u6743\n\n// \u6539\u4e3a \u5f15\u7528\u7248\u672c\n//\n// \u5bf9\u4e8e \u57fa\u672c\u7c7b\u578b \u7684\u5c5e\u6027, \u5b58\u5728 copy trait, \u8fd4\u56de\u7684\u662f copy\nlet age = |p: &Person| p.age;\n// \u73b0\u5728\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u4e86\nprintln!("{}", age(&p));\nprintln!("{}", age(&p));\n\n// \u9519\u8bef, \u56e0\u4e3aname \u4e3a string \u7c7b\u578b, \u6ca1\u6709 copy trait\n// \u51fd\u6570\u7ed3\u675f, p.name \u88ab\u91ca\u653e, \u51fa\u9519, \u82e5\u5b58\u5728 copy trait, \u4f1a\u8fd4\u56de \u590d\u5236, \u6ca1\u6709 copy trait, \u53ea\u80fd\u901a\u8fc7\u8fd4\u56de\u5f15\u7528\u89e3\u51b3\nlet name = |p: &People| p.name;\n// \u89e3\u51b3: \u751f\u547d\u5468\u671f, \u5ef6\u7f13 p.name  \u88ab\u91ca\u653e\u7684\u65f6\u95f4\nlet name: for <\'a> fn(&\'a Person) -> &\'a String = |p: &Person| & p.name;// \u95ed\u5305\u8fd4\u56de\u503c\u5fc5\u987b\u4e3a\u5f15\u7528, \u4e0d\u80fd\u628a name move \u8d70\n//or ; \u53c2\u6570\u7c7b\u578b\u7701\u7565\u4e86\nlet name: for<\'a> fn(&\'a People) -> &\'a String = |p| &p.name;\n\n\n\n')),(0,l.kt)("h3",{id:"5134-\u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c-or-\u53c2\u6570"},"5.13.4. \u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c or \u53c2\u6570"),(0,l.kt)("h4",{id:"51341-\u9003\u9038\u95ed\u5305-\u975e\u9003\u9038\u95ed\u5305"},"5.13.4.1. \u9003\u9038\u95ed\u5305 \u975e\u9003\u9038\u95ed\u5305"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n// Box<Fn()>\u662f\u4e00\u4e2a trait\u5bf9\u8c61, \n// trait\u5bf9\u8c61\u662f\u52a8\u6001\u5206\u53d1\u7684\uff0c\u5728\u8fd0\u884c\u65f6\u901a\u8fc7\u67e5\u627e\u865a\u8868( vtable\u3015\u6765\u786e\u5b9a\u8c03\u7528\u54ea\u4e2a\u95ed\u5305\nfn boxed_closure(c: &mut Vec<Box<Fn()>>){\n    let s = "second";\n    c.push(Box::new(|| println!("first")));\n    // \u9700\u8981\u5c06 s copy \u4e00\u4efd, \u5728\u65b9\u6cd5\u5916\u4f7f\u7528\n    c.push(Box::new(move || println!("{}", s)));//\u9003\u9038\u95ed\u5305 (escapeclosure): \u5728\u51fd\u6570\u6808\u5e27\u7ed3\u675f\u540e\u624d\u4f7f\u7528\u7684\u95ed\u5305, \u5982\u679c\u662f\u8ddf\u968f\u51fd\u6570\u4e00\u8d77\u8c03\u7528\u7684\u95ed\u5305\uff0c \u5219 \u662f\u975e\u9003\u9038\u95ed\u5305 (non-escape closure)\u3002\n    c.push(Box::new(|| println!("third")));\n}\nfn main(){\n    let mut c: Vec<Box<Fn()>> = vec![];\n    boxed_closure(&mut c);\n    for f in c {\n        f(); // first / second / third\n    }\n}\n\n\n')),(0,l.kt)("h4",{id:"51342-\u95ed\u5305\u4f5c\u4e3a\u53c2\u6570"},"5.13.4.2. \u95ed\u5305\u4f5c\u4e3a\u53c2\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u5b9e\u73b0 vec.any \u6761\u4ef6\u5339\u914d\n\n// \u901a\u8fc7\u6cdb\u578b, \u5b9e\u73b0\u9759\u6001\u5206\u53d1\nuse std::ops::Fn;\ntrait Any {\n    fn any<F>(&self,  f: F) -> bool where\n        Self: Sized,//\u5f53Any\u88ab\u4f5c\u4e3a trait \u5bf9\u8c61\u4f7f\u7528\u65f6\uff0c\u8be5\u65b9\u6cd5\u4e0d\u80fd\u88ab\u52a8\u6001\u8c03\u7528, \u53ea\u80fd\u9759\u6001\u5206\u53d1\uff0c\u8fd9\u5c5e\u4e8e\u4e00\u79cd\u4f18\u5316\u7b56\u7565\n        F: Fn(u32) -> bool;\n}\nimpl Any for Vec<u32> {\n    fn any<F>(&self, f: F) -> bool where\n    Self: Sized,\n   F: Fn(u32) -> bool\n   {\n       for &x in self {\n           if f(x) {\n               return true;\n           }\n       }\n       false\n   }\n}\nfn main(){\n    let  v = vec![1,2,3];\n    let b = v.any(|x| x == 3);\n    println!("{:?}", b);\n}\n\n\n// \u901a\u8fc7\u5c06\u95ed\u5305\u4f5c\u4e3a trait \u5bf9\u8c61\u7684\u65b9\u5f0f, \u5b9e\u73b0\u52a8\u6001\u5206\u53d1\n// \u4ee3\u7801\u66f4\u52a0\u7b80\u7ec3, \u52a8\u6001\u5206\u53d1\u6bd4\u9759\u6001\u5206\u53d1\u7684\u6027\u80fd \u4f4e \u4e00\u4e9b, \u4f46\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\ntrait Any {\n  fn any(&self,  f: &(Fn(u32) -> bool)) -> bool;// &(Fn(u32) -> bool) \u5373\u4e3a trait object\n}\nimpl Any for Vec<u32> {\n    fn any(&self, f: &(Fn(u32) -> bool)) -> bool {\n        for &x in self.iter() {\n            if f(x) {\n                return true;\n            }\n       }\n      false\n   }\n}\nfn main(){\n   let  v = vec![1,2,3];\n   let b = v.any(&|x| x == 3);\n   println!("{:?}", b);\n}\n\n')),(0,l.kt)("h4",{id:"51343-\u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c"},"5.13.4.3. \u95ed\u5305\u4f5c\u4e3a\u8fd4\u56de\u503c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u4f5c\u4e3a\u8fd4\u56de\u503c, \u5fc5\u987b\u4f7f\u7528 trait\u5bf9\u8c61\nfn square() -> Box<Fn(i32) -> i32> {\n    Box::new(|i| i*i )\n}\n\n// error\n// \u5bf9\u4e8e\u7f16\u8bd1\u671f\u65e0\u6cd5\u786e\u5b9a\u5927\u5c0f\u7684\u503c\uff0c\u4e0d\u80fd\u79fb\u52a8\u5176\u6240\u6709\u6743\n// \u5982\u679c\u8981\u8c03\u7528\u95ed\u5305 Box<Fn0nce(i32)->i32>\uff0c \u5c31\u5fc5\u987b\u5148\u628a Fn0nce(i32)->i32 \u4ece Box<T>\u4e2d\u79fb\u51fa \u6765\u3002\u800c\u6b64\u65f6 Box<T>\u4e2d\u7684 T\u65e0\u6cd5\u5728\u7f16\u8bd1\u671f\u786e\u5b9a\u5927\u5c0f\uff0c\u4e0d\u80fd\u79fb\u52a8\u6240\u6709\u6743\uff0c\u6240\u4ee5\u5c31\u62a5\u9519\nfn square() -> Box<FnOnce(i32) -> i32> {\n    Box::new( |i| {i*i })\n}\n// \u6b63\u786e\n// \u4f7f\u7528 impl trait \u7684\u65b9\u5f0f\nfn square() -> impl FnOnce(i32) -> i32 {\n    |i| {i*i }\n}\n\n\n\n//\u8fd4\u56de\u7684\u95ed\u5305\u8fd8\u5fc5\u987b\u4f7f\u7528 move \u5173\u952e\u5b57\n//          \u5b83\u8868\u660e\u95ed\u5305\u5185\u6240\u6709\u7684\u6355\u83b7\u90fd\u662f\u901a\u8fc7\u503c\u8fdb\u884c\u7684(\u662f\u4e00\u4efd\u62f7\u8d1d, \u662f\u5b89\u5168\u72ec\u7acb\u7684)\u3002\n//          \u56e0\u4e3a\u82e5\u679c\u6ca1\u6709 move, \u95ed\u5305\u662f\u6309\u5f15\u7528\u6355\u83b7\u53d8\u91cf\uff0c\u51fd\u6570\u7ed3\u675f, \u95ed\u5305\u5c06\u5f15\u7528\u8fd4\u56de, \u4f46\u662f\u5f15\u7528\u6307\u5411\u7684\u6570\u636e\u5c06\u88ab\u91ca\u653e, \u5728\u95ed\u5305\u4e2d\u7559\u4e0b\u65e0\u6548\u7684\u5f15\u7528\n//\nfn create_fn() -> impl Fn() {\n    let text = "Fn".to_owned();\n    move || println!("This is a: {}", text)\n}\nfn create_fnmut() -> impl FnMut() {\n    let text = "FnMut".to_owned();\n\n    move || println!("This is a: {}", text)\n}\nlet fn_plain = create_fn();\nlet mut fn_mut = create_fnmut();\nfn_plain();\nfn_mut();\n\n\n')),(0,l.kt)("h4",{id:"51344-\u95ed\u5305\u53c2\u6570\u4e2d\u7684\u751f\u547d\u5468\u671f"},"5.13.4.4. \u95ed\u5305\u53c2\u6570\u4e2d\u7684\u751f\u547d\u5468\u671f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"trait DoSomething<T> {\n    fn do_sth(&self, value: T);\n}\n// \u4e3a&usize\u7c7b\u578b\u5b9e\u73b0\u4e86\u8be5 trait\nimpl<'a, T: Debug> DoSomething<T> for &'a usize {\n    fn do_sth(&self, value: T) {\n        println!(\"{:?}\", value);\n    }\n}\n// \u6cdb\u578b trait \u4f5c\u4e3a trait object\u65f6\u9700\u8981\u6807\u6ce8\u751f\u547d\u5468\u671f\u53c2\u6570\n// error\n// \u8fd9\u91cc\u751f\u547d\u5468\u671f\u53c2\u6570\u8ba9\u7f16\u8bd1\u5668\u8bef\u89e3: \u628a foo \u7684\u751f\u547d\u5468\u671f\u548c\u5185\u90e8 s \u7684\u751f\u547d\u5468\u671f\u5173\u8054\u8d77\u6765, \u5373\u5728 foo()\u8c03\u7528\u7684 \u751f\u547d\u5468\u671f\u5185, s \u5fc5\u987b\u59cb\u7ec8\u6709\u6548\n//\u7136\u800c b \u5185\u90e8\u7684 &usize\u5f15\u7528 \u672c\u6765\u5e94\u8be5\u548c foo \u51fd\u6570\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\nfn foo<'a>(b: Box<DoSomething<&'a usize>>) {\n    let s: usize = 10;\n    // s \u5728 foo \u51fd\u6570\u8c03\u7528\u7ed3\u675f\u540e\u5c31\u4f1a\u88ab\u6790\u6784\uff0c\u4ece\u800c&s\u5c31\u4f1a\u53d8 \u6210\u60ac\u5782\u6307\u9488\n    b.do_sth(&s) // error[E0597]: `s` does not live long enough\n}\n// \u6b63\u786e\n// \u9ad8\u9636\u751f\u547d\u5468\u671f (Higher-Ranked Lifetime)\u8bed\u6cd5: for<'f> , \u8868\u793a\u6b64\u751f\u547d\u5468\u671f\u53c2\u6570\u53ea\u9488\u5bf9\u5176\u540e\u9762\u6240\u8ddf \u7740 \u7684\u201c\u5bf9\u8c61\"\n// \u8fd9\u91cc\u5728 box \u5185\u90e8\u58f0\u660e\u4e00\u4e2a\u5468\u671f\u6ce8\u91ca, \u6807\u6ce8 &usize, \u548c \u5916\u5c42\u7684bar \u51fd\u6570\u65e0\u5173\nfn bar(b: Box<for<'f> DoSomething<&'f usize>>) {\n    let s: usize = 10;\n    b.do_sth(&s);\n}\nfn main(){\n    let x  = Box::new(&2usize);\n    foo(x); // \u76f8\u5f53\u4e8e let _a = foo(x);\n    bar(x);\n}\n\n// \u6a21\u62df\u95ed\u5305\u7684\u884c\u4e3a\nstruct Pick<F> {\n    data: (u32, u32),// \u5b58\u50a8\u95ed\u5305\u53c2\u6570 \n    func: F, // \u5b58\u50a8\u903b\u8f91\u884c\u4e3a\n}\nimpl<F> Pick<F>\n    // trait\u9650\u5b9a\u4e2d\u4f7f\u7528\u4e86 \u5f15\u7528\u7c7b\u578b, \u7f16\u8bd1\u5668\u81ea\u52a8\u4e3a\u5176\u8865\u9f50\u4e86\u751f\u547d\u5468\u671f\u53c2\u6570\n    where F: Fn(&(u32, u32)) -> &u32\n    // \u663e\u5f0f\u6307\u5b9a\u5468\u671f\u53c2\u6570:\n    where F: for<'f> Fn(&'f (u32, u32)) -> &'f u32, // \n{\n    // \u751f\u547d\u5468\u671f\u53c2\u6570\u53ef\u7701\u7565    \n    fn call(&self) -> &u32 {\n        (self.func)(&self.data)\n    }\n\n    // \u82e5\u8981\u6dfb\u52a0\u5468\u671f\u53c2\u6570, \u8fd9\u79cd\u662f\u9519\u8bef\u7684:  \n    fn call<'a>(&\u2019a self)\u4e00\u3009&\u2019a u32, //\u4e0d\u80fd\u8ba9 call\u65b9\u6cd5\u81ea\u8eab\u7684\u751f\u547d\u5468\u671f\u548c self.func\u65b9\u6cd5\u7684\u751f\u547d\u5468\u671f\u76f8\u5173\u8054, \u56e0\u4e3a\u95ed\u5305 \u7684\u6355\u83b7\u5f15\u7528\u662f\u4ece\u5916\u90e8\u73af\u5883\u83b7\u53d6\u7684\uff0c\u548c call \u65b9\u6cd5\u6ca1\u6709\u5173\u7cfb\n\n    \n}\nfn max(data: &(u32, u32)) -> &u32 {\n    if data.0 > data.1{\n        &data.0\n    }else{\n        &data.1\n    }\n\n}\nfn main() {\n   let elm = Pick { data: (3, 1), func: max };\n   println!(\"{}\", elm.call());\n}\n\n")),(0,l.kt)("h3",{id:"5135-\u8fed\u4ee3\u5668"},"5.13.5. \u8fed\u4ee3\u5668"),(0,l.kt)("h4",{id:"51351-\u4ec0\u4e48\u662f\u8fed\u4ee3\u5668"},"5.13.5.1. \u4ec0\u4e48\u662f\u8fed\u4ee3\u5668"),(0,l.kt)("p",null,"\u95ed\u5305\u6700\u5e38\u89c1\u7684\u5e94\u7528\u573a\u666f\u662f\uff0c \u5728\u904d\u5386\u96c6\u5408\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u7684\u540c\u65f6\uff0c\u6309\u95ed\u5305\u5185 \u6307\u5b9a\u7684\u903b\u8f91\u8fdb\u884c\u64cd\u4f5c, \u5373\u8fed\u4ee3\u5668"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n/// \u8fed\u4ee3\u5668\n/// \n/// \u8fed\u4ee3\u5668\u662f\u60f0\u6027\u7684, \u8c03\u7528\u65b9\u6cd5\u4f7f\u7528\u8fed\u4ee3\u5668\u524d, \u4e0d\u4f1a\u6709\u4efb\u4f55\u6548\u679c\n/// \n/// \u6bcf\u4e2a\u8fed\u4ee3\u5668\u90fd\u5b9e\u73b0 Iterator trait\n/// \n/// trait Iterator {\n///     // \u8fd9\u91cc\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528 \u6cdb\u578b\u5462? \u82e5\u7528\u6cdb\u578b\u8bed\u6cd5, \u4f1a\u9020\u6210\u8fd9\u6837\u7684\u7ed3\u679c: \u4f7f\u7528\u8005\u53ef\u4ee5\u901a\u8fc7\u6cdb\u578b, \u4e3a\u4e00\u4e2a struct \u5b9e\u73b0\u591a\u79cd Iterator trait\n///     // \u8c03\u7528\u65f6, \u7f16\u8bd1\u5668\u65e0\u6cd5\u77e5\u9053\u4f7f\u7528\u54ea\u4e2a trait \u5b9e\u73b0\n///     type Item;// \u5173\u8054\u5143\u7d20\u7c7b\u578b\n///     // \u9700\u8981\u5b9e\u73b0\u7684\u65b9\u6cd5 (\u8981\u5305\u542b\u4e24\u4e2a\u8981\u70b9: 1. \u5230\u8fbe\u67d0\u4e2a\u6761\u4ef6\u8fd4\u56de none; 2. \u8fd4\u56de cur; 3. \u8ba1\u7b97\u4e0b\u4e00\u6b65\u7684\u503c, \u8d4b\u7ed9 cur)\n///     fn next(&mut self) -> Option<Self::Item>\n/// }\n/// \n/// for \u7ed3\u6784\u4f1a\u4f7f\u7528 .into_iterator() \u65b9\u6cd5\u5c06\u4e00\u4e9b\u96c6\u5408\u7c7b\u578b \u8f6c\u6362\u4e3a\u8fed\u4ee3\u5668\n// \n// \n// \u5916\u90e8\u8fed\u4ee3\u5668 (External Iterator): \u5728\u5bb9\u5668\u5916\u90e8, \u53ef\u4ee5\u63a7\u5236\u6574\u4e2a\u8fed\u4ee3\u8fc7\u7a0b (\u5982\u624b\u52a8\u8c03\u7528 next() \u83b7\u53d6\u4e0b\u4e00\u4e2a\u5143\u7d20)\n// \u5185\u90e8\u8fed\u4ee3\u5668 (internal Iterator):\u901a\u8fc7\u8fed\u4ee3\u5668\u81ea\u8eab\u6765\u63a7\u5236\u8fed\u4ee3\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u5916\u90e8\u65e0\u6cd5\u5e72\u9884, \u4e00\u65e6\u5f00\u59cb, \u5fc5\u987b\u5168\u90e8\u8fed\u4ee3\u5b8c\u6bd5\u624d\u80fd\u7ed3\u675f\n// \n// \u5916\u90e8\u8fed\u4ee3\u5668\nfn main() {\n    let v = vec![1, 2, 3, 4, 5];\n    // for\u5faa\u73af\u662f\u4e00\u4e2a\u5178\u578b\u7684\u5916\u90e8\u8fed\u4ee3\u5668\n    // \u5176\u5b9e\u662f\u4e00\u4e2a\u8bed\u6cd5\u7cd6, \u5e95\u5c42\u5b9e\u73b0\u662f into_iter\u65b9\u6cd5\u58f0\u660e\u4e86\u4e00\u4e2a\u53ef\u53d8\u8fed\u4ee3\u5668 iterator\n    for i in v {\n        println!("{}", i);\n    }\n}\n// \u7b49\u4ef7\u4e8e\nfn main() {\n    let v = vec![1, 2, 3, 4, 5];\n    {  // \u7b49\u4ef7\u4e8efor\u5faa\u73af\u7684scope\n        let mut _iterator = v.into_iter();\n        loop {\n            match _iterator.next() {\n                Some(i) => {\n                    println!("{}", i);\n                }\n               None => break,\n           }\n       }\n   }\n}\n\n\nstruct Stepper {\n    cur: i32,\n    step: i32,\n    max: i32,\n}\n\nimpl Iterator for Stepper {\n    type Item = i32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.cur > self.max {\n            return None;\n        }\n        let resp = self.cur;\n        self.cur += self.step;\n        Some(resp)\n    }\n}\n\nlet stepper = Stepper {cur: 0, step: 1, max: 9};\nstepper.into_iter().for_each(|it| println!("{}", it)); \n\n\n// \u81ea\u5b9a\u4e49\u5185\u90e8\u8fed\u4ee3\u5668\ntrait InIterator<T: Copy> {\n    fn each<F: Fn(T) -> T>(&mut self, f: F);\n}\nimpl<T: Copy> InIterator<T> for Vec<T> {\n    fn each<F: Fn(T) -> T>(&mut self, f: F) {\n        let mut i = 0;\n        while i < self.len() {\n            self[i] = f(self[i]);\n            i += 1;\n        }\n    }\n}\nfn main(){\n    let mut v = vec![1,2,3];\n    v.each(|i| i * 3);\n    assert_eq!([3, 6, 9], &v[..3]);\n}\n\n')),(0,l.kt)("h4",{id:"51352-iterator-trait"},"5.13.5.2. Iterator trait"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n/// \nfn iter_demo() {\n\n// \n// \u83b7\u53d6\u8fed\u4ee3\u5668\u65f6, \u6839\u636e\u5bf9\u6e90\u5bb9\u5668\u7684\u5904\u7406, \u53ef\u4ee5\u5206\u4e3a\u51e0\u7c7b\u8fed\u4ee3\u5668:\n// \n// - Intolter\uff0c\u8f6c\u79fb\u6240\u6709\u6743\uff0c\u5bf9\u5e94 self\u3002\n// - Iter\uff0c \u83b7\u5f97\u4e0d\u53ef\u53d8\u501f\u7528 \uff0c \u5bf9\u5e94&self\u3002\n// - IterMut\uff0c\u83b7\u5f97\u53ef\u53d8\u501f\u7528\uff0c\u5bf9\u5e94& mut self\u3002\n// \n// Iter\u548c IterMut\u8fed\u4ee3\u5668\u7684\u5178\u578b\u5e94\u7528\u5c31\u662f slice \n// \u7279\u6b8a\u7684: Drain \u8fed\u4ee3\u5668, String\u7c7b\u578b\u548c HashMap \u7279\u6709, \u53ef\u4ee5\u8fed\u4ee3\u5220\u9664\u6307\u5b9a\u8303\u56f4\u5185\u7684\u503c\n\n\n// \u76f8\u5e94\u7684\u5c31\u6709\u591a\u4e2a\u83b7\u53d6\u8fed\u4ee3\u5668\u7684\u65b9\u6cd5:\n// \n// iter() \u8fed\u4ee3\u51fa\u5f15\u7528, \u8fed\u4ee3\u51fa\u7684\u7c7b\u578b\u4e3a &T\n// iter_mut() \u8fed\u4ee3\u51fa\u53ef\u53d8\u5f15\u7528, \u7c7b\u578b\u4e3a  &mut T\n// into_iter() \u8fed\u4ee3\u51fa\u503c, \u4e0d\u662f\u5f15\u7528, \u539f\u59cb\u6570\u636e\u6e90\u7684\u5143\u7d20\u6240\u6709\u6743\u53d8\u66f4 (\u63a8\u8350)\n// \n//size_hint() (usize, Option<usize>)\uff0c\u6b64\u5143\u7ec4\u8868\u793a\u8fed\u4ee3\u5668\u5269\u4f59\u957f\u5ea6\u7684\u8fb9\u754c\u4fe1\u606f, \u5143\u7d20 1: \u4e0b\u9650, \u5143\u7d20 2: \u4e0a\u9650, \u9ed8\u8ba4\u8fd4\u56de (0, None)\n//       \u7528\u6765\u548c\u5bb9\u5668\u5408\u4f5c\u65f6, \u7cbe\u786e\u7684\u62d3\u5c55\u5bb9\u5668\u5bb9\u91cf, \u4ece\u800c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5bb9\u91cf\u68c0\u67e5\uff0c\u63d0\u9ad8\u6027\u80fd\n//          \u5bf9\u4e8e\u6570\u7ec4, \u4e0a\u4e0b\u9650\u662f\u76f8\u540c\u7684, \u4ee3\u8868\u8fed\u4ee3\u5668\u5f53\u524d\u6307\u9488\u5230\u672b\u5c3e\u6307\u9488\u7684\u8ddd\u79bb\n// \n\n\n    let mut v = vec![1,2,3];\n    for ele in v.iter() { //\u7b49\u540c\u4e8e\n        println!("{}", ele);\n    }\n\n    // \u8fed\u4ee3\u51fa\u7684\u7c7b\u578b\u4e3a &i32\n    let mut it = v.iter();\n    for _ in 0..3 {//`for` \u904d\u5386 `Iterator` \u76f4\u5230\u8fd4\u56de `None`\uff0c\u6bcf\u4e2a `Some` \u503c\u90fd\u88ab\u89e3\u5305\uff08unwrap\uff09\uff0c\u7136\u540e\u7ed1\u5b9a\u7ed9\u4e00\u4e2a\u53d8\u91cf, \u8fd9\u91cc\u662f "_"\n        println!("{}", it.next().unwrap());// \u9700\u8981 it \u53ef\u53d8, \u89e3\u5f15\u7528\u53ef\u7701\u7565\n    }\n\n    // \u8fed\u4ee3\u51fa\u53ef\u53d8\u5f15\u7528\n    //\n    let mut it_mut = v.iter_mut();// \u9700\u8981 v \u4e3a \u53ef\u53d8\n    let ele_first = it_mut.next().unwrap();\n    *ele_first = 100; // \u9700\u8981\u5199\u64cd\u4f5c, \u5148\u89e3\u5f15\u7528\n    println!("v = {:?}", v); // [100,2,3]\n\n    // \u8fed\u4ee3\u5668\u7684\u4e0a\u4e0b\u9650, \u8868\u793a\n    // \n    let a : [i32; 3]= [1, 2, 3];\n    let mut iter = a.iter();\n    assert_eq!((3, Some(3)), iter.size_hint());\n    iter.next();//\u7684\u5269\u4f59\u957f\u5ea6\u5c31\u4f1a\u51cf\u5c11\uff0c \u76f4\u5230\u51cf\u4e3a 0\u4e3a\u6b62\n    assert_eq!((2, Some(2)), iter.size_hint());\n    // \u4f7f\u7528\u8fed\u4ee3\u5668\u8ffd\u52a0\u5b57\u7b26\u4e32\n    let mut message = "Hello".to_string(); \n    message . extend (&[\' \', \'R\', \'u\', \'s\', \'t\']) ; // \u8fd9\u4e2a\u65b9\u6cd5\u91cc\u9762\u5c31\u7528\u5230\u4e86 size_hint \u7528\u4e8e String \u6269\u5bb9\n    assert_eq ! (\u201d Hello Rust\u201d ,& message );\n\n\n    // Intolterator trait\n    \n    let arr = [1, 2, 3];\n    // \u5e76\u6ca1\u6709\u4e3a[T]\u7c7b\u578b\u5b9e\u73b0 IntoIterator\uff0c\u9700\u8981\u8c03\u7528 iter() \u751f\u6210\u8fed\u4ee3\u5668\n    for i in arr.iter() {\n        println!("{}", *i);\n    }\n    // \u4e3a&\u2019a [T]\u548c&\u2019a mut [T]\u7c7b\u578b\u5b9e\u73b0 \u4e86 Intoiterator\n    for i in &arr {\n        println!("{}", *i);\n    }\n\n\n    // \n    // \u6c42\u548c\n    let total: i32 = v.iter().sum();\n    println!("total = {}", total);\n\n    // `take(n)` \u65b9\u6cd5\u63d0\u53d6 `Iterator` \u7684\u524d `n` \u9879\u3002\n    //\n\n    // `skip(n)` \u65b9\u6cd5\u79fb\u9664\u524d `n` \u9879\uff0c\u4ece\u800c\u7f29\u77ed\u4e86 `Iterator` \n    //\n\n    \n')),(0,l.kt)("h4",{id:"51353-\u8fed\u4ee3\u5668\u9002\u914d\u5668-\u6536\u96c6\u5668-\u51fd\u6570\u5f0f\u98ce\u683c"},"5.13.5.3. \u8fed\u4ee3\u5668\u9002\u914d\u5668 \u6536\u96c6\u5668 \u51fd\u6570\u5f0f\u98ce\u683c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n    // \n    // \u8fed\u4ee3\u5668\u7684\u9002\u914d\u5668, \u9002\u914d\u5668\u90fd\u4f1a\u8fd4\u56de\u65b0\u7684\u96c6\u5408\n    // \n    // \u2022 Map\uff0c\u901a\u8fc7\u5bf9\u539f\u59cb\u6ce8\u4ee3\u5668\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\u6307\u5b9a \u95ed\u5305\u6765\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\u3002\n    // \u2022 Chain\uff0c\u901a\u8fc7\u8fde\u63a5\u4e24\u4e2a\u8fed\u4ee3\u5668\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\u3002\n    // \u2022 Cloned\uff0c\u901a\u8fc7\u62f7\u8d1d\u539f\u59cb\u8fed\u4ee3\u5668\u4e2d\u5168\u90e8\u5143\u7d20\u6765\u521b\u5efa\u65b0\u7684\u8fed\u4ee3\u5668\u3002\n    // \u2022 Cycle\uff0c\u521b\u5efa\u4e00\u4e2a\u6c38\u8fdc\u5faa\u73af\u8fed\u4ee3\u7684\u8fed\u4ee3\u5668\uff0c\u5f53\u5b8c\u6bd5\u540e \uff0c\u518d\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u6cd5\u4ee3\u3002\n    // \u2022 Enumerate\uff0c\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u8ba1\u6570\u7684\u8fed\u4ee3\u5668\uff0c\u5b83\u4f1a\u8fd4\u56de \u4e00\u4e2a\u5143\u7ec4(i,val)\uff0c \u5176\u4e2d i \u662f usize \u7c7b\u578b \uff0c\u4e3a\u8fed\u4ee3\u7684 \u5f53\u524d\u7d22 \u5f15\uff0c val \u662f\u8fed\u4ee3\u5668\u8fd4\u56de \u7684\u503c \u3002\n    // \u2022 Filter\uff0c\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e\u8c13\u8bcd\u5224\u65ad\u5f0f( predicate\uff0c\u4ea7\u751f\u5e03\u5c14\u503c\u7684\u8868\u8fbe\u5f0f)\u8fc7\u6ee4\u5143\u7d20\u7684\u8fed\u4ee3\u5668 \u3002\n    // \u2022 FlatMap\uff0c\u521b\u5efa\u4e00\u4e2a\u7c7b\u4f3c Map \u7684\u7ed3\u6784\u7684\u6cd5\u4ee3\u5668\uff0c\u4f46\u662f\u5176\u4e2d\u4e0d\u4f1a\u542b\u6709\u4efb\u4f55\u5d4c\u5957\u3002\n    // \u2022 FilterMap\uff0c\u76f8\u5f53\u4e8e Filter\u548c Map\u4e24\u4e2a\u6cd5\u4ee3\u5668\u4f9d\u6b21\u4f7f\u7528\u540e\u7684\u6548\u679c\u3002\n    // \u2022 Fuse\uff0c\u521b\u5efa\u4e00\u4e2a\u53ef \u4ee5\u5feb\u901f\u7ed3\u675f\u904d\u5386 \u7684\u8fed\u4ee3\u5668\u3002\u5728\u904d\u5386\u8fed\u4ee3\u5668\u65f6\uff0c\u53ea \u8981\u8fd4\u56de\u8fc7\u4e00\u6b21 None,\u90a3\u4e48\u4e4b\u540e\u6240\u6709\u7684\u904d\u5386\u7ed3\u679c\u90fd\u4e3a None\u3002\u8be5\u8fed\u4ee3\u5668\u9002\u914d\u5668\u53ef\u4ee5\u7528\u4e8e\u4f18\u5316\u3002\n    // \u2022 Rev\uff0c\u521b \u5efa\u4e00 \u4e2a\u53ef\u4ee5\u53cd\u5411\u904d\u5386\u7684\u8fed\u4ee3\u5668 \n    //\n    // \n    \n    // map, \n    // Map\u662f\u4e00\u4e2a\u6cdb\u578b\u7ed3\u6784\u4f53\uff0c\u5b83\u53ea\u6709\u4e24\u4e2a\u6210\u5458\u5b57\u6bb5\uff0c\u4e00\u4e2a\u662fiter\uff0c \u4e00\u4e2af\uff0c \u5206\u522b\u5b58 \u50a8\u7684\u662f\u8fed\u4ee3\u5668\u548c\u4f20\u5165\u7684\u95ed\u5305\n    // \u5b9e\u73b0\u4e86 Iterator trait\n    let a = [1, 2, 3];\n    let mut iter =a.into_iter() .map(|x| 2 * x);\n\n    let arr1 = [1, 2, 3, 4, 5];\n    let c1 = arr1.iter().map(|x| 2 * x).collect::<Vec<i32>>();\n    assert_eq!(&c1[..], [2, 4, 6, 8, 10]);\n    let arr2 = ["1", "2", "3", "h"];\n    let c2 = arr2.iter().filter_map(|x| x.parse().ok()).collect::<Vec<i32>>();\n    assert_eq!(&c2[..], [1,2,3]);\n    let arr3 = [\'a\', \'b\', \'c\'];\n   for (idx, val) in arr3.iter().enumerate() {\n       println!("idx: {:?}, val: {}", idx, val.to_uppercase());\n   }\n    \n    let v = vec![1,2,3];\n    let scaled : Vec<i32> = v.iter().map(|&x| x * 10).collect(); // \u8fd4\u56de\u65b0\u7684 vec, \u539f\u59cb vec \u4e0d\u53d7\u5f71\u54cd, x \u4e0d\u52a0&\u4ea6\u53ef\n    println!("scaled = {:?}", scaled);\n    let scaled1: Vec<_> = v.iter_mut().map(|&mut x| x* 10).collect(); //\u7b49\u6548, \u8fd4\u56de\u65b0\u7684 vec, \u4e0d\u6539\u53d8\u539f\u59cb v\n    println!("scaled1 = {:?}", scaled1);\n    println!("v = {:?}",v);//\u4e0d\u53d8\n    let plused: Vec<_> = scaled.into_iter().map(|x| x +1).collect();// \u83b7\u53d6scaled \u6240\u6709\u6743,  \u76f4\u63a5\u5728\u539f\u59cb\u503c\u4e0a\u4fee\u6539\n    println!("plused = {:?}", plused);\n\n    // filter\n    let filtered: Vec<_> = v.into_iter().filter(|&x| x > 3).collect();// \u76f4\u63a5\u5728\u539f\u59cb vec \u4e0a\u4fee\u6539, v \u6240\u6709\u6743\u5931\u6548 // \u5b58\u7591, \u4e3a\u4ec0\u4e48\u9700\u8981 &x\n    println!("filtered = {:?}", filtered); // [100]\n    println!("v = {:?}", v); // \u9519\u8bef, into_iter() \u4f7f\u5f97 v \u5931\u53bb\u503c\u5f97\u6240\u6709\u6743\n    \n\n    // \u9006\u5e8f\n    let mut iter= a.iter().rev()\n    iter.next();//\u4ece\u53cd\u5411\u5f00\u59cb\u8fed\u4ee3\n    // or\n    // \u901a\u8fc7 \u666e\u901a\u8fed\u4ee3\u5668\u7684 next_back() \u65b9\u6cd5\u53cd\u5411\u8fed\u4ee3\n    // next() \u548c next_back() \u6709\u5404\u81ea\u72ec\u7acb\u7684\u6307\u9488, \u4e92\u4e0d\u5f71\u54cd, \u4f46\u662f\u5f53\u6307\u9488\u76f8\u9047\u65f6, \u5c31\u8fed\u4ee3\u4e0d\u51fa\u503c\u4e86, \u8fd4\u56de none\n\n\n\n\n// \u6536\u96c6\u5668\n// \n    // any \u8c13\u8bcd, \u5224\u65ad\n    // \u95ed\u5305\u53c2\u6570\u4e3a \u5f15\u7528\n    let v = vec![1,2,3];\n    let contain = v.iter().any(|&x| x == 2);\n    println!("contains 2?  : {}", contain);\n    let contain = v.into_iter().any(|x| x == 3);\n    println!("contains 3?  : {}", contain);\n    let a = [1, 2, 3];\n    assert_eq!(a.iter().any(|&x| x != 2), true);// \u5b58\u5728\u4e0d\u4e3a 2 \u7684\u5143\u7d20\n    let arr = [1, 2, 3];\n    let result1 = arr.iter().any(|&x| x != 2);\n    let result2 = arr.iter().any(|x| *x != 2);\n    // error:\n    // the trait bound `&{integer}: std::cmp::PartialEq<{integer}>` is not satisfied\n    let result2 = arr.iter().any(|x| x != 2);\n    assert_eq!(result1, true);\n    assert_eq!(result2, true);\n\n    // fold\n    // \u95ed\u5305\u53c2\u6570\u4e3a\u5f15\u7528\n    let arr = vec![1, 2, 3];\n    let sum1 = arr.iter().fold(0, |acc, x| acc + x);\n    let sum2 = arr.iter().fold(0, |acc, x| acc + *x);\n    let sum3 = arr.iter().fold(0, |acc, &x| acc + x);\n    let sum4 = arr.into_iter().fold(0, |acc, x| acc + x);\n    assert_eq!(sum1, 6);\n    assert_eq!(sum2, 6);\n    assert_eq!(sum3, 6);\n   assert_eq!(sum4, 6);\n\n    // find \u67e5\u627e\n    let v = vec![1,2,3];\n    let find2 = v.iter().find(|&&x| x == 2).unwrap();\n    println!("find2 = {}", find2);//2\n    let find3 = v.into_iter().find(|&x| x == 3).unwrap();\n    println!("find2 = {}, find3 = {}", find2, find3);// \u51fa\u9519\n    println!("find3 = {}", find3);\n\n\n\n\n\n\n    // \u51fd\u6570\u5f0f\u98ce\u683c\n    //\n    let upper = 3;\n    let sum: u32 =(0..).map(|n| n * n)             // \u6240\u6709\u81ea\u7136\u6570\u53d6\u5e73\u65b9\n             .take_while(|&n| n < upper) // \u53d6\u5c0f\u4e8e\u4e0a\u9650\u7684\n             .filter(|&n| is_odd(n))     // \u53d6\u5947\u6570\n             .fold(0, |sum, i| sum + i); // \u6700\u540e\u52a0\u8d77\u6765\n    println!("sum = {}", sum);\n\n    // \u5904\u7406\u8fed\u4ee3\u4e2d\u7684\u9519\u8bef\n    //\n    //\n    let strings = vec!["tofu", "93", "18"];\n    let possible_numbers: Vec<_> = strings\n        .into_iter()\n        .map(|s| s.parse::<i32>())\n        .filter_map(Result::ok) // \u8fc7\u6ee4\u51fa\u6210\u529f\u7684result\n        .collect();\n    println!("Results: {:?}", possible_numbers);\n    // \n    // \u53e6\u5916\u7684\u5904\u7406\u65b9\u5f0f:\n    //Result \u5b9e\u73b0\u4e86 FromIter, Vec<Result<T, E>>\u53ef\u4ee5\u8f6c\u4e3a Result<Vec<T>, E>, \u4e00\u65e6\u627e\u5230\u4e00\u4e2a Result::Err \uff0c\u904d\u5386\u5c31\u88ab\u7ec8\u6b62\n    let strings = vec!["tofu", "93", "18"];\n    let numbers: Result<Vec<_>, _> = strings\n        .into_iter()\n        .map(|s| s.parse::<i32>())\n        .collect();\n    println!("Results: {:?}", numbers);\n    //\n    //\u5206\u7ec4\u6536\u96c6\n    //\n    let strings = vec!["tofu", "93", "18"];\n    let (numbers, errors): (Vec<_>, Vec<_>) = strings\n        .into_iter()\n        .map(|s| s.parse::<i32>())\n        .partition(Result::is_ok);\n    let numbers: Vec<_> = numbers.into_iter().map(Result::unwrap).collect();\n    let errors: Vec<_> = errors.into_iter().map(Result::unwrap_err).collect();\n    println!("Numbers: {:?}", numbers);\n    println!("Errors: {:?}", errors);\n}\n')),(0,l.kt)("h4",{id:"51354-\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668"},"5.13.5.4. \u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n    //\n    // \u81ea\u5b9a\u4e49 iterator\n    //\n    struct Counter {\n        count: u32,\n        max: u32,\n    }\n    impl Counter {\n        fn new(max: u32) -> Self {// new \u65b9\u6cd5\u4e0d\u80fd\u653e\u5230\u4e0b\u9762\u7684 iterator \u5b9e\u73b0\u4e2d\n            Counter {\n                count: 0,\n                max\n            }\n        }\n    }\n    impl Iterator for Counter {\n        type Item = u32;\n        fn next(&mut self) -> Option<Self::Item> {\n            self.count += 1;\n            if self.count <= self.max {\n                Some(self.count)\n            } else {\n                None\n            }\n        }\n    }\n    let mut counter = Counter::new(5);\n    loop {\n        if let Some(count) = counter.next() {\n            println!("count = {}", count);\n        } else {\n            break;\n        }\n    }\n\n\n\n')),(0,l.kt)("h4",{id:"51355-\u81ea\u5b9a\u4e49\u9002\u914d\u5668-\u6536\u96c6\u5668"},"5.13.5.5. \u81ea\u5b9a\u4e49\u9002\u914d\u5668 \u6536\u96c6\u5668"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n// \u7b2c\u4e09\u65b9\u5305Itertools \u4ea6\u53ef\u5b9e\u73b0\u81ea\u5b9a\u4e49\u9002\u914d\u5668\n\n\nuse std::iter::FromIterator;\n#[derive(Debug)]\nstruct MyVec(Vec<i32>);\nimpl MyVec {\n    fn new() -> MyVec {\n        MyVec(Vec::new())\n    }\n    fn add(&mut self, elem: i32) {\n        self.0.push(elem);\n   }\n}\n// \u5b9e\u73b0FromIterator\u5c31\u53ef\u4ee5\u62e5\u6709Collect\u7684\u80fd\u529b\nimpl FromIterator<i32> for MyVec {\n   fn from_iter<I: IntoIterator<Item = i32>>(iter: I) -> Self {\n       let mut c = MyVec::new();\n       for i in iter {\n           c.add(i);\n       }\n       c\n   }\n}\nfn main() {\n   let iter = (0..5).into_iter();\n//    \u76f4\u63a5\u8c03\u7528 MyVec::from_iter\u65b9\u6cd5\u548c\u4f7f\u7528 collect\u65b9\u6cd5\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\u3002\n   let c = MyVec::from_iter(iter);\n   assert_eq!(c.0, vec![0, 1, 2, 3, 4]);\n   let iter = (0..5).into_iter();\n   let c: MyVec = iter.collect();\n   assert_eq!(c.0, vec![0, 1, 2, 3, 4]);\n   let iter = (0..5).into_iter();\n   let c = iter.collect::<MyVec>();\n   assert_eq!(c.0, vec![0, 1, 2, 3, 4]);\n}\n\n\n// \u81ea\u5b9a\u4e49\u9002\u914d\u5668\n// \u6309\u6307\u5b9a\u6b65\u6570\u8fed\u4ee3\n#[derive(Clone, Debug)]\n#[must_use = "iterator adaptors are lazy and do nothing unless consumed"]\npub struct Step<I> {\n    iter: I,\n    skip: usize,\n}\nimpl<I> Iterator for Step<I>\n    where I: Iterator,\n{\n    type Item = I::Item;\n    fn next(&mut self) -> Option<I::Item> {\n        let elt = self.iter.next();\n        if self.skip > 0 {\n            self.iter.nth(self.skip - 1);\n        }\n       elt\n    }\n}\n// \u4ea7\u751f Step\u9002\u914d\u5668\npub fn step<I>(iter: I, step: usize) -> Step<I>\n    where I: Iterator,\n{\n    assert!(step != 0);\n    Step {\n        iter: iter,\n            skip: step - 1,\n    }\n}\n// \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ee7\u627f\u81ea Iterator \u7684\u5b50 trait\npub trait IterExt: Iterator {\n    fn step(self, n: usize) -> Step<Self>\n        where Self: Sized,\n    {\n        step(self, n)\n    }\n}\nimpl<T: ?Sized> IterExt for T where T: Iterator {}\nfn main() {\n    let arr = [1,2,3,4,5,6];\n    let sum = arr.iter().step(2).fold(0, |acc, x| acc + x);\n    assert_eq!(9, sum); // [1, 3, 5]\n}\n\n\n\n\n')),(0,l.kt)("h2",{id:"514-\u6761\u4ef6\u5faa\u73af"},"5.14. \u6761\u4ef6\u5faa\u73af"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"\n\nfn condition_loop() {\n    let a = 1;\n    let b;\n    if a > 0 {\n        b = 1\n    } else if a < 0 {\n        b = -1;\n    } else {\n        b = 0;\n    }\n    println!(\"b = {}\", b);\n\n    // if \u7528\u5728 let \u53e5\u5b50\u4e2d, \u8fd4\u56de\u503c\u7c7b\u578b\u76f8\u540c\n    let c = if a > 0 { true } else { false };\n    println!(\"c = {}\", c);\n\n    // while \u5faa\u73af\n    // \u6b7b\u5faa\u73af\u4e0d\u8981\u4f7f\u7528 while true, \u56e0\u4e3a\u82e5\u5728 \u5faa\u73af\u4f53\u4e2d return xx; \u7f16\u8bd1\u5668\u4f1a\u8ba4\u4e3a\u65e0\u6548, \u7f16\u8bd1\u5668\u53ea\u4f1a\u8ba4\u4e3a while true \u4f1a\u8fd4\u56de\u7a7a\u5373 \"()\"\n    let mut d = 3;\n    while d > 0 {\n        println!(\"d = {}\", d);\n        d -= 1;\n    }\n\n    // for \u5faa\u73af\n    let a = [3, 4, 5];\n    let mut i = 0;\n    for ele in a.iter() {\n        println!(\"a[{}] = {}\", i, ele);\n        i += 1;\n    }\n\n    for i in 0..3 {// \u4e0d\u5305\u62ec\u5c3e\u5df4, 0..3 \u662f\u4e00\u4e2a Range \u7c7b\u578b, \u662f\u4e00\u4e2a iterator\n        println!(\"a[{}] = {}\", i, a[i]);\n    }\n\n    //loop \u5faa\u73af \u6b7b\u5faa\u73af\n    let s = ['R', 'U', 'N', 'O', 'O', 'B'];\n    let mut i = 0;\n    loop {\n        let ch = s[i];\n        if ch == 'O' {\n            break;\n        }\n        i += 1;\n    }\n    println!(\"O index = {}\", i);\n\n    // \u5e26\u8fd4\u56de\u503c\u7684 loop \u5faa\u73af, \u7528break\n    let mut i = 0;\n    let location = loop {\n        if s[i] == 'O' {\n            break i;\n        }\n        i += 1;\n    };\n    println!(\"O index = {}\", location);\n}\n\n\n")),(0,l.kt)("h2",{id:"515-\u6cdb\u578b"},"5.15. \u6cdb\u578b"),(0,l.kt)("h3",{id:"5151-\u5355\u6001\u5316"},"5.15.1. \u5355\u6001\u5316"),(0,l.kt)("p",null,"\u5355\u6001\u5316\u662f\u7f16\u8bd1\u5668 \u8fdb\u884c\u9759\u6001\u5206\u53d1 \u7684\u4e00\u79cd\u7b56\u7565, \u7f16\u8bd1\u5668\u8981\u5c06\u4e00\u4e2a\u6cdb\u578b\u51fd\u6570\u751f \u6210\u591a\u4e2a\u5177\u4f53\u7c7b\u578b\u5bf9\u5e94\u7684\u51fd\u6570"),(0,l.kt)("p",null,"\u597d\u5904\u662f\u6027\u80fd\u597d \uff0c \u6ca1\u6709\u8fd0\u884c \u65f6\u5f00\u9500;\u7f3a\u70b9\u662f\u5bb9\u6613\u9020\u6210\u7f16\u8bd1\u540e\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u81a8\u80c0 (\u5982 \u679c\u53d8\u5f97\u592a \u5927\uff0c\u53ef\u4ee5\u6839 \u636e\u5177\u4f53\u7684\u60c5\u51b5\u91cd\u6784\u4ee3\u7801\u6765\u89e3\u51b3\u95ee\u9898)"),(0,l.kt)("h3",{id:"5152-\u591a\u91cd\u7ea6\u675f-\u52a0\u53f7"},"5.15.2. \u591a\u91cd\u7ea6\u675f \u52a0\u53f7"),(0,l.kt)("p",null,"trait Bound"),(0,l.kt)("p",null,"\u5305\u542b trait \u9650\u5b9a\u7684\u6cdb\u578b\u5c5e\u4e8e\u9759\u6001\u5206\u53d1\uff0c\u5728\u7f16\u8bd1\u671f\u901a\u8fc7\u5355\u6001\u5316\u5206\u522b\u751f\u6210\u5177\u4f53\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u6240\u4ee5\u8c03\u7528 trait \u9650\u5b9a\u4e2d\u7684\u65b9\u6cd5\u4e5f\u90fd\u662f\u8fd0\u884c\u65f6\u96f6\u6210\u672c\u7684\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u5728\u8fd0\u884c\u65f6\u518d\u8fdb\u884c\u65b9\u6cd5\u67e5\u627e \u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"\n/// \u6cdb\u578b\n/// \n/// \nfn generic() {\n\n    fn largest<T: PartialOrd + Copy>(list: &[T]) -> T { // \u591a\u91cd\u7ea6\u675f\u4f7f\u7528 + \u53f7 (\u4e14\u7684\u5173\u7cfb)\n        let mut largest = list[0];\n        for &ele in list.iter() {\n            if largest < ele {\n                largest = ele;\n            }\n        }\n        largest\n    }\n\n    use std::ops::Add;\n    fn sum<T: Add<T, Output=T>>(a: T, b: T) -> T{\n        a + b\n    }\n\n\n\n\n    // \u7ed3\u6784\u4f53\u4e2d\u7684\u6cdb\u578b\n    //\n    #[derive(Debug)]\n    struct Point<T> {\n        x: T,\n        y: T,\n    }\n    impl<T> Point<T> {\n        fn x(&self) -> &T {\n            &self.x\n        }\n    }\n\n    //\u6709\u6761\u4ef6\u7684\u5b9e\u73b0\u65b9\u6cd5\n    //\n    //\n    struct A<T> {}\n    // \u8fd9\u6bb5\u4ee3\u7801\u58f0\u660e\u4e86 A<T> \u7c7b\u578b\u5fc5\u987b\u5728 T \u5df2\u7ecf\u5b9e\u73b0 B \u548c C \u7279\u6027\u7684\u524d\u63d0\u4e0b\u624d\u80fd\u6709\u6548\u5b9e\u73b0\u6b64 impl \u5757\n    impl<T: B + C> A<T> {\n        fn d(&self) {}\n    }\n\n    // \u4f7f\u7528 where \u91cd\u6784 trait \u7ea6\u675f\n    fn foo<T, K, R>(a: T, b: K, c: R) where T: A, K: B+C, R: D {. .}\n\n\n\n")),(0,l.kt)("h3",{id:"5153-\u9ed8\u8ba4\u6cdb\u578b\u53c2\u6570-and-\u5173\u8054\u7c7b\u578b"},"5.15.3. \u9ed8\u8ba4\u6cdb\u578b\u53c2\u6570 and \u5173\u8054\u7c7b\u578b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n    // \u9ed8\u8ba4\u6cdb\u578b\u53c2\u6570, \u5982 std\u4e2d\u7684 Add trait:\n    // (\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u5173\u8054\u7c7b\u578b\u7684\u65b9\u5f0f\u800c\u4e0d\u5728\u6cdb\u578b\u4e2d\u6307\u5b9a\u4e24\u4e2a\u53c2\u6570\u5462?\n    //      \u4f7f\u7528\u5355\u6cdb\u578b\u53c2\u6570\u66f4\u7075\u6d3b, \u53ef\u4f20\u53ef\u4e0d\u4f20, \u4f7f\u5f97\u4ee3\u7801\u66f4\u7cbe\u7b80)\n    //\n    // sometype \u8868\u793a\u7b26\u53f7\u53f3\u8fb9\u7684\u7c7b\u578b\n    trait Add<SomeType=Self> {// Self \u8868\u793a\u4e3a\u6cdb\u578b\u53c2\u6570\u6307\u5b9a\u9ed8\u8ba4\u503c Self (Self\u662f\u6bcf\u4e2atrait\u90fd\u5e26\u6709\u7684\u9690\u5f0f\u7c7b\u578b\u53c2\u6570, \u4ee3\u8868\u5b9e\u73b0\u5f53\u524d trait \u7684\u5177\u4f53\u7c7b\u578b); \u82e5\u5b9e\u73b0 add \u65b9\u6cd5\u6ca1\u6709\u6307\u5b9a\u5177\u4f53\u6cdb\u578b, \u5219\u9ed8\u8ba4\u4e3a Self\n        type Output; // \u5173\u8054\u7c7b\u578b\n        fn add(self, xx: SomeType) -> Self::Output ;\n    }\n\n    // string \u4e5f\u5b9e\u73b0\u4e86 Add trait\n    let s  = "hello".to_string();\n    let ns = s + "world";\n\n')),(0,l.kt)("h3",{id:"5154-\u7a7a\u7ea6\u675f"},"5.15.4. \u7a7a\u7ea6\u675f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n\n\n    // \u7a7a\u7ea6\u675f\n    struct Cardinal;\n    struct BlueJay;\n    struct Turkey;\n    trait Red {}\n    trait Blue {}\n    impl Red for Cardinal {}\n    impl Blue for BlueJay {}\n    // \u8fd9\u4e9b\u51fd\u6570\u53ea\u5bf9\u5b9e\u73b0\u4e86\u76f8\u5e94\u7684 trait \u7684\u7c7b\u578b\u6709\u6548\u3002\n    fn red<T: Red>(_: &T)   -> &\'static str { "red" }\n    fn blue<T: Blue>(_: &T) -> &\'static str { "blue" }\n    let cardinal = Cardinal;\n    let blue_jay = BlueJay;\n    let _turkey   = Turkey;\n    // \u7531\u4e8e\u7ea6\u675f\uff0c`red()` \u4e0d\u80fd\u4f5c\u7528\u4e8e blue_jay \uff08\u84dd\u677e\u9e1f\uff09\uff0c\u53cd\u8fc7\u6765\u4e5f\u4e00\u6837\u3002\n    println!("A cardinal is {}", red(&cardinal));\n    println!("A blue jay is {}", blue(&blue_jay));\n    println!("A turkey is {}", red(&_turkey));// \u9519\u8bef\n\n\n')),(0,l.kt)("h3",{id:"5155-turbofish-\u64cd\u4f5c\u7b26-and-\u8fd4\u56de\u503c\u81ea\u52a8\u63a8\u5bfc"},"5.15.5. turbofish \u64cd\u4f5c\u7b26 and \u8fd4\u56de\u503c\u81ea\u52a8\u63a8\u5bfc"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n    // turbofish\u64cd\u4f5c\u7b26 \u7c7b\u578b\u63a8\u5bfc\n    // \n    // \u5f53 Rust \u65e0\u6cd5\u4ece\u4e0a\u4e0b\u6587\u4e2d\u81ea\u52a8\u63a8\u5bfc\u51fa\u7c7b\u578b\u7684\u65f6\u5019, \u53ef\u4ee5\u624b\u52a8\u6307\u5b9a\u7c7b\u578b\n    let x = "1";\n    println!(\u201d{:?}\u201d, x.parse() .unwrap()) //error, parse() \u662f\u4e2a\u6cdb\u578b\u65b9\u6cd5\n    // \u624b\u52a8\u6307\u5b9a\u7c7b\u578b rust \u4f1a\u81ea\u52a8\u7c7b\u578b\u63a8\u5bfc\n    let intx:i32= x.parse().unwrap();\n    // \u6216\u8005, \u901a\u8fc7 turbofish \u64cd\u4f5c\u7b26\n    // \u8bed\u6cd5: ::<T>\n    assert_eq!( x.parse::<i32>().unwrap(), 1)\n\n\n\n\n}\n\n\n')),(0,l.kt)("h2",{id:"516-trait"},"5.16. trait"),(0,l.kt)("h3",{id:"5161-trait-\u6982\u5ff5"},"5.16.1. trait \u6982\u5ff5"),(0,l.kt)("h4",{id:"51611-trait-\u57fa\u672c\u4f7f\u7528"},"5.16.1.1. trait \u57fa\u672c\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n///\u7279\u6027\uff08trait\uff09\u6982\u5ff5\u63a5\u8fd1\u4e8e Java \u4e2d\u7684\u63a5\u53e3\uff08Interface\uff09\n/// \nfn trait_demo() {\n    trait Descriptive {\n        fn describe(&self) -> String;\n\n        // \u9ed8\u8ba4 trait, \u7c7b\u4f3c java \u63a5\u53e3\u9ed8\u8ba4\u5b9e\u73b0\n        fn fn1(&self) -> String {\n            String::from("default impl trait")\n        }\n    }\n\n    struct Person {\n        name: String,\n        age: u8\n    }\n    // user.show() \u7b49\u4ef7\u4e8e User: :show(&user)\u8fd9\u6837\u7684 \u51fd\u6570\u8c03\u7528\n    impl Descriptive for Person {\n        fn describe(&self) -> String {\n            format!("{} {}", self.name, self.age)\n        }\n    }\n    let p = Person {\n        name: String::from("xiaoyu"),\n        age: 11\n    };\n    println!("{}", p.describe());\n    println!("{}", p.fn1());\n\n\n')),(0,l.kt)("h4",{id:"51612-\u5b64\u513f\u89c4\u5219-\u901a\u8fc7fundamental\u89c4\u907f"},"5.16.1.2. \u5b64\u513f\u89c4\u5219 \u901a\u8fc7fundamental\u89c4\u907f"),(0,l.kt)("p",null,"orphan rule: \u8981\u4e3a struct b \u5b9e\u73b0\u67d0\u4e2a trait a, \u5219 a, b \u81f3\u5c11\u6709\u4e00\u4e2a\u5fc5\u987b\u5728\u5f53\u524d crate \u4e2d\u5b9a\u4e49 (\u4e0d\u80fda, b \u90fd\u662f\u5728\u522b\u5904\u5b9a\u4e49\u7684\u6bd4\u5982\u90fd\u662f\u5728 std \u4e2d\u5b9a\u4e49\u7684)"),(0,l.kt)("p",null,"\u76ee\u7684: \u9632\u6b62\u5bf9\u522b\u4eba crate \u4e2d\u7684\u7c7b\u578b\u884c\u4e3a\u8fdb\u884c\u7834\u574f\u6027\u6539\u5199"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u5982 \u8981\u4e3a u32 \u7c7b\u578b\u5b9e\u73b0  add, \u4f7f\u5f97\u53ef\u4ee5\u52a0\u4e0a u64 \u7c7b\u578b\u6570\u5b57\n// \u76f4\u63a5\u5b9e\u73b0 \u6807\u51c6\u5e93\u4e2d\u7684 Add \u4e0d\u884c, \u56e0\u4e3a u32 \u548c Add \u90fd\u5728\u5176\u4ed6 crate \u4e2d\n\n// \u9700\u8981\u81ea\u5df1\u5b9a\u4e49 \u5728\u5f53\u524d crate : \u02daAdd trait\n// \u5f53\u7136\uff0c\u9664\u4e86\u5728\u672c\u5730\u5b9a\u4e49 Addtrait\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd8\u53ef\u4ee5\u5728\u672c\u5730\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7c7b\u578b\uff0c\u7136\u540e\u4e3a\u6b64 \u65b0\u7c7b\u578b\u5b9e\u73b0Add\n\n\n// \u5c40\u9650\u6027\n// \u5bf9\u4e8e\u4e00\u4e9b\u672c\u5730\u7c7b\u578b\uff0c \u5982\u679c\u5c06\u5176\u653e\u5230\u4e00\u4e9b\u5bb9\u5668\u4e2d\uff0c\u6bd4\u5982Rc<T>\u6216Option<T>\uff0c \u90a3\u4e48\u8fd9\u4e9b\u672c\u5730\u7c7b\u578b\u5c31\u4f1a\u53d8\u6210\u8fdc\u7a0b\u7c7b\u578b (\u56e0\u4e3a\u8fd9\u4e9b\u5bb9\u5668\u7c7b\u578b\u90fd\u662f\u5728\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684 \uff0c \u800c\u975e\u672c\u5730\u3002)\n// rust \u4f7f\u7528 #[fundamental]\u7684\u5c5e\u6027\u6807\u8bc6\uff0c\u6765\u4e3a\u7279\u5b9a\u7684trait \u89c4\u907f\u5b64\u513f\u9650\u5236\n//  Box<T>\uff0c\u8fd8\u6709 Fn\u3001 FnMut\u3001 FnOnce\u3001 Sized \u7b49\u90fd\u4e0a\u4e86#[fundamental]\u5c5e\u6027\n")),(0,l.kt)("h4",{id:"51613-\u7279\u5316-specialization"},"5.16.1.3. \u7279\u5316 Specialization"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u95ee\u9898: \u91cd\u53e0\u89c4\u5219\uff1a\u4e0d\u80fd\u4e3a\u91cd\u53e0\u7684\u7c7b\u578b\u5b9e\u73b0\u540c\u4e00\u4e2atrait \nimpl<T> AnyTrait for T\nimpl<T> AnyTrait for T where T: Copy // Copy \u548c\u4e0a\u9762\u7684 T \u91cd\u53e0\u4e86\nimpl<T> AnyTrait for String\n\n// \u89e3\u51b3: \u7279\u5316 (\u7c7b\u4f3c java \u4e2d\u7684\u65b9\u6cd5\u91cd\u5199/\u8986\u76d6)\n#![feature(specialization)]\nstruct Diver<T> {\n    inner: T,\n}\ntrait Swimmer {\n    // \u5e26\u6709\u9ed8\u8ba4\u5b9e\u73b0\u7684 \u65b9\u6cd5\n    fn swim(&self) {\n        println!("swimming")\n    }\n}\n// \u5148\u4e3a Diver<T>\u5b9e\u73b0\u8be5 trait\nimpl<T> Swimmer for Diver<T> {}\n\n// \u4e3aDiver<&\u2019static str>\u5b9e\u73b0\u4e86 \u8be5 trait (\u4e5f\u5c31\u662f \u7279\u6b8a\u7c7b\u578b, \u7279\u6b8a\u5904\u7406)\nimpl Swimmer for Diver<&\'static str> {\n    fn swim(&self) {\n        println!("drowning, help!")\n    }\n}\n\nlet x = Diver::<&\'static str> { inner: "Bob" };\nx.swim();\nlet y = Diver::<String> { inner: String::from("Alice") };\ny.swim();\n\n')),(0,l.kt)("h4",{id:"51614-trait-\u4f5c\u4e3a\u53c2\u6570-\u9700\u8981-impl-\u524d\u7f00"},"5.16.1.4. trait \u4f5c\u4e3a\u53c2\u6570 \u9700\u8981 impl \u524d\u7f00"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'//\n// \u7279\u6027\u505a\u53c2\u6570\n//\nfn print(p: impl Descriptive) {\n    println!("{}", p.describe())\n}\n//\n// \u5199\u6cd52: (\u98ce\u683c\u7c7b\u4f3c\u6cdb\u578b\u7684\u8bed\u6cd5\u7cd6)\nfn output<T: Descriptive>(object: T) {\n    println!("{}", object.describe());\n}\nfn output_two<T: Descriptive>(arg1: T, arg2: T) {\n    println!("{}", arg1.describe());\n    println!("{}", arg2.describe());\n}\n\n\n//\n//\n//\u7279\u6027\u4f5c\u7c7b\u578b\u8868\u793a\u65f6\u5982\u679c\u6d89\u53ca\u591a\u4e2a\u7279\u6027\uff0c\u53ef\u4ee5\u7528 + \u7b26\u53f7\nfn notify(item: impl Summary + Display)\nfn notify<T: Summary + Display>(item: T)\n//\n//\u590d\u6742\u7684\u5b9e\u73b0\u5173\u7cfb\u53ef\u4ee5\u4f7f\u7528 where \u5173\u952e\u5b57\u7b80\u5316\n//\u5982: \nfn some_function<T: Display + Clone, U: Clone + Debug>(t: T, u: U)\n//\u53ef\u4ee5\u7b80\u5316\u6210\uff1a\nfn some_function<T, U>(t: T, u: U) -> i32\n    where T: Display + Clone,\n        U: Clone + Debug\n//\n// \u53d6\u6700\u5927\u503c\n//\ntrait Comparable {\n    fn compare(&self, object: &Self) -> i8;\n}\nfn max<T: Comparable>(array: &[T]) -> &T {\n    let mut max_index = 0;\n    let mut i = 1;\n    while i < array.len() {\n        if array[i].compare(&array[max_index]) > 0 {\n            max_index = i;\n        }\n        i += 1;\n    }\n    &array[max_index]\n}\nimpl Comparable for f64 {\n    fn compare(&self, object: &f64) -> i8 {\n        if &self > &object { 1 }\n        else if &self == &object { 0 }\n        else { -1 }\n    }\n}\nlet arr = [1.0, 3.0, 5.0, 4.0, 2.0];\nprintln!("maximum of arr is {}", max(&arr));\n\n\n\n')),(0,l.kt)("h4",{id:"51615-trait-\u4f5c\u4e3a-\u8fd4\u56de\u503c-\u8fd4\u56de\u52a8\u6001\u7c7b\u578b"},"5.16.1.5. trait \u4f5c\u4e3a \u8fd4\u56de\u503c \u8fd4\u56de\u52a8\u6001\u7c7b\u578b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n     //\u7279\u6027\u505a\u8fd4\u56de\u503c\n    //\n    //\n    fn person() -> impl Descriptive {\n        Person {\n            name: String::from("Cali"),\n            age: 24\n        }\n    }\n\n    // \u5728\u540c\u4e00\u4e2a\u51fd\u6570\u4e2d\u6240\u6709\u53ef\u80fd\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u5b8c\u5168\u4e00\u6837\n    //\u5982\u679c\u5e0c\u671b\u8fd4\u56de\u4e0d\u540c\u7684struct, \u4f7f\u7528  Box<dyn Animal> \u4f5c\u4e3a\u8fd4\u56de\u503c ----- \u591a\u6001\n// \n    // \u9519\u8bef, \u56e0\u4e3a A, B \u867d\u7136\u90fd\u5b9e\u73b0\u4e86 Descriptive, \u4f46\u662f A B \u662f\u4e0d\u540c\u7684\u7c7b\u578b\n    fn some_function(bool bl) -> impl Descriptive {\n        if bl {\n            return A {};\n        } else {\n            return B {};\n        }\n    }\n    //\n    // \u90a3\u4e48\u5982\u4f55\u8fd4\u56de\u4e0d\u540c\u7684 struct?\n    //\u4f7f\u7528 Box<dyn xxx>, box \u662f\u4e00\u79cd\u6570\u636e\u7ed3\u6784, \u6548\u679c\u7c7b\u4f3c\u5f15\u7528,\n    //\n    fn random_animal(random_number: f64) -> Box<dyn Animal> {// \u8fd4\u56de\u7c7b\u578b\u5185\u5b58\u5927\u5c0f\u786e\u5b9a\u4e86, \u7f16\u8bd1\u53ef\u4ee5\u901a\u8fc7\n        if random_number < 0.5 {\n            Box::new(Sheep {})\n        } else {\n            Box::new(Cow {})\n        }\n    }\n\n\n')),(0,l.kt)("h4",{id:"51616-trait-\u7ee7\u627f"},"5.16.1.6. trait \u7ee7\u627f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'    // \n    //\n    trait Person1 {\n        fn name(&self) -> String;\n    }\n    // Implementing Student requires you to also impl Person.\n    trait Student: Person1 {\n        fn university(&self) -> String;\n    }\n    trait Programmer {\n        fn fav_language(&self) -> String;\n    }\n    trait CompSciStudent: Programmer + Student {\n        fn git_username(&self) -> String;\n    }\n    fn comp_sci_student_greeting(student: &dyn CompSciStudent) -> String {\n        format!(\n            "My name is {} and I attend {}. My Git username is {}",\n            student.name(),\n            student.university(),\n            student.git_username()\n        )\n    }\n    //\n    //\n    // \u83f1\u5f62\u7ee7\u627f\u95ee\u9898: \u67d0\u4e2a struct \u5b9e\u73b0\u4e24\u4e2a trait, \u9700\u8981\u5b9e\u73b0\u4e24\u4e2a\u540c\u540d\u65b9\u6cd5\n    //\n    // \u5b8c\u5168\u9650\u5b9a\u8bed\u6cd5\n    <Descriptive as Person>::xxx_fn() //\u7c7b\u4f3c\u4e8e\u5f3a\u5236\u8f6c\u6362\n    //\n    // \u770b\u4f8b\u5b50\n    trait UsernameWidget {\n        fn get(&self) -> String;\n    }\n    trait AgeWidget {\n        fn get(&self) -> u8;\n    }\n    struct Form {\n        username: String,\n        age: u8,\n    }\n    impl UsernameWidget for Form {\n        fn get(&self) -> String {\n            self.username.clone()\n        }\n    }\n    impl AgeWidget for Form {\n        fn get(&self) -> u8 {\n            self.age\n        }\n    }\n    let form = Form{\n        username: "rustacean".to_owned(),\n        age: 28,\n    };\n    // error, "multiple `get` found". Because, after all, there are multiple methods named `get`.\n    println!("{}", form.get());\n    //ok\n    let username = <Form as UsernameWidget>::get(&form);\n    assert_eq!("rustacean".to_owned(), username);\n    let age = <Form as AgeWidget>::get(&form);\n    assert_eq!(28, age);\n    \n\n}\n\n')),(0,l.kt)("h4",{id:"51617-\u9759\u6001\u5206\u53d1-\u52a8\u6001\u5206\u53d1"},"5.16.1.7. \u9759\u6001\u5206\u53d1 \u52a8\u6001\u5206\u53d1"),(0,l.kt)("p",null,"impl Trait\u4ee3\u8868\u9759 \u6001\u5206\u53d1 \uff0c dyn Trait \u4ee3\u8868\u52a8\u6001\u5206\u53d1 \u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'      trait Fly {\n        fn can_fly(&self) -> bool;\n    }\n    struct Duck;\n    struct Pig;\n    impl Fly for Duck {\n        fn can_fly(&self) -> bool {\n            true\n        }\n    }\n    impl Fly for Pig {\n        fn can_fly(&self) -> bool {\n            false\n        }\n    }\n    // \u4f7f\u7528\u6cdb\u578b, \u5b9a\u4e49\u9759\u6001\u5206\u53d1\u7684\u51fd\u6570\n    // \u7f16\u8bd1\u9636\u6bb5, \u6cdb\u578b\u5df2\u7ecf\u88ab\u5c55\u5f00 \u4e3a\u5177\u4f53\u7c7b\u578b\u7684\u4ee3\u7801, \u6ca1\u6709\u62bd\u8c61\u5f00\u9500\n    // or \u53ef\u4ee5\u4f7f\u7528 impl trait \u6539\u5199\n    fn fly_static<T: Fly>(t: &T) -> bool {\n        t.can_fly()\n    }\n    // \u4f7f\u7528 dyn \u5b9a\u4e49\u52a8\u6001\u5206\u53d1\u7684\u51fd\u6570\n    // \u8fd0\u884c\u671f\u51b3\u5b9a\u5230\u5e95\u662f\u4ec0\u4e48\u7c7b\u578b, \u6709\u989d\u5916\u5f00\u9500\n    fn fly_dyn(t: &dyn Fly) -> bool { // \u62bd\u8c61\u7c7b\u578b\u662f trait object, \u662f\u6709\u8981\u6c42\u7684\n        t.can_fly()\n    }\n\n    let pig = Pig;\n    let duck = Duck;\n    println!("{}", fly_static::<Pig>(&pig));\n    println!("{}", fly_dyn(&duck));\n')),(0,l.kt)("h4",{id:"51618-\u4f7f\u7528\u62bd\u8c61\u7c7b\u578b"},"5.16.1.8. \u4f7f\u7528\u62bd\u8c61\u7c7b\u578b"),(0,l.kt)("h5",{id:"516181-trait\u5bf9\u8c61"},"5.16.1.8.1. trait\u5bf9\u8c61"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// AbstractType ExistentialType\n// \u76f8\u5bf9\u4e8e\u5177\u4f53\u7c7b\u578b\u800c\u8a00\uff0c\u62bd\u8c61\u7c7b\u578b\u65e0\u6cd5\u76f4\u63a5\u5b9e\u4f8b\u5316\uff0c \u4f46\u662f\u5b83\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u90fd \u662f\u5177\u4f53\u7c7b\u578b\u7684\u5b9e\u4f8b\n// \u7f16\u8bd1\u5668\u53ef\u80fd\u65e0\u6cd5\u786e\u5b9a\u5176\u786e\u5207\u7684\u529f\u80fd\u548c\u6240\u5360\u7684\u7a7a\u95f4\u5927 \u5c0f \u3002 \u6240\u4ee5 Rust \u76ee\u524d\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u5904\u7406\u62bd\u8c61\u7c7b\u578b: trait \u5bf9\u8c61\u548c impl Trait\n\n// \u65b9\u5f0f 1: trait \u5bf9\u8c61\n#[derive(Debug)]\nstruct Foo;\ntrait Bar {\n    fn baz(&self);\n}\nimpl Bar for Foo {\n    fn baz(&self) { println!("{:?}", self) }\n}\nfn static_dispatch<T>(t: &T) where T:Bar {\n    t.baz();\n}\n// \u52a8\u6001\u5206\u53d1, \u6709\u6027\u80fd\u5f00\u9500\nfn dynamic_dispatch(t: &Bar) { // \u8fd9\u91cc\u53c2\u6570\u662f\u4e00\u4e2a trait object, \u65e0\u6cd5\u786e\u5b9a\u5927\u5c0f, \u5fc5\u987b\u4f7f\u7528 \u5f15\u7528 & or box\n    t.baz();\n}\nlet foo = Foo;\nstatic_dispatch(&foo);\ndynamic_dispatch(&foo);\n\n// \u4e3a\u4ec0\u4e48 \u5c06 trait\u5bf9\u8c61\u79f0\u4e3a\u52a8\u6001 \u5206\u53d1?\n// \n// std \u4e2d  \u4e3a trait object \u5b9a\u4e49\u4e86\u4e00\u4e2a struct\n// \u5305\u542b\u8fde\u4e2a\u6307\u9488:\n// 1. data ptr\n//          \u6307\u5411 \u7c7b\u578b\u6570\u636e\n// 2. vtable ptr\n//          \u6307\u5411 virtual table (cpp \u4e2d\u7684\u6982\u5ff5), \u5c31\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53, \u5305\u542b \u6790\u6784\u51fd\u6570, \u5927\u5c0f, \u65b9\u6cd5...\n// \n// \u5728\u7f16\u8bd1\u671f \uff0c \u7f16\u8bd1\u5668\u53ea\u77e5\u9053 TraitObject \u5305\u542b\u6307 \u9488 \u7684\u4fe1\u606f \uff0c \u5e76\u4e14\u6307\u9488\u7684\u5927 \u5c0f \u4e5f\u662f\u786e\u5b9a\u7684 \uff0c\u5e76 \u4e0d\u77e5\u9053 \u8981 \u8c03\u7528\u54ea\u4e2a \u65b9\u6cd5\n//\u5728\u8fd0\u884c\u671f \uff0c \u5f53\u6709 trait_object.method()\u65b9\u6cd5\u88ab\u8c03 \u7528\u65f6\uff0c TraitObject \u4f1a \u6839\u636e\u865a\u8868\u6307\u9488\u4ece\u865a\u8868\u4e2d\u67e5\u51fa\u6b63\u786e\u7684\u6307\u9488\uff0c\u7136\u540e\u518d\u8fdb\u884c\u52a8\u6001\u8c03\u7528 \n\n')),(0,l.kt)("h5",{id:"516182-trait\u5bf9\u8c61\u5b89\u5168\u95ee\u9898-sized-trait"},"5.16.1.8.2. trait\u5bf9\u8c61\u5b89\u5168\u95ee\u9898 Sized trait"),(0,l.kt)("p",null,"\u5bf9\u8c61\u5b89\u5168\u7684\u672c\u8d28\u5c31\u662f\u4e3a \u4e86\u8ba9 trait \u5bf9\u8c61\u53ef\u4ee5\u5b89\u5168\u5730\u8c03\u7528\u76f8\u5e94\u7684\u65b9\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u5e76\u4e0d\u662f\u6bcf\u4e2a trait\u90fd\u53ef\u4ee5\u4f5c\u4e3a trait\u5bf9\u8c61\u88ab\u4f7f\u7528\n//\u6bcf\u4e2a trait, Self\u9ed8\u8ba4\u6709\u4e00\u4e2a\u9690\u5f0f\u7684 trait \u9650\u5b9a ?Sized, \u5f62\u5982<Self: ?Sized> , ?Sized trait \u5305\u62ec\u4e86\u6240\u6709\u7684\u52a8\u6001\u5927\u5c0f\u7c7b\u578b\u548c\u6240\u6709\u53ef\u786e\u5b9a\u5927\u5c0f \u7684\u7c7b\u578b\u3002\n// Rust \u4e2d\u5927\u90e8\u5206\u7c7b\u578b\u90fd\u9ed8\u8ba4\u662f\u53ef\u786e\u5b9a\u5927\u5c0f\u7684\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f<T: Sized>\uff0c\u8fd9\u4e5f\u662f\u6cdb\u578b\u4ee3 \u7801\u53ef\u4ee5\u6b63\u5e38\u7f16\u8bd1\u7684\u539f\u56e0 \n// \n// \u5f53 trait\u5bf9\u8c61\u5728\u8fd0\u884c\u671f\u8fdb\u884c\u52a8\u6001\u5206\u53d1\uff0c\u4e5f\u5fc5\u987b\u786e\u5b9a\u5927\u5c0f\uff0c\u5426\u5219\u65e0\u6cd5\u4e3a\u5176\u6b63\u786e\u5206\u914d\u5185\u5b58\u7a7a \u95f4 \u3002\u6240 \u4ee5\u5fc5\u987b\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u6761\u89c4\u5219\u7684 trait \u624d\u53ef\u4ee5\u4f5c\u4e3a trait \u5bf9\u8c61\u4f7f\u7528\n//  trait\u5bf9\u8c61 \u80fd\u591f\u7f16\u8bd1\u901a\u8fc7\u7684\u8981\u6c42\u662f, trait \u5fc5\u987b\u662f\u5bf9\u8c61\u5b89\u5168\u7684, \u6ee1\u8db3:\n// 1.  trait \u7684 Self\u7c7b\u578b\u53c2\u6570\u4e0d\u80fd\u88ab\u9650\u5b9a\u4e3a Sized, \u5fc5\u987b\u662f \u9ed8\u8ba4\u7684 ?Sized (\u56e0\u4e3a trait objec \u5728\u7f16\u8bd1\u671f\u65e0\u6cd5\u786e\u5b9a\u5177\u4f53\u7c7b\u578b, \u5927\u5c0f\u672a\u77e5)\n// 2.  trait \u4e2d\u6240\u6709\u7684\u65b9 \u6cd5\u90fd\u5fc5\u987b\u662f\u5bf9\u8c61\u5b89\u5168\u7684, \u6ee1\u8db3\u4e09\u70b9\u4e4b\u4e00\n//          - \u65b9\u6cd5\u53d7 Self: Sized \u7ea6\u675f\n//          - trait \u4e2d \u4e0d\u80fd\u5305\u542b\u5173\u8054\u5e38 \u91cf( Associated Constant, \u5176\u5b9a\u4e49\u65b9\u6cd5\u548c\u5173\u8054\u7c7b\u578b\u5dee\u4e0d\u591a\uff0c \u53ea\u4e0d\u8fc7\u9700\u8981\u4f7f\u7528 const\u5173\u952e\u5b57)\n//          - \u65b9\u6cd5\u6ee1\u8db3\u6ca1\u6709\u989d\u5916 Self\u7c7b\u578b\u53c2\u6570\u7684\u975e\u6cdb\u578b\u6210\u5458\u65b9\u6cd5(\u5206\u89e3\u5f00\u6765\u5c31\u662f\u4e09\u70b9)\n    //          - \u5fc5\u987b\u4e0d\u5305\u542b\u4efb\u4f55\u6cdb\u578b\u53c2\u6570 (\u56e0\u4e3a\u5982\u679c\u5305\u542b\u6cdb\u578b \uff0ctrait \u5bf9 \u8c61\u5728 \u865a\u8868Vtable\u4e2d\u67e5\u627e\u65b9\u6cd5\u65f6\u5c06\u4e0d\u786e\u5b9a\u8be5\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5)\n    //          - \u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u4e3a Self \u7c7b\u578b\u6216\u53ef\u4ee5\u89e3\u5f15\u7528\u4e3a Self \u7684\u7c7b\u578b (\u6bd4\u5982 self\u3001 &self\u3001&mutself\u548c self: Box<Selt>)\n    //          - Self\u4e0d\u80fd\u51fa\u73b0\u5728\u9664\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e4b\u5916\u7684\u5730\u65b9\uff0c \u5305\u62ec\u8fd4\u56de\u503c\u4e2d (\u56e0\u4e3a\u5982\u679c\u51fa\u73b0 Self,\u90a3\u5c31\u610f\u5473\u7740 Self\u548c self\u3001 &self\u6216&mutself\u7684\u7c7b\u578b\u80fd\u591f\u76f8\u5339\u914d\u3002 \u4f46\u662f\u5bf9\u4e8e trait\u5bf9\u8c61\u6765\u8bf4\uff0c \u6839\u672c\u65e0\u6cd5\u505a\u5230\u4fdd\u8bc1\u7c7b\u578b\u5339\u914d)\n// \n// \u8fd9\u4e2atrait \u5c31\u65e0\u6cd5\u4f5c\u4e3a trait object\u5728\u52a8\u6001\u5206\u53d1\u4e2d\u4f7f\u7528, \u4e0d\u662f\u5bf9\u8c61\u5b89\u5168\u7684\ntrait Foo: Sized {...}//\u8868\u793a\u8981\u4e3a\u67d0\u7c7b\u578b\u5b9e\u73b0 Foo\uff0c\u5fc5\u987b\u5148\u5b9e\u73b0 Sized, Foo \u4e2d \u7684\u9690\u5f0f Self\u88ab\u8bbe\u5b9a\u4e3a\u662f Sized \u7684\n\n\n\n\n// \u6807\u51c6\u7684\u5bf9\u8c61\u5b89\u5168\u7684 trait\ntrait Bar {\n    fn bax(self, x: u32);\n     fn bay (&self) ;\n     fn baz (&mut self) ;\n}\n\n// \u5178\u578b\u7684\u5bf9\u8c61\u4e0d\u5b89\u5168\u7684 trait\n// \n// \u5bf9\u8c61\u4e0d\u5b89\u5168\u7684 trait\ntrait Foo {\n    fn bad<T>(&self, x: T);\n    fn new() -> Self;\n}\n\n//\u5bf9\u8c61\u5b89\u5168\u7684 trait \uff0c \u5c06\u4e0d\u5b89\u5168 \u7684\u65b9\u6cd5\u62c6 \u5206 \u51fa \u53bb\ntrait Foo {\n    fn bad<T>(&self, x: T);\n}\ntrait Bar:Foo {\n    fn new() -> Self;\n}\n\n//\u5bf9\u8c61\u5b89\u5168\u7684trait\uff0c\u4f7f\u7528where\u5b50\u53e5\n// \u53ea\u4e0d\u8fc7\u5728 traitFoo\u4f5c\u4e3a trait\u5bf9\u8c61\u4e14\u6709?Sized\u9650\u5b9a\u65f6\uff0c \u4e0d\u5141\u8bb8\u8c03\u7528\u8be5 new\u65b9\u6cd5\ntrait Foo {\n    fn bad<T>(&self, x: T);\n    fn new() -> Self where Self: Sized;\n}\n")),(0,l.kt)("h5",{id:"516183-impl-trait"},"5.16.1.8.3. impl trait"),(0,l.kt)("p",null,"\u53ef \u4ee5\u9759\u6001\u5206\u53d1\u7684\u62bd\u8c61\u7c7b\u578b impl Trait, \u53ef\u4ee5\u7528\u6765\u66ff\u4ee3\u6cdb\u578b\u7ea6\u675f, \u53ef\u4ee5\u4f7f\u7528\u52a0\u53f7 (impl Fly+Debug)"),(0,l.kt)("p",null,"\u76ee\u524d impl Trait \u53ea\u53ef\u4ee5\u5728\u8f93\u5165\u7684\u53c2\u656c\u548c\u8fd4\u56de\u503c\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u2019static \u662f\u4e00\u79cd\u751f\u547d\u5468\u671f\u53c2\u6570 \uff0c \u5b83\u9650\u5b9a\u4e86 impl Fly+Debug \u62bd\u8c61\u7c7b \u578b\u4e0d\u53ef\u80fd\u662f\u5f15\u7528\u7c7b\u578b\nfn dyn_can_fly( s : impl Fly+Debug+ \u2019static) -> Box<dyn Fly> {}\n")),(0,l.kt)("h4",{id:"51619-trait\u7684\u7c7b\u578b\u8f6c\u6362"},"5.16.1.9. trait\u7684\u7c7b\u578b\u8f6c\u6362"),(0,l.kt)("p",null,"\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362 (Implicit Type Conversion)\u548c\u663e\u5f0f\u7c7b\u578b\u8f6c \u6362 (ExplicitType Conversion)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u57fa\u672c\u4e0a\u53ea\u6709 \u81ea\u52a8\u89e3 \u5f15\u7528\n// \u5f15\u7528\u4f7f\u7528&\u64cd\u4f5c\u7b26\uff0c \u800c\u89e3\u5f15\u7528\u4f7f\u7528*\u64cd\u4f5c\u7b26\u3002\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0Deref trait\u6765\u81ea\u5b9a\n\n// as \u64cd\u4f5c\u7b26 \u6700\u5e38\u7528\u7684\u573a\u666f\u5c31\u662f\u8f6c\u6362 Rust \u4e2d\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\nlet a: i64 = 11 as i64\n// \u77ed(\u5927\u5c0f)\u7c7b\u578b\u8f6c\u6362\u4e3a\u957f(\u5927\u5c0f)\u7c7b\u578b\u7684\u65f6\u5019\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c \u4f46 \u662f\u5982\u679c\u53cd\u8fc7\u6765\uff0c\u5219\u4f1a\u88ab \u622a\u65ad\u5904\u7406\n// \u5f53\u4ece\u6709\u7b26\u53f7\u7c7b\u578b \u5411\u65e0\u7b26\u53f7\u7c7b\u578b\u8f6c\u6362 \u7684\u65f6\u5019\uff0c \u6700\u597d\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u7684\u4e13\u95e8\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u8981\u76f4\u63a5\u4f7f\u7528 as\u64cd\u4f5c\u7b26\n\n// \u7c7b\u578b\u548c\u5b50\u7c7b\u578b\u76f8\u4e92\u8f6c\u6362\n// \u751f\u547d\u5468\u671f\u6807\u8bb0\u53ef\u770b\u4f5c\u5b50\u7c7b\u578b\u3002 \u6bd4\u5982&\u2019static str\u7c7b\u578b\u662f&\u2019a str\u7c7b\u578b\u7684\u5b50\u7c7b \u578b; \n//\u2019a \u548c 'static \u90fd\u662f\u751f\u547d\u5468\u671f\u6807\u8bb0\uff0c\u5176\u4e2d\u2019a \u662f\u6cdb\u578b\u6807\u8bb0\uff0c \u662f &str\u7684\u901a\u7528\u5f62\u5f0f\uff0c \u800c\u2019static\u5219\u662f\u7279\u6307\u9759\u6001\u751f\u547d\u5468\u671f\u7684&str\u5b57\u7b26\u4e32\n\n\n")),(0,l.kt)("h3",{id:"5162-\u53ef\u81ea\u52a8\u63a8\u5bfc\u7684trait"},"5.16.2. \u53ef\u81ea\u52a8\u63a8\u5bfc\u7684trait"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n    // \u63a8\u5bfc \u6d3e\u751f trait\n    // \u4e0b\u9762\u4ee5\u4e0b\u662f\u53ef\u4ee5\u81ea\u52a8\u63a8\u5bfc\u7684 trait\n   /*\n    Eq, PartialEq, Ord, PartialOrd (\u6bd4\u8f83\u7c7b\u7684 trait)\n\n    Clone, \u7528\u6765\u4ece &T \u521b\u5efa\u526f\u672c T\u3002\u5f53\u5904\u7406\u8d44\u6e90\u65f6\uff0c\u9ed8\u8ba4\u7684\u884c\u4e3a\u662f\u5728\u8d4b\u503c\u6216\u51fd\u6570\u8c03\u7528\u7684\u540c\u65f6\u5c06\u5b83\u4eec\u8f6c\u79fb\u3002\u4f46\u662f\u6211\u4eec\u6709\u65f6\u5019\u4e5f\u9700\u8981 \u628a\u8d44\u6e90\u590d\u5236\u4e00\u4efd\u3002\n\n        - \u5305\u62ec clone, colon_from \u65b9\u6cd5\n        - \u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u662f Copy\u7684\uff0c \u5b83\u7684clone\u65b9\u6cd5\u4ec5\u9700\u8981\u8fd4\u56de*self\u5373\u53ef \n        - \u4f7f\u7528\u9700\u8981\u663e\u5f0f\u8c03\u7528 clone(), \u82e5\u5e0c\u671brust \u78b0\u5230 \u7b49\u53f7\u8d4b\u503c\u4e86\u5c31\u81ea\u52a8\u9690\u5f0f\u8c03\u7528 clone() , \u9700\u8981\u7ed9\u7ed3\u6784\u4f53\u52a0\u4e0a derive(Clone, Copy), \n\n    Copy\uff0c\u4f7f\u7c7b\u578b\u5177\u6709 \u201c\u590d\u5236\u8bed\u4e49\u201d\uff08copy semantics\uff09\u800c\u975e \u201c\u79fb\u52a8\u8bed\u4e49\u201d\uff08move semantics\uff09\u3002\n\n        copy trait \u65e0\u6cd5\u5355\u72ec\u4f7f\u7528, \u5fc5\u987b\u5728 Clone trait \u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u4f7f\u7528\n\n    Hash\uff0c\u4ece &T \u8ba1\u7b97\u54c8\u5e0c\u503c\uff08hash\uff09\u3002\n\n    Debug\uff0c\u4f7f\u7528 {:?} formatter \u6765\u683c\u5f0f\u5316\u4e00\u4e2a\u503c\n\n    Serialize Deserialize\n   */\n\n    #[derive(Debug, Clone, Copy)]\n    struct Nil;\n\n    // `Centimeters`\uff0c\u53ef\u4ee5\u6bd4\u8f83\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\n    #[derive(PartialEq, PartialOrd)]\n    struct Centimeters(f64);\n\n    // `Inches`\uff0c\u53ef\u4ee5\u6253\u5370\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\n    #[derive(Debug)]\n    struct Inches(i32);\n    impl Inches {\n        fn to_centimeters(&self) -> Centimeters {\n            let &Inches(inches) = self;\n\n            Centimeters(inches as f64 * 2.54)\n        }\n    }\n    let foot = Inches(12);\n    println!("One foot equals {:?}", foot);\n    let meter = Centimeters(100.0);\n    let cmp =\n        if foot.to_centimeters() < meter {\n            "smaller"\n        } else {\n            "bigger"\n        };\n    println!("One foot is {} than one meter.", cmp);\n\n\n    // `Seconds`\uff0c\u4e0d\u5e26\u9644\u52a0\u5c5e\u6027\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\n    struct Seconds(i32);\n    let _one_second = Seconds(1);\n    // \u62a5\u9519\uff1a`Seconds` \u4e0d\u80fd\u6253\u5370\uff1b\u5b83\u6ca1\u6709\u5b9e\u73b0 `Debug` trait\n    println!("One second looks like: {:?}", _one_second);\n    // \u62a5\u9519\uff1a`Seconds`\u4e0d\u80fd\u6bd4\u8f83\uff1b\u5b83\u6ca1\u6709\u5b9e\u73b0 `PartialEq` trait\n    let _this_is_true = (_one_second == _one_second);\n\n')),(0,l.kt)("h3",{id:"5163-\u8fd0\u7b97\u7b26\u91cd\u8f7d\u76f8\u5173\u7684trait"},"5.16.3. \u8fd0\u7b97\u7b26\u91cd\u8f7d\u76f8\u5173\u7684trait"),(0,l.kt)("p",null,"\u64cd\u4f5c\u7b26\u91cd\u8f7d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n    //\n    //\n    // \u5f88\u591a\u8fd0\u7b97\u7b26\u53ef\u4ee5\u901a\u8fc7 trait \u6765\u91cd\u8f7d\n    //\u8fd9\u4e9b\u8fd0\u7b97\u7b26\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u7684 \u8f93\u5165\u53c2\u6570\u6765\u5b8c\u6210\u4e0d\u540c\u7684\u4efb\u52a1\u3002\u8fd9\u4e4b\u6240\u4ee5\u53ef\u884c\uff0c\n    //\u662f\u56e0\u4e3a\u8fd0\u7b97\u7b26\u5c31\u662f\u65b9\u6cd5\u8c03\u7528\u7684\u8bed\u6cd5\u7cd6\u3002\u4f8b \u5982\uff0ca + b \u4e2d\u7684 + \u8fd0\u7b97\u7b26\u4f1a\u8c03\u7528 add \u65b9\u6cd5\uff08\u4e5f\u5c31\u662f a.add(b)\uff09\u3002\u8fd9\u4e2a add \u65b9 \u6cd5\u662f Add trait \u7684\u4e00\u90e8\u5206\n    // \n    // Add trait  \u91cd\u8f7d + \u8fd0\u7b97\u7b26\n    //\n    /// Deref trait \u91cd\u8f7d\u89e3\u5f15\u7528\u7b26\u53f7, \u5c31\u662f "*" \u53f7\n\n    //\n    //\u5728 std::ops \u4e0b\u6709\u5168\u90e8\u91cd\u8f7d\u7684 trait\n    // \u5728std::cmp \u4e0b\u5219\u662f\u6bd4\u8f83\u64cd\u4f5c\u7684\u64cd\u4f5c\u7b26\n    //\n    //\n    // \u4f8b\u5b50: \u5bf9\u8c61\u6392\u5e8f\n    //\n    // \u6709\u56db\u4e2aTrait : Ord\u3001PartialOrd \u3001Eq \u548c PartialEq  \u3002\n    //\n    use std::cmp::{Ord, PartialOrd, PartialEq, Ordering};\n    #[derive(Debug)]\n    struct Employee {\n        name : String,\n        salary : i32,\n    }\n    impl Ord for Employee {\n        fn cmp(&self, rhs: &Self) -> Ordering {\n            self.salary.cmp(&rhs.salary)\n        }\n    }\n    impl PartialOrd for Employee {\n        fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {\n            Some(self.cmp(rhs))\n        }\n    }\n    impl Eq for Employee {\n    }\n    impl PartialEq for Employee {\n        fn eq(&self, rhs: &Self) -> bool {\n            self.salary == rhs.salary\n        }\n    }\n\n    //\u4f7f\u7528\n    let mut v = vec![\n        Employee {name : String::from("Bob"),     salary: 2048},\n        Employee {name : String::from("Alice"),   salary: 3208},\n        Employee {name : String::from("Tom"),     salary: 2359},\n        Employee {name : String::from("Jack"),    salary: 4865},\n        Employee {name : String::from("Marray"),  salary: 3743},\n        Employee {name : String::from("Hao"),     salary: 2964},\n        Employee {name : String::from("Chen"),    salary: 4197},\n    ];\n    //\u7528for-loop\u627e\u51fa\u85aa\u6c34\u6700\u591a\u7684\u4eba\n    let mut e = &v[0];\n    for i in 0..v.len() {\n        if *e < v[i] { \n            e = &v[i]; \n        }\n    }\n    println!("max = {:?}", e);\n    //\u4f7f\u7528\u6807\u51c6\u7684\u65b9\u6cd5\n    println!("min = {:?}", v.iter().min().unwrap());\n    println!("max = {:?}", v.iter().max().unwrap());\n    //\u4f7f\u7528\u6807\u51c6\u7684\u6392\u5e8f\u65b9\u6cd5\n    v.sort();\n    println!("{:?}", v);\n\n')),(0,l.kt)("h3",{id:"5164-from-\u548c-into"},"5.16.4. From \u548c Into"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// \u5b9a\u4e49\u4e8e std::convert \u6a21\u5757\u4e2d\u7684\u4e24\u4e2a trait\u3002 \u5b83\u4eec\u5b9a\u4e49\u4e86 from \u548c into \u4e24\u4e2a\u65b9 \u6cd5\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u4e92\u4e3a\u53cd\u64cd\u4f5c\n\nlet s = String: :from(\u201dhello\u201d);\n\nstruct Person {\n    name, String,\n}\nimpl Person {\n    //\u5141\u8bb8\u4f20\u5165\u7684\u53c2\u6570\u662f&str\u7c7b\u578b\u6216 String \u7c7b\u578b \uff0c\u65b9\u4fbf\u8fdb\u884c\u5f00\u53d1 (&str\u548c String\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86 Into, \u5f53\u53c2\u6570\u662f&str\u7c7b\u578b\u65f6\uff0c\u4f1a\u901a\u8fc7 into\u8f6c\u6362\u4e3a String)\n    fn new<T: Into<String>>(name: T) -> Self {\n        Person {name: name.into()}\n    }\n}\n\n// \u5982\u679c\u7c7b\u578b U\u5b9e\u73b0\u4e86 From<T>\uff0c\u5219 T\u7c7b\u578b\u5b9e\u4f8b\u8c03\u7528 into\u65b9 \u6cd5\u5c31\u53ef\u4ee5\u8f6c\u6362\u4e3a\u7c7b\u578b U (rust \u81ea\u52a8\u5e2e\u6211\u4eec\u5b9e\u73b0\u4e86 Into)\n// impl<T, U> Into<U> for T where U: From<T> {}\n// \u6240\u4ee5 \uff0c \u4e00\u822c\u60c5\u51b5\u4e0b \uff0c \u53ea\u9700\u8981\u5b9e\u73b0 From \u5373\u53ef \uff0c \u9664\u975e From \u4e0d\u5bb9\u6613\u5b9e\u73b0\uff0c\u624d\u9700\u8981\u8003\u8651\u5b9e \u73b0 Into\nlet a = "hello";\nlet b:String = a.into();//String \u7c7b\u578b\u5b9e\u73b0\u4e86 From<&str>\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528 into \u65b9\u6cd5\u5c06 &str \u8f6c\u6362\u4e3a String\n\n\n\n// TryFrom \u548c TryInto \u4e24\u79cd trait\uff0c\u662f From \u548c Into \u7684\u9519\u8bef\u5904\u7406\u7248\u672c\n\n')),(0,l.kt)("h3",{id:"5165-derefmut-\u548c-deref"},"5.16.5. DerefMut \u548c Deref"),(0,l.kt)("p",null,"\u7528\u4e8e\u81ea\u5b9a\u4e49\u89e3\u9664\u5f15\u7528\u8fd0\u7b97\u7b26(*)\u7684\u884c\u4e3a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'  let a = 11;  \n  let b = Box::new(a);  \n  print!("Value of *b is {}",*b); //11, box \u53ef\u4ee5\u50cf\u666e\u901a\u5f15\u7528\u4e00\u6837\u89e3\u5f15\u7528\n\n// \u6784\u9020\u81ea\u5df1\u7684 box\n#[derive(Debug)]\nstruct MyBox<T>(T);\nimpl<T> MyBox<T> {\n    pub fn new(v: T) -> Self {\n        return MyBox(v);\n    }\n}\nuse std::ops::Deref;\nimpl<T> Deref for MyBox<T> {\n    type Target = T;\n\n    fn deref(&self) -> &Self::Target {\n        &self.0\n    }\n}\n\nlet b = MyBox::new(32);\nprintln!("{:?}", b);\nprintln!("b inner = {}", *b); //32\nprintln!("b inner2 = {}", *b.deref());// 32, deref() \u8fd4\u56de\u5185\u90e8\u6570\u636e\u7684\u5f15\u7528\n\n//\u81ea\u52a8\u89e3\u5305 , deref \u7684\u5f3a\u5236\u6548\u679c\nfn prin(v: &i32) {\n    println!("{}", v);\n}\nprin(&b) // \u81ea\u52a8\u5c06 &MyBox \u5305\u88c5\u89e3\u9664, \u6210\u4e3a &i32\n\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u5982\u679c\u4e00\u4e2a\u7c7b\u578b T \u5b9e\u73b0\u4e86 Deref<Target=U>\uff0c \u5219\u8be5\u7c7b\u578b T \u7684\u5f15\u7528 (\u6216\u667a\u80fd\u6307\u9488)\u5728\u5e94\u7528\u7684\u65f6\u5019\u4f1a\u88ab \u81ea\u52a8\u8f6c\u6362\u4e3a\u7c7b\u578b U\n// String\u7c7b\u578b\u5b9e\u73b0\u4e86 Deref\nlet a = "hello".to_string();\nlet b = " world".to_string();\nlet c = a+&b;//&b\uff0c\u5b83\u5e94\u8be5\u662f\u4e00\u4e2a&Sting\u7c7b\u578b\uff0c\u800c String\u7c7b\u578b\u5b9e\u73b0\u7684 add\u65b9\u6cd5\u7684\u53f3\u503c\u53c2\u6570\u5fc5\u987b\u662f&str\u7c7b\u578b, \u4f46\u73b0\u5728\u5b83\u662f\u53ef \u4ee5\u6b63\u5e38\u8fd0\u884c\u7684\u3002\u539f\u56e0\u5c31\u662f String \u7c7b\u578b\u5b9e \u73b0\u4e86 Deref<Target=str>\nprintln!(\u201d{:?)\u2019\u201d, c); // "hello world"\n\n// \u6807\u51c6\u5e93\u4e2d\u5e38\u7528\u7684\u5176\u4ed6\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86 Deref\uff0c \u6bd4\u5982 Vec<T>\nfn foo(s : &[i32]){}\nlet v= vec![1,2,3)\nfoo(&v);//\u6240\u4ee5&Vec<T> \u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3a &[T]\u7c7b\u578b\uff0c\n\n// Box<T>\u3001 Rc<T>\u3001 Arc<T>\nlet x = Rc::new("hello");\nprintln1 (\u201d{:?}\u201d, x.chars());\n\n// \u5f53\u67d0\u7c7b\u578b\u548c\u5176\u89e3\u5f15\u7528\u76ee\u6807\u7c7b\u578b\u4e2d\u5305\u542b\u4e86\u76f8\u540c\u7684\u65b9\u6cd5\u65f6\uff0c\u7f16\u8bd1\u5668\u4e0d\u77e5\u9053\u8be5\u7528\u54ea\u4e00\u4e2a\u4e86,\u6b64\u65f6\u5c31\u9700\u8981\u624b\u52a8\u89e3\u5f15\u7528\n//  clone\u65b9\u6cd5\u5728Rc\u548c&str\u7c7b\u578b\u4e2d\u90fd\u88ab\u5b9e\u73b0\u4e86\uff0c\u6240\u4ee5\u8c03\u7528\u65f6\u4f1a\u76f4\u63a5\u8c03\u7528 Rc \u7684 clone \u65b9\u6cd5\uff0c\u5982\u679c\u60f3\u8c03\u7528 Rc \u91cc\u9762 &str \u7c7b\u578b\u7684 clone \u65b9\u6cd5\uff0c\u5219\u9700\u8981\u4f7f\u7528\u201c\u89e3 \u5f15\u7528\u201d\u64cd\u4f5c \u7b26 \u624b\u52a8\u89e3\u5f15\u7528\nlet x= Rc::new(\u201dhello\u201d),\nlet y=x.clone(); //Rc<&str>\u7684 clone \u65b9\u6cd5\nlet z = (*x) .clone() ; // &str \u7684 clone \u65b9\u6cd5\n\n// match \u5f15\u7528\u65f6\u4e5f\u9700\u8981\u624b\u52a8\u89e3\u5f15\u7528\n// \nlet x = "hello". to_string (); \nmatch &x {//\u624b\u52a8\u89e3\u5f15\u7528\u628a& String \u7c7b\u578b\u8f6c\u6362\u6210& str\n        // match x.deref()\uff0c\n        //match x.as_ref()\n        //match x.borrow()\n        //match &*x \u4f7f\u7528\u201c\u89e3\u5f15\u7528 \u201d\u64cd\u4f5c\u7b26\uff0c\u5c06 String\u8f6c\u6362\u4e3a str\uff0c\u7136\u540e\u518d\u7528\u201c\u5f15\u7528\u201d\u64cd\u4f5c\u7b26\u8f6c\u4e3a& str\n        //match&x[..]\uff0c\u8fd9\u662f\u56e0\u4e3aString\u7c7b\u578b\u7684index\u64cd\u4f5c\u53ef\u4ee5\u8fd4\u56de&\u7531\u7c7b\u578b\n    "hello" => {println! ("xxx")}\n}\n// DerefMut\u548c Deref\u7c7b\u4f3c\uff0c \u53ea\u4e0d\u8fc7\u5b83\u662f\u8fd4\u56de\u53ef\u53d8\u5f15\u7528\u7684\u3002 Deref\u4e2d\u5305\u542b\u5173\u8054\u7c7b\u578b Target, \u5b83\u8868\u793a\u89e3\u5f15\u7528\u4e4b\u540e\u7684\u76ee\u6807\u7c7b\u578b\n\n')),(0,l.kt)("h3",{id:"5166-asref-asmut"},"5.16.6. AsRef AsMut"),(0,l.kt)("p",null," \u53ef\u4ee5\u5c06\u503c\u5206\u522b\u8f6c\u6362\u4e3a\u4e0d\u53ef\u53d8\u5f15\u7528\u548c \u53ef\u53d8\u5f15\u7528"),(0,l.kt)("p",null," AsRef\u548c\u6807\u51c6\u5e93\u7684\u53e6\u5916\u4e00\u4e2a Borrow trait\u529f\u80fd\u6709\u4e9b\u7c7b\u4f3c\uff0c\u4f46\u662f AsRef\u6bd4\u8f83\u8f7b\u91cf\u7ea7\uff0c \u5b83\u53ea\u662f\u7b80\u5355\u5730\u5c06\u503c\u8f6c\u6362\u4e3a\u5f15\u7528\uff0c\u800c Borrow trait \u53ef\u4ee5\u7528\u6765\u5c06\u67d0\u4e2a\u590d\u5408\u7c7b\u578b\u62bd\u8c61\u4e3a\u62e5\u6709\u501f\u7528\u8bed\u4e49 \u7684\u7c7b\u578b"),(0,l.kt)("h3",{id:"5167-borrow-trait"},"5.16.7. Borrow trait"),(0,l.kt)("h3",{id:"5168-drop-\u8d44\u6e90\u91ca\u653e"},"5.16.8. Drop \u8d44\u6e90\u91ca\u653e"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'    //\n    //\n    // \u91ca\u653e\u8d44\u6e90 Drop trait\n    /*\n    Drop trait \u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5\uff1adrop\uff0c\u5f53\u5bf9\u8c61\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u7cfb\u7edf\u4f1a\u8fdb\u884c\u8d44\u6e90\u91ca\u653e, \u540c\u65f6\u4f1a\u81ea\u52a8\u8c03\u7528\u8be5 \u65b9\u6cd5, \u7528\u4e8e\u91ca\u653e\u7c7b\u4f3c\u4e8e\u6587\u4ef6\u6216\u7f51\u7edc\u8fde\u63a5\u7684\u8d44\u6e90\u3002, \u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u5141\u8bb8\u624b\u52a8\u8c03\u7528, \u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u8c03\u7528, \u7528\u4e8e\u91ca\u653e\u7c7b\u4f3c\u4e8e\u6587\u4ef6\u6216\u7f51\u7edc\u8fde\u63a5\u7684\u8d44\u6e90, \u6216\u8005\u91ca\u653e box \u6240\u6307\u5411\u7684\u5806\u7a7a\u95f4\n\n    \u4e5f\u53ef\u4ee5 drop(a) \u624b\u52a8\u8c03\u7528\u91ca\u653e, \u4f7f\u7528 std::mem::drop(xxx)\n\n    Box\uff0cVec\uff0cString\uff0cFile\uff0c\u4ee5\u53ca Process \u662f\u4e00\u4e9b\u5b9e\u73b0\u4e86 Drop trait \u6765\u91ca\u653e \u8d44\u6e90\u7684\u7c7b\u578b\u3002\n    */\n\n\n// \u6790\u6784\u987a\u5e8f\n// \n// - \u672c\u5730\u53d8\u91cf\u9075\u5faa\u5148\u58f0\u660e\u7684\u53d8\u91cf\u540e\u6790\u6784\u7684\u89c4\u5219 (\u8fd9\u4e5f\u7f18\u4e8e\u6854\u7ed3\u6784\u5148\u8fdb\u540e \u51fa\u7684\u7279\u6027)\n// - \u5143\u7ec4\u6574\u4f53\u6765\u8bf4\u4e5f\u5c5e\u4e8e\u672c\u5730\u53d8\u91cf, \u6240\u4ee5\u6790\u6784\u987a\u5e8f\u548c\u5c40\u90e8\u53d8\u91cf\u7684\u6790\u6784\u987a\u5e8f\u4e00\u81f4\n//         \u4f46\u5185\u90e8\u5143\u7d20\u662f\u6309\u5143\u7d20\u7684\u51fa\u73b0\u987a\u5e8f\u4f9d\u6b21\u8fdb\u884c\u6790\u6784\u7684\n// - \u7ed3\u6784\u4f53\u548c\u679a\u4e3e\u4f53 \u5185\u90e8\u5143\u7d20\u6309\u7167\u5b9a\u4e49\u65f6\u7684\u6b21\u5e8f\u6790\u6784 (\u7c7b\u4f3c\u5143\u7ec4\u7684\u6790\u6784)\n// - \u95ed\u5305\u6355\u83b7\u53d8 \u91cf \u7684\u6790\u6784\u987a\u5e8f\u548c\u95ed\u5305\u5185\u8be5\u53d8\u91cf\u7684\u6392\u5217\u987a\u5e8f \u4e00\u81f4, \u4e0e\u6355\u83b7\u53d8 \u91cf\u58f0 \u660e\u7684\u987a\u5e8f\u662f\u6ca1\u6709\u5173\u7cfb\u7684\n// \nstruct PrintDrop(&\'static str);\n    impl Drop for PrintDrop {\n        fn drop(&mut self) {\n            println!("Dropping {}", self.0)\n    }\n}\n// \u987a\u5e8f: y, x\nlet x = PrintDrop("x");\nlet y = PrintDrop("y");\n\n// \u987a\u5e8f: x, y, z, a,b,c\nlet tup1 = (PrintDrop("a"), PrintDrop("b"), PrintDrop("c"));\nlet tup2 = (PrintDrop("x"), PrintDrop("y"), PrintDrop("z"));\n\n// \u987a\u5e8f: y,x, a,b,c\nlet tup1 = (PrintDrop("a"), PrintDrop("b"), PrintDrop("c"));\nlet tup2 = (PrintDrop("x"), PrintDrop("y"), panic!());//\u7ebf\u7a0b\u7684\u5d29\u6124\u89e6\u53d1\u4e86 tup2 \u7684\u63d0\u524d\u6790\u6784, \u8fd9 \u79cd\u63d0\u524d\u6790\u6784\u7684\u987a\u5e8f\u6b63\u597d\u548c\u5c40\u90e8\u53d8\u91cf\u7684\u6790\u6784\u987a\u5e8f\u4e00\u81f4: \u5148\u58f0\u660e\u7684\u5143\u7d20\u540e\u6790\u6784\u3002\n\n\n\n\n\n// \u5c4f\u853d \u89c4\u907f drop \u68c0\u67e5(\u8df3\u8fc7 \u5185\u5b58\u81ea\u52a8\u91ca\u653e)\n// \n// \nstruct A;\nstruct B;\nstruct Foo {\n    a: A,\n    b: B\n}\nimpl Foo {\n    fn take(self) -> (A, B) {\n        // error[E0509]: cannot move out of type `Foo`, which implements the `Drop` trait\n        // \u56e0\u4e3a drop \u65b9\u6cd5\u4e2d\u53ef\u80fd\u8fd8\u9700\u8981\u7528\u5230\u8fd9\u4e24\u4e2a\u5b57\u6bb5, \u6240\u4ee5\u4e0d\u80fd\u5c06\u4ed6\u4eec\u7684\u6240\u6709\u6743\u79fb\u52a8\u5230\u5916\u90e8\n        (self.a, self.b)\n   }\n\n    // \u6b63\u786e:\n   // \u91cd\u65b0\u5b9e\u73b0take\n    fn take(mut self) -> (A, B) {\n        // \u901a\u8fc7std::mem::uninitialized()\u8fdb\u884c\u4f2a\u521d\u59cb\u5316\n        // \u7528\u4e8e\u8df3\u8fc7Rust\u7684\u5185\u5b58\u521d\u59cb\u5316\u68c0\u67e5\n        // \u5982\u679c\u6b64\u65f6\u5bf9a\u6216b\u8fdb\u884c\u8bfb\u5199\uff0c\u5219\u6709UB(\u5f15\u53d1\u672a\u5b9a\u4e49\u884c\u4e3a)\u98ce\u9669\uff0c\u4e00\u822c\u53ea\u7528\u4e8e FFI\u548c C\u8bed\u8a00\u4ea4\u4e94\n        let a = std::mem::replace(\n             &mut self.a, unsafe { std::mem::uninitialized() }\n        );\n        let b = std::mem::replace(\n            &mut self.b, unsafe { std::mem::uninitialized() }\n       );\n       // \u901a\u8fc7forget\u907f\u514d\u8c03\u7528\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7684drop\n    //    \u8fd9\u6837, \u6790\u6784\u51fd\u6570\u5c31\u4e0d\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528, \u9700\u8981\u6211\u4eec\u5728\u67d0\u4e2a\u5730\u65b9\u624b\u52a8\u91ca\u653e\u5185\u5b58\n       std::mem::forget(self);\n       (a, b)\n   }\n}\n// \u82e5\u4e0d\u5b9e\u73b0 Drop \u5219\u4e0a\u9762\u4ee3\u7801\u4e0d\u4f1a\u62a5\u9519\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        // do something\n    }\n}\n\n\n\n// \u53e6\u5916\u7684\u624b\u52a8\u91ca\u653e\u5185\u5b58\u7684\u65b9\u5f0f \n// ManuallyDrop<T>\u662f\u4e00\u4e2a\u8054\u5408\u4f53\uff0cRust\u4e0d\u4f1a\u4e3a\u8054\u5408\u4f53\u81ea\u52a8\u5b9e\u73b0Drop\u3002 \u56e0\u4e3a\u8054\u5408\u4f53\u662f\u6240\u6709\u5b57\u6bb5\u5171\u7528\u5185\u5b58\uff0c\u4e0d\u80fd\u968f\u4fbf\u88ab\u6790\u6784\uff0c\u5426\u5219\u4f1a\u5f15\u8d77\u672a\u5b9a\u4e49\u884c\u4e3a\n// (std::mem::forget<T>\u51fd\u6570\u7684\u5b9e\u73b0\u5c31\u662f\u7528\u4e86ManuallyDrop::new\u65b9\u6cd5)\n// \nuse std::mem::ManuallyDrop;\nstruct Peach;\nstruct Banana;\nstruct Melon;\nstruct FruitBox {\n    peach: ManuallyDrop<Peach>,\n    melon: Melon,\n    banana: ManuallyDrop<Banana>,\n}\nimpl Drop for FruitBox {\n   fn drop(&mut self) {\n       unsafe {\n           ManuallyDrop::drop(&mut self.peach);// \u624b\u52a8\u91ca\u653e\n           ManuallyDrop::drop(&mut self.banana);\n       }\n   }\n}\n\n')),(0,l.kt)("h3",{id:"5169-\u6807\u7b7e-trait"},"5.16.9. \u6807\u7b7e trait"),(0,l.kt)("p",null,"\u5373 \u5185\u90e8\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\u7684 trait, \u53ea\u662f\u4f5c\u4e3a\u4e00\u4e2a\u6807\u7b7e, \u8d77\u5230\u6807\u8bc6\u4f5c\u7528"),(0,l.kt)("h4",{id:"51691-send-\u548c-sync"},"5.16.9.1. Send \u548c Sync"),(0,l.kt)("p",null,"\u4e00\u822c\u7f16\u8bd1\u5668\u5e2e\u6211\u4eec\u81ea\u52a8\u5b9e\u73b0\u4e86"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u53ef\u4ee5\u5b89\u5168\u5730\u8de8\u7ebf\u7a0b\u4f20\u9012\u548c\u8bbf \u95ee \u7684\u7c7b\u578b\u7528 Send \u548c Sync \u6807\u8bb0\uff0c\u5426\u5219\u7528! Send \u548c!Sync \u6807\u8bb0 , \u8fd9\u6837\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u5c31\u80fd\u68c0\u51fa\u6570\u636e\u7ade\u4e89\u7684\u9690\u60a3\uff0c \u800c\u4e0d\u9700\u8981\u7b49\u5230\u8fd0\u884c\u65f6\u518d\u6392\u67e5\n\n// \u5b9e\u73b0\u4e86 Send \u7684\u7c7b\u578b \uff0c\u53ef\u4ee5\u5b89\u5168\u5730\u5728\u7ebf\u7a0b\u95f4\u4f20\u9012\u6240\u6709\u6743, \u5373\u53ef\u4ee5\u8de8\u7ebf\u7a0b\u79fb\u52a8\n// \u5b9e\u73b0\u4e86 Sync \u7684\u7c7b\u578b \uff0c\u53ef\u4ee5\u8de8\u7ebf\u7a0b\u5b89\u5168\u5730\u4f20\u9012\u4e0d\u53ef\u53d8\u5f15\u7528 , \u5373\u53ef\u4ee5\u8de8\u7ebf\u7a0b\u5171\u4eab\u3002\n// \n\n// \u4e4b\u6240\u4ee5\u53ef\u4ee5\u6b63\u5e38\u5730move\u53d8\u91cf\uff0c\u4e5f\u662f\u56e0\u4e3a\u6570\u7ec4x\u4e2d\u7684\u5143\u7d20\u5747\u4e3a\u539f\u751f\u6570\u636e\u7c7b\u578b\uff0c \u9ed8\u8ba4\u90fd\u5b9e\u73b0\u4e86 Send \u548c Sync \u6807\u7b7e trait\uff0c\u6240\u4ee5\u5b83\u4eec\u8de8\u7ebf\u7a0b\u4f20\u9012\u548c\u8bbf\u95ee\u90fd\u5f88\u5b89\u5168\nlet mut x=vec![1, 2, 3, 4] ;\nthread::spawn(move || x.push(1));\n\n// error\n//Rc \u6ca1\u6709\u5b9e \u73b0 Send \u548c Sync\uff0c\u6240\u4ee5\u4e0d\u80fd\u5728\u7ebf\u7a0b\u4e4b\u95f4\u4f20\u9012\u53d8 \u91cf x\n// \u56e0\u4e3a Rc\u662f\u7528\u4e8e\u5f15\u7528\u8ba1\u6570\u7684\u667a\u80fd\u6307\u9488\uff0c \u5982\u679c\u628a Rc\u7c7b\u578b\u7684\u53d8\u91cf x\u4f20\u9012\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\uff0c\u4f1a \u5bfc\u81f4\u4e0d\u540c\u7ebf\u7a0b\u7684 Rc \u53d8\u91cf\u5f15\u7528\u540c\u4e00\u5757\u6570\u636e\uff0c Rc \u5185 \u90e8\u5b9e\u73b0\u5e76\u6ca1\u6709\u505a\u4efb\u4f55\u7ebf\u7a0b\u540c\u6b65\u7684\u5904\u7406\nlet x = Rc::new(vec! [1, 2, 3, 4]);//\nthread::spawn( move || x[1]);\n\n\n// \u5bf9\u4e8e\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982\u679c\u5176\u6210\u5458\u7c7b\u578b\u5168\u90e8\u5b9e\u73b0 Send \u548c Sync\uff0c\u6b64\u7c7b\u578b\u624d\u4f1a\u88ab\u81ea \u52a8\u5b9e\u73b0 Send \u548c Sync\n")),(0,l.kt)("h4",{id:"51692-copy-trait"},"5.16.9.2. Copy trait"),(0,l.kt)("p",null,"\u533a\u5206\u503c\u8bed\u4e49\u548c\u5f15\u7528\u8bed\u4e49"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// Copy trait\uff0c\u7528\u6765\u6807\u8bc6 \u53ef \u4ee5\u6309\u4f4d \u590d\u5236\u5176\u503c \u7684\u7c7b\u578b\n// Copy \u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u4e2a\u7c7b\u578b\u9ed8\u8ba4\u91c7\u7528 copy \u8bed\u4e49\uff0c\u800c\u4e0d\u662f move \u8bed\u4e49; \u5728\u6267\u884c\u53d8\u91cf\u7ed1\u5b9a\u3001\u51fd\u6570\u53c2\u6570\u4f20\u9012\u3001\u51fd\u6570\u8fd4\u56de\u7b49\u573a\u666f\u4e0b, \u6267\u884c\u7684\u662f\u5185\u5b58\u62f7\u8d1d\u64cd\u4f5c\n\n// \u5f15\u7528\u7c7b\u578b\u65e0\u6cd5\u5b9e\u73b0 copy trait, \u867d\u7136\u5f15\u7528\u8bed\u4e49\u7c7b\u578b\u4e0d\u80fd\u5b9e\u73b0 Copy\uff0c \u4f46\u53ef\u4ee5\u5b9e\u73b0 Clone \u7684 clone \u65b9\u6cd5\uff0c \u4ee5 \u5b9e\u73b0\u6df1\u590d\u5236\n\n// Copy trait\u7ee7\u627f\u81ea Clone trait, \u8981\u5b9e\u73b0 Copy trait \u7684\u7c7b\u578b\uff0c\u5fc5\u987b\u5b9e\u73b0 Clone trait \u4e2d\u5b9a\u4e49\u7684\u65b9\u6cd5\n//  Rust \u63d0\u4f9b\u4e86\u66f4\u65b9\u4fbf\u7684 derive \u5c5e\u6027\u4f9b\u6211\u4eec\u5b8c\u6210\u8fd9\u9879\u91cd\u590d\u7684\u5de5\u4f5c\n#[derive (Copy , Clone)]\nstruct xxx {}\n// \u67d0\u4e2a\u7c7b\u578b\u6807\u6ce8\u4e3a Copy\u540e, \u5c31\u4e0d\u80fd\u968f\u4fbf\u5b9e\u73b0 Clone \u7684 clone \u65b9\u6cd5\u4e86, \u8c03\u7528 t.clone() \u65f6, \u6267\u884c\u7684\u64cd\u4f5c\u5fc5\u987b\u7b49\u540c\u4e8e\u201c\u7b80\u5355\u5185\u5b58\u62f7\u8d1d\u201d;\n// \u6240\u4ee5 \u4e00\u822c\u4f7f\u7528 #[derive(Copy, Clone)] \u8fd9\u79cd\u65b9\u5f0f\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b83\u4eec\u4fe9\u6700\u597d\u4e00\u8d77\u51fa\u73b0\uff0c\u907f\u514d\u624b\u5de5\u5b9e\u73b0 Clone \u5bfc\u81f4\u9519\u8bef\n\n\n\n// Rust \u4e3a\u5f88\u591a\u57fa\u672c\u6570\u636e\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait\uff0c\u6bd4\u5982\u5e38\u7528\u7684\u6570\u5b57\u7c7b\u578b\u3001\u5b57\u7b26( Char)\u3001\u5e03\u5c14 \u7c7b\u578b\u3001\u5355\u5143\u503c\u3001\u4e0d\u53ef\u53d8\u5f15\u7528\u7b49\n// \u68c0\u6d4b\u54ea\u4e9b\u7c7b\u578b\u5b9e\u73b0 \u4e86 Copy trait:\nfn test copy<T: Copy>(t : T) { //\u5982\u679c\u5b9e\u73b0\u4e86Copy trait\u7684\u7c7b\u578b\uff0c \u5219\u53ef\u4ee5\u6b63\u5e38\u7f16\u8bd1: \u5982\u679c\u6ca1\u6709\u5b9e\u73b0\uff0c\u5219\u4f1a\u62a5\u9519\u3002\n    println(\u201dhhh\u201d);\n}\n\n\n\n\n// \u5e76\u975e\u6240\u6709\u7c7b\u578b\u90fd\u53ef\u4ee5 \u5b9e\u73b0 Copy trait\u3002 \n// \u5bf9\u4e8e\u81ea\u5b9a\u4e49\u7c7b\u578b\u6765\u8bf4\uff0c\u5fc5\u987b\u8ba9\u6240\u6709\u7684\u6210\u5458\u90fd\u5b9e\u73b0 \u4e86 Copy trait\uff0c \u8fd9\u4e2a\u7c7b\u578b\u624d\u6709\u8d44\u683c \u5b9e\u73b0 Copy trait\u3002\n// \u5982\u679c\u662f\u6570\u7ec4\u7c7b\u578b \uff0c \u4e14\u5176\u5185\u90e8\u5143\u7d20\u90fd\u662f Copy \u7c7b\u578b\uff0c \u5219\u6570\u7ec4\u672c\u8eab\u5c31\u662f Copy \u7c7b\u578b;\n// \u5982\u679c\u662f\u5143\u7ec4\u7c7b\u578b\uff0c\u4e14\u5176\u5185\u90e8\u5143\u7d20\u90fd\u662f Copy \u7c7b\u578b\uff0c \u5219\u8be5\u5143 \u7ec4\u4f1a\u81ea\u52a8\u5b9e\u73b0Copy\n\n\n")),(0,l.kt)("h4",{id:"51693-sized-trait--\u548c-\u52a8\u6001\u7c7b\u578bdst"},"5.16.9.3. Sized trait  \u548c \u52a8\u6001\u7c7b\u578bDST"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n// sized trait \u7528\u6765\u6807\u8bc6\u7f16\u8bd1\u671f\u53ef\u786e\u5b9a\u5927\u5c0f\u7684\u7c7b\u578b\n//      \n// Unsize trait\uff0c \u76ee\u524d\u8be5 trait \u4e3a\u5b9e\u9a8c\u7279\u6027\uff0c\u7528\u4e8e\u6807\u8bc6\u52a8\u6001\u5927\u5c0f\u7c7b\u578b (DST)\n// Dynamical sized type -> DST\n    // \u8fd0\u884c\u671f\u624d\u77e5\u9053\u5927\u5c0f\u7684\u7c7b\u578b\n    // \u5982 str (\u4e0d\u662f &str \u54e6), \u7f16\u8bd1\u5668\u4e0d\u53ef\u77e5\u5927\u5c0f\n    //      &str \u8fd9\u4e2a\u7c7b\u578b\u7684\u503c\u5305\u542b\u4e24\u4e2a\u90e8\u5206, str \u7684\u5730\u5740, str \u7684\u957f\u5ea6, \u6240\u4ee5 &str \u7684\u5927\u5c0f\u7c7b\u578b\u53ef\u4ee5\u786e\u5b9a \u5373 2*usize\n    // \u5982 trait object, \u90fd\u662f\u52a8\u6001\u7c7b\u578b\n    // \u5982[T],  \u672a\u77e5\u7c7b\u578b\u7684\u6570\u7ec4\n    // \u5982 \u5305\u542b DST \u7684 struct/tuple\n\n// \u6240\u4ee5\u4e3a\u4e86\u80fd\u591f\u7f16\u8bd1\u901a\u8fc7, \u5fc5\u987b\u5c06\u52a8\u6001\u7c7b\u578b\u653e\u5230\u6307\u9488\u80cc\u540e, \u6307\u9488\u65f6 "fat pointe"\n\n//\n// compiler\u9ed8\u8ba4\u4e3a \u7c7b\u578b\u52a0\u4e0a\u4e86 Sized trait, \u5982:\nfn xxx<T: Sized>(t: T); // \u6307\u5b9a t \u4e3a\u53ef\u77e5\u5927\u5c0f\u7c7b\u578b, Sized \u53ef\u7701\u7565, \u7f16\u8bd1\u5668\u9ed8\u8ba4\u6dfb\u52a0\u4e86\n\n// ?Sized \u5305\u542b Sized \u548c unsized\nfn xxx<T: ?Sized> (t: T);// t \u4e3a \u7f16\u8bd1\u671f\u95f4\u4e0d\u53ef\u77e5\u5927\u5c0f\u7684\u7c7b\u578b or \u4e3a \u53ef\u77e5\u5927\u5c0f\u7c7b\u578b, \u544a\u8bc9 \u7f16\u8bd1\u5668, \u5230\u5e95\u662f\u90a3\u79cd\u7c7b\u578b\u4e0d\u786e\u5b9a\n\n\n\n// \u4f46\u662f\u52a8\u6001\u5927\u5c0f\u7c7b\u578b\u4e0d\u80fd\u968f\u610f\u4f7f\u7528\uff0c\u8fd8\u9700\u8981\u9075\u5faa\u5982\u4e0b\u4e09\u6761\u9650\u5236\u89c4\u5219:\n// \n// 1. \u53ea\u53ef\u4ee5\u901a\u8fc7\u80d6\u6307\u9488\u6765\u64cd\u4f5c Unsize\u7c7b\u578b\uff0c\u6bd4\u5982&[T]\u6216&Trait\n// 2. \u53d8\u91cf\u3001\u53c2\u6570\u548c\u679a\u4e3e\u53d8\u91cf\u4e0d\u80fd\u4f7f\u7528\u52a8\u6001\u5927\u5c0f\u7c7b\u578b\n// 3. \u7ed3\u6784\u4f53\u4e2d\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u5b57\u6bb5\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u5927\u5c0f\u7c7b\u578b\uff0c\u5176\u4ed6\u5b57\u6bb5\u4e0d\u53ef\u4ee5\u4f7f\u7528\n\n\n\n')),(0,l.kt)("h3",{id:"51610-default-trait"},"5.16.10. Default trait"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u4e3a struct \u63d0\u4f9b\u9ed8\u8ba4\u503c\nstruct ColoredString {\n    input: String,\n    fgcolor: String,\n    bgcolor: String,\n}\nimpl Default for ColoredString {\n    fn default() -> Self {\n        ColoredString {\n            input: String::default(),// \u8fd9\u6837\u4f7f\u7528\u5373\u53ef\n            fgcolor: String::new(),\n            bgcolor: String::new(),\n        }\n    }\n}\n\n")),(0,l.kt)("h3",{id:"51611-extend-trait"},"5.16.11. Extend trait"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u901a\u8fc7 iterator\u4e2d\u7684\u5143\u7d20, \u6269\u5145\u96c6\u5408\n// \u5305\u542b\u65b9\u6cd5:\n// fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T);\n\nlet mut s = \"Hello\".to_owned();\ns.extend(&[' ', 'R', 'u', 's', 't']);\nprintln!(\"{}\", s);//Hello Rust\n\n// String \u521a\u597d\u5b9e\u73b0\u4e86\u8fd9\u4e2a trait\n\n\n")),(0,l.kt)("h3",{id:"51612-any-trait"},"5.16.12. Any trait"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// use std::any::Any;\n\n")),(0,l.kt)("h3",{id:"51613-\u548c\u6bd4\u8f83\u6392\u5e8f\u76f8\u5173\u7684trait"},"5.16.13. \u548c\u6bd4\u8f83\u6392\u5e8f\u76f8\u5173\u7684trait"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// PartialEq\u3001 Eq\u3001 PartialOrd \u548c Ord\n// - PartialEq\u4ee3\u8868\u90e8\u5206\u7b49\u4ef7\u5173\u7cfb\uff0c\u5176\u4e2d\u5b9a\u4e49\u4e86 eq\u548c ne (\u4e0d\u7b49, \u6709\u9ed8\u8ba4\u5b9e\u73b0)\u4e24\u4e2a\u65b9\u6cd5\n// - Eq \u4ee3\u8868\u7b49\u4ef7\u5173\u7cfb\uff0c\u8be5 trait \u7ee7\u627f\u81ea PartialEq\uff0c \u4f46\u662f\u5176\u4e2d\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u65b9\u6cd5 \u3002 \u5b83\u5b9e\u9645\u4e0a \u76f8\u5f53\u4e8e\u6807\u8bb0\u5b9e\u73b0\u4e86 Eq \u7684\u7c7b\u578b\u62e5\u6709\u7b49\u4ef7\u5173\u7cfb\n// - PartialOrd\u5bf9\u5e94\u4e8e\u504f\u5e8f\uff0c\u5176\u4e2d\u5b9a\u4e49\u4e86 partial_cmp (\u5fc5\u987b\u5b9e\u73b0)\u3001 lt\u3001 le(\u5c0f\u4e8e\u7b49\u4e8e)\u3001 gt\u548c ge\u4e94\u4e2a\u65b9\u6cd5\n// - Ord\u5bf9\u5e94\u4e8e\u5168\u5e8f\uff0c\u5176\u4e2d\u5b9a\u4e49\u4e86 cmp\u3001 max\u548c min\u4e09\u4e2a\u65b9\u6cd5\n// \n// \u679a\u4e3e\u4f53\u4e3a Ordering\uff0c \u7528\u4e8e\u8868\u793a \u6bd4\u8f83\u7ed3\u679c\uff0c\u5176\u4e2d\u5b9a\u4e49\u4e86 \u5c0f\u4e8e\u3001\u7b49\u4e8e\u548c\u5927\u4e8e\u4e09\u79cd\u72b6\u6001\u3002\n\n\n   let mut v = [-5i32, 4, 1, -3, 2];\n//    \u9ed8\u8ba4\u5347\u5e8f\n    v.sort();\n    assert!(v == [-5, -3, 1, 2, 4]);\n    // \u800c sort_by \u662f\u6309 a \u548c b \u7684\u6bd4\u8f83\u7ed3\u679c\u662f\u5426\u7b49\u4e8e Less \u7684\u89c4\u5219\u8fdb\u884c\u6392\u5e8f \u7684\uff0c \u82e5\u7b49\u4e8e less, \u5219 a \u5c0f\u4e8e b\uff0c\u4e3a\u5347\u5e8f\u6392\u5217\n    v.sort_by(|a, b| a.cmp(b));\n    assert!(v == [-5, -3, 1, 2, 4]);\n    v.sort_by(|a, b| b.cmp(a));\n    assert!(v == [4, 2, 1, -3, -5]);\n    v.sort_by_key(|k| k.abs());\n   assert!(v == [1, 2, -3, 4, -5]);\n\n\n   let result = 1.0.partial_cmp(&2.0);//\u6d6e\u70b9\u6570\uff0c\u53ea\u80fd\u7528\u504f\u5e8f\u6bd4\u8f83\n    assert_eq!(result, Some(Ordering::Less));\n    let result = 1.cmp(&1);\n    assert_eq!(result, Ordering::Equal);\n    let result = "abc".partial_cmp(&"Abc");\n    assert_eq!(result, Some(Ordering::Greater));\n    let mut v: [f32; 5] = [5.0, 4.1, 1.2, 3.4, 2.5];\n    v.sort_by(|a, b| a.partial_cmp(b).unwrap());\n    assert!(v == [1.2, 2.5, 3.4, 4.1, 5.0]);\n    v.sort_by(|a, b| b.partial_cmp(a).unwrap());\n    assert!(v == [5.0, 4.1, 3.4, 2.5, 1.2]);\n')),(0,l.kt)("h2",{id:"517-\u5143\u7ec4"},"5.17. \u5143\u7ec4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n\n    // \u5143\u7ec4,\n    //\u7c7b\u578b\u53ef\u4ee5\u4e0d\u540c\n    const tup: (i32, f64, u8, &\'static str) = (500, 6.4, 1, "holla");\n    // tup.0 \u7b49\u4e8e 500\n    // tup.1 \u7b49\u4e8e 6.4\n    // tup.2 \u7b49\u4e8e 1\n\n    // \u7ed3\u6784\u5143\u7ec4\n    let (x, y, z, w) = tup;\n    // y \u7b49\u4e8e 6.4\n\n    // \u5f53\u5143\u7ec4\u4e2d\u53ea\u6709\u4e00\u4e2a\u503c\u7684\u65f6\u5019\uff0c\u9700\u8981\u52a0\u9017\u53f7\uff0c\u5373(0,)\n\n    // \u7a7a\u5143\u7ec4 / \u5355\u5143\u7c7b\u578b\n    ()\n    // \u96f6\u5927\u5c0f\u7c7b\u578b(Zero Sized Type, ZST), \u4e0d\u5360\u7a7a\u95f4\n    // \n    // \u4f7f\u7528\u573a\u666f:\n    // 1. \u5728\u5f00\u53d1\u65f6, \u67e5\u770b\u6570\u636e\u7c7b\u578b; \n    let a: () = vec![();10];// error, \u63d0\u793a expected (), foundstruct \u3001std: :vec\xb7:Vee, \u8fd9\u6837\u5c31\u77e5\u9053\u4e86\u53f3\u503c vec![(); 10]\u662f\u5411\u91cf\u7c7b\u578b\n    // 2. \u5728\u9700\u8981\u5faa\u73af\u6307\u5b9a\u6b21\u6570\u7684\u4f4d\u7f6e, \u7528\u6765\u63d0\u9ad8\u6027\u80fd (\u56e0\u4e3a Vee \u5185\u90e8\u8fed\u4ee3\u5668\u4e2d \u4f1a\u9488\u5bf9 ZST \u7c7b\u578b\u505a\u4e00\u4e9b\u4f18\u5316)\n    let v: Vee<()>= vec![(); 10];\n    for i in v {\n        // xxx\n    }\n    // 3. \u5b98\u65b9\u6807\u51c6\u5e93 \u4e2d\u7684 HashSet<T> \u548c BTreeSet<T>\n    // \u5176\u5b9e\u53ea\u662f\u628a HashMap<K, T>\u6362\u6210\u4e86 HashMap<K, ()>\uff0c \u7136\u540e\u5c31\u53ef \u4ee5\u5171\u7528 HashMap<K, T>\u4e4b\u524d\u7684\u4ee3\u7801\uff0c\u800c\u4e0d\u9700\u8981\u518d\u91cd\u65b0\u5b9e\u73b0\u4e00\u904d HashSet<T>\u4e86\u3002\n\n\n')),(0,l.kt)("h2",{id:"518-\u7ed3\u6784\u4f53"},"5.18. \u7ed3\u6784\u4f53"),(0,l.kt)("h3",{id:"5181-\u7ed3\u6784\u4f53\u57fa\u672c\u4f7f\u7528"},"5.18.1. \u7ed3\u6784\u4f53\u57fa\u672c\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n/// \u7ed3\u6784\u4f53\n/// \u7ed3\u6784\u4f53\uff08Struct\uff09\u4e0e\u5143\u7ec4\uff08Tuple\uff09\u90fd\u53ef\u4ee5\u5c06\u82e5\u5e72\u4e2a\u7c7b\u578b\u4e0d\u4e00\u5b9a\u76f8\u540c\u7684\u6570\u636e\u6346\u7ed1\u5728\u4e00\u8d77\u5f62\u6210\u6574\u4f53\n/// \u4f46\u662f\u7ed3\u6784\u4f53\u53ef\u4ee5\u7ed9\u6bcf\u4e2a\u6570\u636e\u8d77\u4e2a\u540d\u5b57\n/// \u8fd9\u6837\u8bbf\u95ee\u5b83\u6210\u5458\u7684\u65f6\u5019\u5c31\u4e0d\u7528\u8bb0\u4f4f\u4e0b\u6807\u4e86\n///\n/// \u548c c \u4e0d\u540c,  Rust \u91cc struct \u8bed\u53e5\u4ec5\u7528\u6765\u5b9a\u4e49\uff0c\u4e0d\u80fd\u58f0\u660e\u5b9e\u4f8b\uff0c\u7ed3\u5c3e\u4e0d\u9700\u8981 ; \u7b26\u53f7\n/// \u548c go \u4e0d\u540c, rust \u7684 struct \u65e0\u6cd5\u5d4c\u5957, \u53ea\u80fd\u5206\u6210\u591a\u4e2a struct \u6765\u5b9a\u4e49\n///\n/// \u7ed3\u6784\u4f53\u5fc5\u987b\u638c\u63e1\u5b57\u6bb5\u503c\u6240\u6709\u6743\uff0c\u56e0\u4e3a\u7ed3\u6784\u4f53\u5931\u6548\u7684\u65f6\u5019\u4f1a\u91ca\u653e\u6240\u6709\u5b57\u6bb5, \u6240\u4ee5\u5b57\u7b26\u4e32\u5b57\u6bb5\u4f7f\u7528 String \u4e0d\u7528 &str (\u56e0\u4e3a &str \u662f\u501f\u7528\u7684\u6240\u6709\u6743)\n///\n/// \u6ca1\u6709\u8eab\u4f53\u7684\u7ed3\u6784\u4f53\u4e3a\u5355\u5143\u7ed3\u6784\u4f53\uff08Unit Struct\uff09, \u5982 struct UnitStruct;\n/// \n///\nfn struct_demo() {\n    // \u5b9a\u4e49\n    #[derive(Debug)] // \u5728\u5b9a\u4e49 struct \u65f6\u5bfc\u5165\u8c03\u8bd5\u5e93, \u624d\u80fd print\n    struct Site {\n        domain: String,\n        name: String,\n        nation: String,\n        found: u32,\n    }\n    // \u5b9e\u4f8b\u5316, \u82e5\u662f\u7a7a struct,     let inner_a = InnerA {};\n    let domain = String::from("xiaoyureed.github.io");\n    let st = Site {\n        domain, // \u6709\u5b57\u6bb5\u540d\u79f0\u548c\u73b0\u5b58\u53d8\u91cf\u540d\u79f0\u4e00\u6837\u7684\uff0c\u53ef\u4ee5\u7b80\u5316\u4e66\u5199, \u7c7b\u4f3c JavaScript\n        name: String::from("xiaoyu"),\n        nation: String::from("China"),\n        found: 2013,\n    };\n    // \u90e8\u5206\u66f4\u65b0\n    // \u56e0\u4e3a\u6ca1\u6709\u5b9e\u73b0\u4e86 Copy trait, \u6240\u6709 st \u6240\u6709\u6743\u4f1a\u8f6c\u79fb\n    let st1 = Site {\n        domain: String::from("new domain"),\n        ..st\n    };\n\n    // \u8f93\u51fa\u7ed3\u6784\u4f53\n    // \u9700\u8981\u5b9a\u4e49 struct \u65f6\u5bfc\u5165\u8c03\u8bd5\u5e93 #[derive(Debug)]\n    println!("st = {:?}", st1);\n    // \u683c\u5f0f\u5316\u8f93\u51fa {:#?}\n    println!("st = {:#?}", st1);\n\n\n// \u53ea\u6709 \u6210\u5458\u90fd\u4e3a \u590d\u5236\u8bed\u4e49,  struct \u624d\u80fd\u81ea\u52a8 Copy derive \n#[derive(Debug,Copy,Clone)]\nstruct Book<\'a> {\n    name: &\'a str,\n    isbn: i32,\n    version: i32,\n}\nfn main(){\n    let book = Book {\n        name: "Rust\u7f16\u7a0b\u4e4b\u9053" , isbn: 20181212, version: 1\n    };\n    let book2 = Book { version: 2, ..book};\n    println!("{:?}",book);// book \u7531\u4e8e \u5b9e\u73b0 \u4e86 Copy trait, \u6240\u6709\u6743\u6ca1\u6709\u8f6c\u79fb\n    println!("{:?}",book2);\n}\n')),(0,l.kt)("h3",{id:"5182-\u5143\u7ec4\u7ed3\u6784\u4f53-and-\u5355\u5143\u7ed3\u6784\u4f53"},"5.18.2. \u5143\u7ec4\u7ed3\u6784\u4f53 and \u5355\u5143\u7ed3\u6784\u4f53"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n\n    // \u5143\u7ec4\u7ed3\u6784\u4f53\n    // \u7b80\u5316\u7684\u7ed3\u6784\u4f53, \u6ca1\u6709\u5b57\u6bb5\u540d\u79f0, \u53ea\u6709\u5b57\u6bb5\u7c7b\u578b\n    // \u662f\u4e3a\u4e86\u5904\u7406\u90a3\u4e9b\u9700\u8981\u5b9a\u4e49\u7c7b\u578b\uff08\u7ecf\u5e38\u4f7f\u7528\uff09\u53c8\u4e0d\u60f3\u592a\u590d\u6742\u7684\u7b80\u5355\u6570\u636e\n    struct Color(u8, u8, u8);\n    struct Point(f64, f64);\n    let black = Color(0, 0, 0);\n    let origin = Point(0.0, 0.0);\n    // \u4f7f\u7528\u548c\u5143\u7ec4\u4e00\u6837, \u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\u5b57\u6bb5\n    println!("black = ({}, {}, {})", black.0, black.1, black.2);\n    println!("origin = ({}, {})", origin.0, origin.1);\n    // \u76f4\u63a5\u6253\u5370\u7ed3\u6784\u4f53 \u9519\u8bef\n    // \u8981\u6253\u5370, \u4e24\u79cd\u65b9\u6cd5:\n    // 1. \u5b9a\u4e49 struct \u65f6\u7ee7\u627f #[derive(Debug)], \u7136\u540e \u4f7f\u7528 {:?} or {:#?} \u6253\u5370\n    // 2. \u4e3a struct \u5b9e\u73b0 fmt::Display \u63a5\u53e3, \u7136\u540e\u4f7f\u7528 {} \u5373\u53ef\n    // println!("tuple struct - {}", black);\n\n\n\n    // \u5355\u5143\u7ed3\u6784\u4f53 \u5373 \u7a7a\u7684\u7ed3\u6784\u4f53, \u96f6\u5927\u5c0f\u7c7b\u578b(Zero Sized Type, ZST), \u4e0d\u5360\u7a7a\u95f4\n    // \n    // \u5728Debug\u7f16\u8bd1\u6a21\u5f0f\u4e0b, \u591a\u4e2a \u7a7a\u7ed3\u6784\u4f53 \u5b9e\u4f8b\u662f\u4e0d\u540c \u7684\u5bf9\u8c61\n    // \u5728\u5728Release\u7f16\u8bd1\u6a21\u5f0f\u4e0b, \u4f1a\u88ab\u4f18\u5316\u4e3a\u540c\u4e00\u4e2a \u5bf9\u8c61 (\u5185\u5b58\u5730\u5740\u76f8\u540c)\n    //\n    // \u6807\u51c6\u5e93\u4e2d\u8868\u793a\u5168\u8303\u56f4()\u7684 RangeFull\uff0c \u5c31\u662f\u4e00\u4e2a\u5355\u5143\u7ed3\u6784\u4f53\n\n')),(0,l.kt)("h3",{id:"5183-\u7ed3\u6784\u4f53\u65b9\u6cd5"},"5.18.3. \u7ed3\u6784\u4f53\u65b9\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n    //\n    // \u7ed3\u6784\u4f53\u65b9\u6cd5\n    //\n    impl Site {\n        // &self \u5173\u952e\u5b57 \u603b\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570, \u7c7b\u4f3c Python\n        fn to_string(&self) -> String {\n            // self \u8868\u793a struct \u5b9e\u4f8b\n            format!("to string -> {:?}", self)\n        }\n    }\n    println!("st.to_string() = {}", st.to_string());\n\n    //\n    // \u7ed3\u6784\u4f53\u5173\u8054\u51fd\u6570\n    //\u7c7b\u4f3c Java \u4e2d\u7684\u9759\u6001\u65b9\u6cd5, \u8c03\u7528\u4e0d\u4f9d\u8d56 struct \u5b9e\u4f8b\n    //\n    //\u6ca1\u6709 &self \u53c2\u6570\n    impl Site {\n        fn create() -> Site { // Site \u53ef\u7528 Self \u66ff\u4ee3\n            Site {\n                domain: String::from("new domain create()"),\n                name: String::from("xiaoyu"),\n                nation: String::from("nation"),\n                found: 2020,\n            }\n        }\n    }\n    let create_site = Site::create();\n    println!("create_site = {:?}", create_site);\n\n')),(0,l.kt)("h3",{id:"5184-new-type-\u6a21\u5f0f-\u548c-\u7c7b\u578b\u522b\u540d-self\u522b\u540d"},"5.18.4. new type \u6a21\u5f0f \u548c \u7c7b\u578b\u522b\u540d Self\u522b\u540d"),(0,l.kt)("p",null,"\u5f53\u4e00\u4e2a\u5143\u7ec4\u7ed3\u6784\u4f53\u53ea\u6709\u4e00\u4e2a\u5b57\u6bb5\u7684\u65f6\u5019\uff0c\u79f0\u4e4b\u4e3a New Type \u6a21\u5f0f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// \u4f7f\u7528\u573a\u666f:\n// - \u660e\u786e\u8bed\u4e49: \u4e3a\u540c\u7c7b\u578b\u7684\u6570\u636e\u5206\u522b\u5b9a\u4e49\u65b0\u7684\u7c7b\u578b\u8fdb\u884c\u533a\u5206, \u5982 \u4e3a i32 \u7c7b\u578b\u5206\u522b\u5b9a\u4e49 Hour, Second \u7c7b\u578b (\u8fd9\u662f\u4e3a\u4e86\u80fd\u4fdd\u8bc1\u5728\u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u671f\u95f4\u5373\u53ef\u53d1\u73b0\u9519\u8bef\u3002), \u5305\u88c5\u4e86\u4e00\u5c42\n// - \u4f7f\u590d\u5236\u8bed\u4e49\u7684 \u7c7b\u578b\u5177\u6709\u79fb\u52a8\u8bed\u4e49; \u6bd4\u5982 f64 \u672c\u6765\u662f\u590d\u5236\u8bed\u4e49 \uff0c\u800c\u5305\u88c5\u4e3a Miles(f64)\u4e4b \u540e\uff0c\u56e0\u4e3a\u7ed3\u6784\u4f53\u672c\u8eab\u4e0d\u80fd\u88ab\u81ea\u52a8\u5b9e\u73b0 Copy\uff0c\u6240\u4ee5 Miles(f64)\u5c31\u6210\u4e86\u79fb\u52a8\u8bed\u4e49\u3002\n// - \u9690\u85cf\u5b9e\u9645\u7c7b\u578b\uff0c \u9650\u5236\u529f\u80fd; \u4f7f\u7528 Newtype\u6a21\u5f0f\u5305\u88c5\u7684\u7c7b\u578b\u5e76\u4e0d\u80fd\u88ab\u5916\u754c\u8bbf\u95ee\uff0c\u9664\u975e\u63d0 \u4f9b\u76f8\u5e94\u65b9\u6cd5\u3002\n// - \u7ed9\u6807\u51c6\u5e93\u4e2d\u7684\u7ed3\u6784\u5b9e\u73b0\u6807\u5e93\u4e2d\u7684 trait, \u5982\u7ed9 Vector \u5b9e\u73b0 Display trait.\n//         \u7531\u4e8e\u5b64\u513f\u89c4\u5219, \u8fd9\u660e\u663e\u4e0d\u884c, \u53ef\u4ee5\u901a\u8fc7\u7ed9 Vector \u5305\u88c5\u4e00\u5c42\u6765\u8fbe\u5230\u76ee\u7684\n    struct Wrapper(Vec<String>);\n    impl std::fmt::Display for Wrapper {\n        fn .....\n    }\n\n    //new type \u60ef\u7528\u6cd5\n    //\n    //\n    struct Years(i64);\n    struct Days(i64);\n    impl Years {\n        pub fn to_days(&self) -> Days {\n            Days(self.0 * 365)\n        }\n    }\n    impl Days {\n        /// \u820d\u53bb\u4e0d\u6ee1\u4e00\u5e74\u7684\u90e8\u5206\n        pub fn to_years(&self) -> Years {\n            Years(self.0 / 365)\n        }\n    }\n    fn old_enough(age: &Years) -> bool {\n        age.0 >= 18\n    }\n    let age = Years(5);\n    let age_days = age.to_days();\n    println!("Old enough {}", old_enough(&age));// \u53ea\u80fd\u4f20\u5e74\u5355\u4f4d\u7684\u6570\u5b57\n    println!("Old enough {}", old_enough(&age_days.to_years()));\n    \n    println!("Old enough {}", old_enough(&age_days)); //\u51fa\u9519, \u7f16\u8bd1\u671f\u95f4\u5373\u53ef\u53d1\u73b0 // \u4e0d\u80fd\u4f20\u5929\u5355\u4f4d\u7684\u6570\u5b57\n\n\n\n\n\n\n    // \u7c7b\u578b\u522b\u540d\n    // \u4e5f\u53ef\u4ee5\u4f7f\u7528 type\u5173\u952e\u5b57\u4e3a\u4e00\u4e2a\u7c7b\u578b\u521b\u5efa\u522b\u540d\uff0c\u5982\u4ee3\u7801\u7b2c 2\u884c\u4e3a i32\u7c7b\u578b\u521b\u5efa\u4e86\u4e00\u4e2a\u522b\u540d Int\uff0c \u4f46\u662f\u5176\u672c\u8d28\u8fd8\u662f i32 \u7c7b\u578b\uff0c\u5b83\u6240\u62e5\u6709\u7684\u884c\u4e3a\u548c i32 \u662f\u4e00\u6837 \u7684 \u3002\u76f8 \u6bd4\u4e4b\u4e0b\uff0c New Type \u6a21\u5f0f \u5c5e\u4e8e \u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u66f4\u52a0\u7075\u6d3b\n    //\u522b\u540d\u7684\u4e3b\u8981\u7528\u9014\u662f\u907f\u514d\u5199\u51fa\u5197\u957f\u7684\u6a21\u677f\u5316\u4ee3\u7801\uff08boilerplate code\uff09\u3002\u5982 IoResult<T> \u662f Result<T, IoError> \u7c7b\u578b\u7684\u522b\u540d\u3002\n    enum VeryVerboseEnumOfThingsToDoWithNumbers {\n        Add,\n        Subtract,\n    }\n    // Creates a type alias\n    type Operations = VeryVerboseEnumOfThingsToDoWithNumbers;\n    let x = Operations::Add; // \u80fd\u8fd9\u4e48\u7528\n    impl VeryVerboseEnumOfThingsToDoWithNumbers {\n        fn run(&self, x: i32, y: i32) -> i32 {\n            match self {\n                // Self \u522b\u540d\n                Self::Add => x + y,\n                Self::Subtract => x - y,\n            }\n        }\n    }\n    // `NanoSecond` \u662f `u64` \u7684\u65b0\u540d\u5b57\u3002\n    type NanoSecond = u64;\n    type Inch = u64;\n\n    // \u901a\u8fc7\u8fd9\u4e2a\u5c5e\u6027\u5c4f\u853d\u8b66\u544a\u3002\n    #[allow(non_camel_case_types)]\n    type u64_t = u64;\n    // `NanoSecond` = `Inch` = `u64_t` = `u64`.\n    let nanoseconds: NanoSecond = 5 as u64_t;\n    let inches: Inch = 2 as u64_t;\n}\n')),(0,l.kt)("h3",{id:"5185-\u6848\u4f8b-\u5f69\u8272\u547d\u4ee4\u884c\u8f93\u51fa"},"5.18.5. \u6848\u4f8b \u5f69\u8272\u547d\u4ee4\u884c\u8f93\u51fa"),(0,l.kt)("p",null,"main.rs "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'mod color;\nuse color::Colorized;\n\nfn main() {\n    let s=  "hello".red().on_yellow();\n    println!("{}", s);\n}\n')),(0,l.kt)("p",null,"color.rs "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'use std::fmt::Display;\n\npub struct ColorString {\n    input: String, // \u5185\u5bb9\n    fg: String,    // \u524d\u666f\n    bg: String,    // \u80cc\u666f\n}\n// \u5b9e\u73b0\u9ed8\u8ba4\u503c, \u5bf9 color string \u8fdb\u884c\u521d\u59cb\u586b\u5145\nimpl Default for ColorString {\n    fn default() -> Self {\n        ColorString {\n            input: String::default(),\n            fg: String::default(),\n            bg: String::default(),\n        }\n    }\n}\npub trait Colorized {\n    // \u5173\u8054\u5e38\u91cf, \u548c\u8054\u7c7b\u578b\u7c7b\u4f3c\uff0c \u7531\u5b9e\u73b0\u8be5 trait \u7684\u7c7b\u578b\u6765\u6307\u5b9a\u5e38\u91cf\u7684\u503c\n    // \u8fd9\u91cc\u6307\u5b9a\u4e86\u9ed8\u8ba4\u503c\n    const FG_RED: &\'static str = "31";\n    const BG_YELLOW: &\'static str = "43";\n\n    fn red(self) -> ColorString;\n\n    fn on_yellow(self) -> ColorString;\n}\n\nimpl Colorized for ColorString {\n    fn red(self) -> ColorString {\n        ColorString {\n            fg: String::from(Self::FG_RED),\n            ..self\n        }\n    }\n\n    fn on_yellow(self) -> ColorString {\n        ColorString {\n            bg: String::from(Self::BG_YELLOW),\n            ..self\n        }\n    }\n\n    const FG_RED: &\'static str = "31";\n\n    const BG_YELLOW: &\'static str = "43";\n}\n\nimpl<\'a> Colorized for &\'a str {\n    fn red(self) -> ColorString {\n        ColorString {\n            input: String::from(self),\n            fg: String::from(Self::FG_RED),\n            ..ColorString::default()\n        }\n    }\n\n    fn on_yellow(self) -> ColorString {\n        ColorString {\n            input: String::from(self),\n            bg: String::from(Self::BG_YELLOW),\n            ..ColorString::default()\n        }\n    }\n\n    const FG_RED: &\'static str = "31";\n\n    const BG_YELLOW: &\'static str = "43";\n}\nimpl ColorString{\n    // \u7ec4\u88c5 ansi \u7801\n    // \\xlB[43;31m, \n    fn compute_style(&self) -> String {\n        let mut res = String::from("\\x1B[");// ansi \u7801\u8d77\u59cb\n        let mut has_wrote = false;\n        if !self.bg.is_empty() {\n            res.push_str(&self.bg);\n            has_wrote = true;\n        }\n        if !self.fg.is_empty() {\n            if has_wrote {\n                res.push(\';\');\n            }\n            res.push_str(&self.fg);\n        }\n        res.push(\'m\');// ansi \u7801\u7ed3\u675f\n        res\n    }\n}\nimpl Display for ColorString {\n    fn fmt(&self, f: &mut std::fmt::Formatter<\'_>) -> std::fmt::Result {\n        f.write_str(&self.compute_style())?;\n        write!(f, "{}", self.input)?;\n        write!(f, "\\x1B[0m")?;\n        Ok(())\n    }\n}\n')),(0,l.kt)("h2",{id:"519-\u679a\u4e3e"},"5.19. \u679a\u4e3e"),(0,l.kt)("h3",{id:"5191-\u679a\u4e3e\u57fa\u672c\u4f7f\u7528"},"5.19.1. \u679a\u4e3e\u57fa\u672c\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n/// \u679a\u4e3e\u7c7b\n///\n/// \u679a\u4e3e\u5143\u7d20\u53ef\u4ee5\u5404\u4e0d\u76f8\u540c\n///\nfn enum_demo() {\n    println!("-------------enum demo-----------------------");\n\n\n       enum Resp<T, E> {\n            Obj(T),\n            Err(E),\n        }\n\n        fn divide(a: i32, b: i32) -> Resp<i32, String> {\n            if b == 0 {\n                return Resp::Err("\u5206\u6bcd\u4e0d\u80fd\u4e3a\u96f6".to_owned());\n            }\n            Resp::Obj(a / b)\n        }\n\n        let a = divide(4, 2);\n        let b = divide(4, 0);\n\n        match a {\n            Resp::Obj(n) => println!("n: {}", n),\n            _ => {}\n        }\n        match b {\n            Resp::Err(msg) => println!("msg: {}", &msg),\n            _ => {}\n        }\n\n\n    #[derive(Debug)]\n    enum Book {\n        Papery,\n        Book1(i32),\n        Book2(String),\n        Book3 {field1: String, field2: String},\n    }\n    let book = Book::Papery;\n    println!(" enum book = {:?}", book);\n\n    // \u5b9e\u4f8b\u5316\u5e26\u5c5e\u6027\u7684\u679a\u4e3e\u7c7b\n    let boot1 = Book::Book1(11);\n    // \u9519\u8bef, \u6ca1\u8fd9\u4e2a\u8bed\u6cd5\n    println!("book1.0 = {}", boot1.0);\n    // \u6b63\u786e\n    println!("book1 = {:?}", boot1);\n\n    // \u8bbf\u95ee\u679a\u4e3e\u7c7b\u7684\u5c5e\u6027, \u5fc5\u987b\u501f\u52a9 match\n    let book3 = Book::Book3{\n        field1: String::from("hello"),\n        field2: String::from("world"),\n    };\n    match book3 {\n        Book::Papery => println!("book"),\n        // \u5bf9\u4e8e \u5143\u7ec4, \u7531\u4e8e\u6ca1\u6709\u5b57\u6bb5\u540d\u79f0, \u9700\u8981\u4e34\u65f6\u6307\u5b9a\u4e00\u4e2a\u5f62\u53c2\n        Book::Book1(i) => println!("book1.i = {}", i),\n        Book::Book2(s) => println!("book2.s = {}", s),\n        Book::Book3{field1, field2} => {\n            println!("book3.field1 = {}, book3.field2 = {}", field1, field2);\n        },\n        _ =>  println!("no match"),\n    }\n\n\n')),(0,l.kt)("h3",{id:"5192-option"},"5.19.2. Option"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n// Option \u679a\u4e3e\u7c7b\n    //\u662f Rust \u6807\u51c6\u5e93\u4e2d\u7684\u679a\u4e3e\u7c7b\uff0c\u8fd9\u4e2a\u7c7b\u7528\u4e8e\u586b\u8865 Rust \u4e0d\u652f\u6301 null \u5f15\u7528\u7684\u7a7a\u767d\n    //\n    // enum Option<T> {\n    //    Some(T),\n    //    None,\n    // }\n    // \n\n    // \u4f7f\u7528\u573a\u666f:\n    // - \u521d\u59cb\u5316\u503c\n    // - \u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c, \u8868\u793a\u7a7a, or \u51fa\u73b0\u7684\u7b80\u5355\u9519\u8bef\n    // - \u4f5c\u4e3a\u51fd\u6570\u53ef\u9009\u53c2\u6570\n    // - \u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u53ef\u9009\u5b57\u6bb5\n    // - \u4f5c\u4e3a\u7ed3\u6784\u4f53\u4e2d\u53ef\u501f\u51fa/\u8f7d\u5165\u7684\u5b57\u6bb5\n    // - \u4ee3\u8868\u7a7a\u6307\u9488\n\n    // \u89e3\u5f00\u53ef\u4ee5\u901a\u8fc7 match \u6a21\u5f0f\u5339\u914d, \n    // or:\n    // \u901a\u8fc7 unwrap \u7cfb\u5217\u65b9\u6cd5\n    // - expect("error message") \u89e3\u5f00 Some, \u82e5 None, \u5219 panic!("error message")\n    // -  unwrap()    \u89e3\u5f00 Some, \u82e5\u78b0\u5230 None, \u5219 panic\n    // - unwrap_or(T)  \u89e3\u5f00 Some, \u82e5\u78b0\u5230 None, \u5219 \u8fd4\u56de\u6307\u5b9a\u7684\u9ed8\u8ba4\u503c\n    // - unwrap_or_else(FnOnce()->T) \u89e3\u5f00 Some, \u78b0\u5230 None, \u5219\u6267\u884c\u4e00\u6bb5\u95ed\u5305 \n\n\n    let opt = Option::Some("Hello"); // opt \u5141\u8bb8\u4e3a\u7a7a\n    match opt {\n        Option::Some(something) => {\n            println!("{}", something);\n        },\n        Option::None => {\n            println!("opt is nothing");\n        }\n    }\n    // \u76f4\u63a5\u5b9a\u4e49\u4e00\u4e2a &str \u7c7b\u578b\u7684\u7a7a\u503c\n    //Option \u662f Rust \u7f16\u8bd1\u5668\u9ed8\u8ba4\u5f15\u5165\u7684\uff0c\u5728\u4f7f\u7528\u65f6\u53ef\u4ee5\u7701\u7565 Option:: \u76f4\u63a5\u5199 None \u6216\u8005 Some()\u3002\n    let opt: Option<&str> = None;\n    match opt {\n        Some(something) => {\n            println!("{}", something);\n        },\n        None => {\n            println!("opt is nothing");\n        }\n    }\n\n\n    // \n    // \u6d41\u5f0f\u5904\u7406\n    // \u7ec4\u5408\u7b97\u5b50 combinator: \u7b80\u5316 match \u5904\u7406\n    // \n    // map()\n    // map_or() \u53ef\u4ee5\u4e3a None \u6307\u5b9a\u9ed8\u8ba4\u503c\n    // map_or_else()\n    //\n    // \u63a5\u53d7\u4e00\u4e2a\u51fd\u6570f, \u8fd4\u56de\u4e00\u4e2aoption, \u8fd9\u4e2a\u51fd\u6570f:\n    //  - \u53c2\u6570\u4e3aoption\u5305\u542b\u7684\u5143\u7d20, \u8fd4\u56de\u503c\u4e3a\u5904\u7406\u540e\u7684\u5143\u7d20\n    //\n    // \n    // \u8981\u6c42\u5904\u7406\u7684option\u4e2d\u5143\u7d20\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\n    // \n    // \n    #[derive(Debug)] enum Food { Apple, Potato, Banana}\n    #[derive(Debug)] struct Peeled(Food);//\u524a\u76ae\u7684\u98df\u7269\n    #[derive(Debug)] struct Chopped(Food);//\u5207\u5757\u7684\u98df\u7269\n    #[derive(Debug)] struct Cooked(Food);// \u70f9\u716e\u7684\u98df\u7269\n    fn process(food: Option<Food>) -> Option<Cooked> {\n        food.map(|foo| Peeled(foo))// \u95ed\u5305\u53c2\u6570\u662fFood \u7c7b\u578b, \u8fd9\u91cc\u662f\u89e3\u5f00\u4e86 Option, \u8fd4\u56de Option<Peeled> \u7c7b\u578b\n            .map(|Peeled(foo)| Chopped(foo)) // \u53c2\u6570\u662f Peeled \u7c7b\u578b, \u8fd9\u91cc\u89e3\u5f00\u4e86Option, Peeled\n            .map(|Chopped(foo)| Cooked(foo))\n    }\n    match process(Some(Food::Apple)) {\n        Some(cooked) => println!("cooked: {:?}", cooked),\n        _ => println!("error"),\n    }\n\n    //\n    // and_then() \n    //\n    //\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570f\u4f5c\u4e3a\u53c2\u6570, \u8fd4\u56deoption, \u51fd\u6570f\u6ee1\u8db3: \n    //- \u53c2\u6570\u4e3a option \u5305\u542b\u7684\u5143\u7d20, \u8fd4\u56de\u4e3aoption\n    // \n    // \u8981\u6c42\u5904\u7406\u7684option\u4e2d\u5143\u7d20\u662f\u76f8\u540c\u7c7b\u578b, \u6bd4\u5982\u90fd\u5c5e\u4e8e\u67d0\u4e2a\u679a\u4e3e\u7c7b\n    // \n    //\n    fn to_potato(food: Food) -> Option<Food> {\n        Some(Food::Potato)\n    }\n    fn to_banana(food: Food) -> Option<Food> {\n        Some(Food::Banana)\n    }\n    match to_potato(Food::Apple).and_then(to_banana) {\n        Some(banana) => println!("banana: {:?}", banana),\n        _ => println!("error"),\n    }\n\n\n\n\n')),(0,l.kt)("h3",{id:"5193-c-\u98ce\u683c\u7684\u679a\u4e3e"},"5.19.3. c \u98ce\u683c\u7684\u679a\u4e3e"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'    //\n    // \u62e5\u6709\u9690\u5f0f\u8fa8\u522b\u503c\uff08implicit discriminator\uff0c\u4ece 0 \u5f00\u59cb\uff09\u7684 enum\n    enum Number {\n        Zero,\n        One,\n        Two,\n    }\n    // c \u98ce\u683c\u679a\u4e3e\n    // \u62e5\u6709\u663e\u5f0f\u8fa8\u522b\u503c\uff08explicit discriminator\uff09\u7684 enum\n    enum Color {\n        Red = 0xff0000,\n        Green = 0x00ff00,\n        Blue = 0x0000ff,\n    }\n    // `enum` \u53ef\u4ee5\u8f6c\u6210\u6574\u5f62\u3002\n    println!("zero is {}", Number::Zero as i32);//0\n    println!("one is {}", Number::One as i32);//1\n    println!("roses are #{:06x}", Color::Red as i32);//ff0000\n    println!("violets are #{:06x}", Color::Blue as i32);//0000ff\n\n')),(0,l.kt)("h3",{id:"5194-\u6848\u4f8b-\u5f69\u8272\u547d\u4ee4\u884c\u8f93\u51fa\u4f18\u5316"},"5.19.4. \u6848\u4f8b \u5f69\u8272\u547d\u4ee4\u884c\u8f93\u51fa\u4f18\u5316"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'use std::convert::From;\nuse std::str::FromStr;\nuse std::string::String;\nuse std::fmt;\n\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\nenum Color {\n    Red,\n    Yellow,\n    Blue,\n}\n\nimpl Color {\n    pub fn to_fg_str(&self) -> &str {\n        match *self {\n            Color::Red => "31",\n            Color::Yellow => "33",\n            Color::Blue => "34",\n        }\n    }\n    pub fn to_bg_str(&self) -> &str {\n        match *self {\n            Color::Red => "41",\n            Color::Yellow => "43",\n            Color::Blue => "44",\n        }\n    }\n}\n\nimpl<\'a> From<&\'a str> for Color {\n    fn from(src: &str) -> Self {\n        // parse \u65b9\u6cd5\uff0c\u8981\u6c42\u76ee\u6807\u7c7b\u578b\u5fc5\u987b\u5b9e\u73b0 FromStr\n        src.parse().unwrap_or(Color::Red)\n    }\n}\nimpl From<String> for Color {\n    fn from(src: String) -> Self {\n        src.parse().unwrap_or(Color::Red)\n    }\n}\nimpl FromStr for Color {\n    type Err = ();\n    //  from s\u4ed5 \u65b9\u6cd5\u5305\u542b\u4e86 \u9519\u8bef\u5904\u7406\u76f8\u5173\u7684\u4ee3\u7801\n    fn from_str(src: &str) -> Result<Self, Self::Err> {\n        let src = src.to_lowercase();\n        match src.as_ref() {\n            "red" => Ok(Color::Red),\n            "yellow" => Ok(Color::Yellow),\n            "blue" => Ok(Color::Blue),\n            _ => Err(()),\n        }\n    }\n}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\nstruct ColoredString {\n    input: String,\n    fgcolor: Option<Color>,\n    bgcolor: Option<Color>,\n}\n\nimpl ColoredString {\n    fn compute_style(&self) -> String {\n        let mut res = String::from("\\x1B[");\n        let mut has_wrote = false;\n        if let Some(ref bgcolor) = self.bgcolor {\n            if has_wrote {\n                res.push(\';\');\n            }\n            res.push_str(bgcolor.to_bg_str());\n            has_wrote = true;\n        }\n        if let Some(ref fgcolor) = self.fgcolor {\n            if has_wrote {\n                res.push(\';\');\n            }\n            res.push_str(fgcolor.to_fg_str());\n        }\n        res.push(\'m\');\n        res\n    }\n}\n\nimpl Default for ColoredString {\n    fn default() -> Self {\n        ColoredString {\n            input: String::default(),\n            fgcolor: None,\n            bgcolor: None,\n        }\n    }\n}\n\n// impl<\'a> From<&\'a str> for ColoredString {\n//     fn from(s: &\'a str) -> Self {\n//         ColoredString { input: String::from(s), ..ColoredString::default() }\n//     }\n// }\n\ntrait Colorize {\n    fn red(self) -> ColoredString;\n    fn yellow(self) -> ColoredString;\n    fn blue(self) -> ColoredString;\n    // Color\u5b9e\u73b0\u4e86 From\uff0c\u6240\u4ee5\u5bf9\u4e8e String\u548c&\u2019a str\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u5747\u53ef\u901a \u8fc7 into \u65b9\u6cd5\u8f6c\u6362\u4e3a Color\n    fn color<S: Into<Color>>(self, color: S) -> ColoredString;\n    fn on_red(self) -> ColoredString;\n    fn on_yellow(self) -> ColoredString;\n    fn on_blue(self) -> ColoredString;\n    fn on_color<S: Into<Color>>(self, color: S) -> ColoredString;\n}\nimpl Colorize for ColoredString {\n    fn red(self) -> ColoredString {self.color(Color::Red)}\n    fn yellow(self) -> ColoredString {self.color(Color::Yellow)}\n    fn blue(self) -> ColoredString {self.color(Color::Blue)}\n    fn color<S: Into<Color>>(self, color: S) -> ColoredString {\n        ColoredString { fgcolor: Some(color.into()), ..self }\n    }\n    fn on_red(self) -> ColoredString {self.on_color(Color::Red)}\n    fn on_yellow(self) -> ColoredString {self.on_color(Color::Yellow)}\n    fn on_blue(self) -> ColoredString {self.on_color(Color::Blue)}\n    fn on_color<S: Into<Color>>(self, color: S) -> ColoredString {\n        ColoredString { bgcolor: Some(color.into()), ..self }\n    }\n}\nimpl<\'a> Colorize for &\'a str {\n    fn red(self) -> ColoredString {self.color(Color::Red)}\n    fn yellow(self) -> ColoredString {self.color(Color::Yellow)}\n    fn blue(self) -> ColoredString {self.color(Color::Blue)}\n    fn color<S: Into<Color>>(self, color: S) -> ColoredString {\n        ColoredString {\n            fgcolor: Some(color.into()),\n            input: String::from(self),\n            ..ColoredString::default()\n        }\n    }\n    fn on_red(self) -> ColoredString {self.on_color(Color::Red)}\n    fn on_yellow(self) -> ColoredString {self.on_color(Color::Yellow)}\n    fn on_blue(self) -> ColoredString {self.on_color(Color::Blue)}\n    fn on_color<S: Into<Color>>(self, color: S) -> ColoredString {\n        ColoredString {\n            bgcolor: Some(color.into()),\n            input: String::from(self),\n            ..ColoredString::default()\n        }\n    }\n}\n\nimpl fmt::Display for ColoredString {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let mut input = &self.input.clone();\n\n        try!(f.write_str(&self.compute_style()));\n        try!(f.write_str(input));\n        try!(f.write_str("\\x1B[0m"));\n        Ok(())\n    }\n}\n\nfn main() {\n    let red = "red".red();\n    println!("{}", red);\n    let yellow = "yellow".yellow().on_blue();\n    println!("{}", yellow);\n    let blue = "blue".blue();\n    println!("{}", blue);\n    let red = "red".color("red");\n    println!("{}", red);\n    let yellow = "yellow".on_color("yellow");\n    println!("{}", yellow);\n}\n')),(0,l.kt)("h3",{id:"5195-\u5b9e\u4f8b-\u521b\u5efa\u94fe\u8868"},"5.19.5. \u5b9e\u4f8b \u521b\u5efa\u94fe\u8868"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n    //\n    //\n    // enum \u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u5c31\u662f\u521b\u5efa\u94fe\u8868\uff08linked-list\uff09\n    //\n    //\n    //\n    use List::*;\n\n    enum List {\n        // Cons\uff1a\u5143\u7ec4\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u94fe\u8868\u7684\u4e00\u4e2a\u5143\u7d20\u548c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u8282\u70b9\u7684\u6307\u9488\n        Cons(u32, Box<List>),\n        // Nil\uff1a\u672b\u7ed3\u70b9\uff0c\u8868\u660e\u94fe\u8868\u7ed3\u675f\n        Nil,\n    }\n\n    // \u53ef\u4ee5\u4e3a enum \u5b9a\u4e49\u65b9\u6cd5\n    impl List {\n        // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 List \u5b9e\u4f8b\n        fn new() -> List {\n            Nil\n        }\n\n        // \u5904\u7406\u4e00\u4e2a List\uff0c\u5728\u5176\u5934\u90e8\u63d2\u5165\u65b0\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u8be5 List\n        // self \u4e0d\u52a0 &\n        fn prepend(self, elem: u32) -> List {\n            // `Cons` \u540c\u6837\u4e3a List \u7c7b\u578b\n            Cons(elem, Box::new(self))\n        }\n\n        // \u8fd4\u56de List \u7684\u957f\u5ea6\n        fn len(&self) -> u32 {\n            // `self` \u4e3a `&List` \u7c7b\u578b\uff0c`*self` \u4e3a `List` \u7c7b\u578b\uff0c\u5339\u914d\u4e00\u4e2a\u5177\u4f53\u7684 `T`\n            // \u7c7b\u578b\u8981\u597d\u8fc7\u5339\u914d\u5f15\u7528 `&T`\u3002\n            match *self {\n                // \u4e0d\u80fd\u5f97\u5230 tail \u7684\u6240\u6709\u6743\uff0c\u56e0\u4e3a `self` \u662f\u501f\u7528\u7684\uff1b\u6240\u4ee5\u8981\u4f7f\u7528\u5f15\u7528\n                // \u56e0\u6b64\u4f7f\u7528\u4e00\u4e2a\u5bf9 tail \u7684\u5f15\u7528\n                Cons(_, ref tail) => 1 + tail.len(),\n                // \uff08\u9012\u5f52\u7684\uff09\u57fa\u51c6\u60c5\u5f62\uff08base case\uff09\uff1a\u4e00\u4e2a\u957f\u5ea6\u4e3a 0 \u7684\u7a7a\u5217\u8868\n                Nil => 0\n            }\n        }\n\n        // \u8fd4\u56de\u5217\u8868\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff08\u8be5\u5b57\u7b26\u4e32\u662f\u5806\u5206\u914d\u7684\uff09\n        fn stringify(&self) -> String {\n            match *self {\n                Cons(head, ref tail) => {\n                    // `format!` \u548c `print!` \u7c7b\u4f3c\uff0c\u4f46\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5806\u5206\u914d\u7684\u5b57\u7b26\u4e32\uff0c\n                    format!("{}, {}", head, tail.stringify())\n                },\n                Nil => {\n                    format!("Nil")\n                },\n            }\n        }\n        // // \u521b\u5efa\u4e00\u4e2a\u7a7a\u94fe\u8868\n        // let mut list = List::new();\n\n        // // \u8ffd\u52a0\u4e00\u4e9b\u5143\u7d20\n        // list = list.prepend(1);\n        // list = list.prepend(2);\n        // list = list.prepend(3);\n\n        // // \u663e\u793a\u94fe\u8868\u7684\u6700\u540e\u72b6\u6001\n        // println!("linked list has length: {}", list.len());\n        // println!("{}", list.stringify());\n    }\n')),(0,l.kt)("h2",{id:"520-match-\u6a21\u5f0f\u5339\u914d"},"5.20. match \u6a21\u5f0f\u5339\u914d"),(0,l.kt)("h3",{id:"5201-\u6a21\u5f0f\u5339\u914d\u7b80\u5355\u4f7f\u7528"},"5.20.1. \u6a21\u5f0f\u5339\u914d\u7b80\u5355\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n/// match \u6a21\u5f0f\u5339\u914d\n/// \u7c7b\u4f3c Java \u4e2d\u7684 switch\n/// \n/// \u5fc5\u987b\u7a77\u5c3d\u6240\u6709\u5206\u652f (\u4f7f\u7528 _ \u5ffd\u7565\u67d0\u4e2a\u60c5\u51b5), \u6bcf\u4e2a\u5206\u652f\u8fd4\u56de\u540c\u4e2a\u7c7b\u578b \n///\nfn match_demo() {\n\n    println!("------------------------ match demo ------------------------");\n\n    // \u53ef\u4ee5\u5bf9\u679a\u4e3e\u7c7b, \u5bf9\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u548c\u5b57\u7b26\u4e32\u5207\u7247\u5f15\u7528\uff08&str\uff09\u7c7b\u578b\u7684\u6570\u636e\u8fdb\u884c\u5206\u652f\u9009\u62e9,    \n\n    // match \u8fd4\u56de\u7684\u53d8\u91cf\n    let a = match "hello".len() {\n        5 => "len = 5",\n        0 => "len = 0",\n        _ => "unkonwn len",\n    };\n    println!("{}", a);\n\n\n    // \u4f5c\u4e3a\u51fd\u6570\u8fd4\u56de\u503c\n    //\n    // \u5b9e\u73b0\u4e00\u4e2a\u7f13\u5b58, \u4fdd\u5b58\u7b2c\u4e00\u6b21\u5904\u7406\u540e\u7684\u503c\n    //\n    struct Cache<T> where T: Fn(i32) -> i32 {  // \u51fd\u6570\u7c7b\u578b\u4f5c\u4e3a\u6cdb\u578b, Fn \u662f\u4e00\u4e2a trait\n        calc: T, \n        value: Option<i32>,\n    }\n    impl<T: Fn(i32) -> i32> Cache<T>{\n        fn new(caculator: T) -> Self {\n            Cache {\n                caculator: caculator,\n                value: None,\n            }\n        }\n        \n        fn value(&mut self, arg: i32) -> i32 { \n            // \u5916\u5c42 match \u6ca1\u6709 return, \u6ca1\u6709 \u5206\u53f7 \n            match self.value {\n                Some(v) => v, // \u8fd4\u56de\u503c\u53ea\u662f\u8fd4\u56de\u7ed9 match \u8868\u8fbe\u5f0f, \u4e0d\u662f\u76f4\u63a5\u8fd4\u56de\u7ed9\u4e86\u5916\u5c42\u7684\u51fd\u6570, \u82e5\u60f3\u76f4\u63a5\u8fd4\u56de\u7ed9\u51fd\u6570, \u9700\u8981 return \u5173\u952e\u5b57\n                None => {\n                    println!("\u7b2c\u4e00\u6b21, arg = {}", arg);\n                    let v = (self.caculator)(arg);// \u5fc5\u987b\u6709\u62ec\u53f7\n                    self.value = Some(v);// self \u5fc5\u987b\u53ef\u53d8\n                    v\n                }\n            }\n        }\n    }\n    let mut ca = Cache::new(|x| x+1);// \u8fd9\u91cc\u53ef\u4ee5\u7701\u7565\u53c2\u6570\u7c7b\u578b\u662f\u56e0\u4e3a\u7c7b\u578b\u4fe1\u606f\u5b9a\u4e49\u5728\u524d\u9762\u7684\u6cdb\u578b\u4e2d\u4e86\n    println!("arg = 1, v = {}", ca.value(1));\n    println!("arg = 1, v = {}", ca.value(1));\n\n    // \u548c if \u5408\u7528\u7684\u5339\u914d\n    match value.log2() {\n       x if x.is_normal() => Some(x),\n       _                      => None\n   }\n\n')),(0,l.kt)("h3",{id:"5202-if-lef-while-let-\u8bed\u6cd5\u7cd6"},"5.20.2. if lef while let \u8bed\u6cd5\u7cd6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'    // if let \u8bed\u6cd5\u7cd6\n    //\u9002\u7528\u4e8e\u53ea\u533a\u5206\u4e24\u79cd\u60c5\u51b5\u7684 match \u8bed\u53e5\n    // \u8bed\u6cd5:\n    // if let \u5339\u914d\u503c = \u6e90\u53d8\u91cf {\n    //    \u8bed\u53e5\u5757\n    // }\n    //\n    //\n    enum Book {\n        Papery(u32),\n        Electronic(String)\n    }\n    let book = Book::Electronic(String::from("url"));\n    if let Book::Papery(index) = book {\n        println!("Papery {}", index);\n    } else {\n        println!("Not papery book");\n    }\n\n\n    // \u7c7b\u4f3c\u7684\u8fd8\u6709 while let \u8bed\u6cd5\u7cd6\n    while let Some(v) = xx_vec.pop() {\n        println!("{}", v);\n    }\n\n    \n\n}\n\n')),(0,l.kt)("h2",{id:"521-\u9519\u8bef\u5904\u7406"},"5.21. \u9519\u8bef\u5904\u7406"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.v2ex.com/t/843118#reply6"},"https://www.v2ex.com/t/843118#reply6")),(0,l.kt)("h3",{id:"5211-\u65ad\u8a00"},"5.21.1. \u65ad\u8a00"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// assert \u7cfb\u5217\u5b8f\u5728\u8c03\u8bd5( Debug)\u548c\u53d1\u5e03( Release)\u6a21\u5f0f\u4e0b\u5747\u53ef\u7528\uff0c \u5e76\u4e14\u4e0d\u80fd\u88ab\u7981\u7528\u3002 debug_assert\u7cfb\u5217\u5b8f\u53ea\u5728\u8c03\u8bd5\u6a21\u5f0f\u4e0b\u8d77\u4f5c\u7528\n// \u5c3d\u91cf\u4f7f\u7528 debug_assert \u7cfb\u5217\u5b8f\u8f83\u5c0f\u6027\u80fd\u5f00\u9500\n// \u5e95\u5c42\u5b9e\u9645\u4e5f\u662f\u4f7f\u7528 panic! \u5b8f\u5f15\u53d1\u7ebf\u7a0b\u6050\u614c\n\n// \u2022 assert!\uff0c \u7528\u4e8e\u65ad\u8a00\u5e03\u5c14\u8868\u8fbe\u5f0f\u5728\u8fd0\u884c\u65f6\u4e00\u5b9a\u8fd4\u56de true\u3002\n// \u2022 assert_eq!\uff0c \u7528\u4e8e\u65ad \u8a00\u4e24\u4e2a\u8868\u8fbe\u5f0f\u662f\u5426\u76f8\u7b49(\u4f7f\u7528 PartialEq)\u3002\n// \u2022 assert_ne!\uff0c \u7528\u4e8e\u65ad\u8a00\u4e24\u4e2a\u8868\u8fbe\u5f0f\u662f\u5426\u4e0d\u76f8\u7b49(\u4f7f\u7528 PartialEq)\u3002\n// \u2022 debug_assert!\uff0c \u7b49\u4ef7\u4e8e asse\u6b64!\uff0c\u53ea\u80fd\u7528\u4e8e\u8c03\u8bd5\u6a21\u5f0f\u3002\n// \u2022 debug assert_eq!\uff0c \u7b49\u4ef7\u4e8e asse\u6b64\u4e00eq!\uff0c\u53ea\u80fd\u7528\u4e8e\u8c03\u8bd5\u6a21\u5f0f\u3002\n// \u2022 debug_assert_ne!\uff0c \u7b49\u4ef7\u4e8e assert ne!\uff0c\u53ea\u80fd\u7528\u4e8e\u8c03\u8bd5\u6a21\u5f0f \u3002\n\n// \u5747\u4f1a\u5f15\u53d1\u7ebf\u7a0b\u6050\u614c, \u540c\u65f6\u8f93\u51fa\u9519\u8bef\u4fe1\u606f\nassert! (x,"x wasn\u2019t true");\ndebug_assert!(a + b == 30,"a={), b = {}", a, b);\n')),(0,l.kt)("h3",{id:"5212-panic-\u548c-abort"},"5.21.2. panic \u548c Abort"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// panic \u4e3a\u7ebf\u7a0b\u6050\u614c, \u4f1a\u9020\u6210\u5e94\u7528\u7a0b \u5e8f\u4ee5\u975e\u96f6\u9000\u51fa\u7801\u9000\u51fa\u8fdb\u7a0b\uff0c \u4e5f\u5c31\u662f\u53d1\u751f\u5d29\u6e83\n// Abort \u4e3a\u7ebf\u7a0b\u7ec8\u6b62, \u5c06\u8fdb\u7a0b \u6b63\u5e38\u4e2d\u6b62 \n// \n/// RUST_BACKTRACE=1 cargo run \u8fd9\u79cd\u65b9\u5f0f\u8fd0\u884c\u5e26\u6709\u56de\u6eaf, \u78b0\u5230 panic!("xxx") \u4f1a\u663e\u793a backtrace\n/// \n/// \u5982\u679c\u60f3\u4f7f\u4e00\u4e2a\u53ef\u6062\u590d\u9519\u8bef\u6309\u4e0d\u53ef\u6062\u590d\u9519\u8bef\u5904\u7406(\u7c7b\u6bd4java \u4e2d \u5c06 exceptin \u8f6c\u4e3a runtime exception)\uff0cResult \u7c7b\u63d0\u4f9b\u4e86\u4e24\u4e2a\u529e\u6cd5\uff1aunwrap() \u548c expect(message: &str) \n//  \n/// \n/// https://rust-cli.github.io/book/tutorial/errors.html\n/// \nfn error_handling() {\n\n    // \u4f7f\u7528 panic!() \u5b8f: \u5bf9\u4e8e\u4e0d\u53ef\u6062\u590d\u9519\u8bef\u4f7f\u7528 panic! \u5b8f\u6765\u5904\u7406\n    //\n    let f = File::open("hello.txt");\n    match f {\n        Ok(file) => {\n            println!("File opened successfully.");\n        },\n        Err(err) => {\n            println!("Failed to open the file.");\n            panic!("{:?}", err);\n        }\n    }\n    //\n    // if let \u8bed\u6cd5\u7cd6\n    let f = File::open("hello.txt");\n    if let Ok(file) = f {\n        println!("File opened successfully.");\n    } else {\n        println!("Failed to open the file.");\n       panic!("error"); // panic \u4f1a\u4e2d\u65ad\u7a0b\u5e8f, \u82e5\u4e0d\u5e0c\u671b\u4e2d\u65ad\u7a0b\u5e8f, \u4e0d\u8981 panic\n    }\n\n    // \u7b80\u5316\u5199\u6cd5: \u76f4\u63a5\u89e3\u5305\u88c5, \u53ef\u6062\u590d\u5f02\u5e38\u4e5f\u4f1a panic\n    //\n    //\u4e0d\u4f1a\u4e3a\u51fd\u6570\u4ea7\u751f\u8fd4\u56de\u503c, \u800c\u662f\u76f4\u63a5 panic\n    //\n    let f1 = File::open("hello.txt").unwrap(); //\u539f\u7406: \u5728 Result \u4e3a Err \u65f6\u8c03\u7528 panic! \u5b8f\n    let f2 = File::open("hello.txt").expect("Failed to open.");//expect \u80fd\u591f\u5411 panic! \u5b8f\u53d1\u9001\u4e00\u6bb5\u6307\u5b9a\u7684\u9519\u8bef\u4fe1\u606f\n    // \u81ea\u5df1\u63a7\u5236\u662f\u5426 panic\n    unwrap_or_else(|e| {  panic!("failed to execute process: {}", e)})\n    //\n  \n\n\n\n')),(0,l.kt)("h3",{id:"5213-result--\u548c-\u95ee\u53f7\u64cd\u4f5c\u7b26"},"5.21.3. Result  \u548c \u95ee\u53f7\u64cd\u4f5c\u7b26"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n/// \u53ef\u6062\u590d\u9519\u8bef, \u7528 Result<T, E> \u7c7b\u6765\u5904\u7406\uff0c,\u7c7b\u6bd4 java \u4e2d \u7684 exception\n/// //\u5728 Rust \u6807\u51c6\u5e93\u4e2d\u53ef\u80fd\u4ea7\u751f\u5f02\u5e38\u7684\u51fd\u6570\u7684\u8fd4\u56de\u503c\u90fd\u662f Result \u7c7b\u578b\u7684\n/// enum Result<T, E> { \n///   Ok(T),\n///   Err(E),\n/// }\n\n\n    // \u5f02\u5e38\u4f20\u9012, \u51fd\u6570\u8fd4\u56de\u503c\n    //\n    fn func(i: i32) -> Result<i32, bool> {\n        if i >= 0 { Ok(i) }\n        else { Err(false) }\n    }\n    fn g(i: i32) -> Result<i32, bool> {\n        let t = func(i);\n        return match t { // \u6216\u8005\u7701\u7565 return \u548c\u5206\u53f7\n            Ok(i) => Ok(i), // \u539f\u6837\u4f20\u7ed9 match, match\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u6784\u4f20\u7ed9\u51fd\u6570\u8fd4\u56de\u503c\n            Err(b) => Err(b)\n        };\n    }\n    // \u66f4\u597d\u7684\u5199\u6cd5: \n    //? \u7b26\u7684\u5b9e\u9645\u4f5c\u7528\u662f\u5c06 Result \u7c7b\u975e\u5f02\u5e38\u7684\u503c\u76f4\u63a5\u53d6\u51fa\uff0c\u5982\u679c\u6709\u5f02\u5e38\u5c31\u5c06\u5f02\u5e38 Result \u8fd4\u56de\u51fa\u53bb\u3002\u6240\u4ee5\uff0c? \u7b26\u4ec5\u7528\u4e8e\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a Result<T, E> \u7684\u51fd\u6570\n    //?\u53f7 \u662f \u201c\u8981\u4e48 unwrap \u8981\u4e48 return Err(From::from(err))\u201d\u3002\n    //\n    // \u4f1a\u4e3a\u51fd\u6570\u4ea7\u751f\u8fd4\u56de\u503c\n    //\n    fn g1(i: i32) -> Result<i32, bool> {\n        let t = func(i)?;\n        Ok(t) // \u56e0\u4e3a\u786e\u5b9a t \u4e0d\u662f Err, t \u5728\u8fd9\u91cc\u5df2\u7ecf\u662f i32 \u7c7b\u578b\n    }\n    let r = g1(10000);\n    if let Ok(v) = r {println!("ok, r = {}", v)}\n    else { println!("Err")}\n\n\n\n    // \u83b7\u53d6 error \u7c7b\u578b, \u5904\u7406\u5f02\u5e38\n    fn read_text_from_file(path: &str) -> Result<String, io::Error> {\n        let mut f = File::open(path)?;\n        let mut s = String::new();\n        f.read_to_string(&mut s)?;\n        Ok(s)\n    }\n    let str_file = read_text_from_file("hello.txt");\n    match str_file {\n        Ok(s) => println!("{}", s),\n        Err(e) => {\n            match e.kind() {\n                io::ErrorKind::NotFound => {\n                    println!("No such file");\n                },\n                _ => {\n                    println!("Cannot read the file");\n                }\n            }\n        }\n    }\n\n    // Result \u7684 map, and_then\n    //\n    // \u7c7b\u4f3c option, result\u4e5f\u6709\u81ea\u5df1\u7684\u94fe\u5f0f\u5904\u7406\u65b9\u6cd5\n    //\n    use std::num::ParseIntError;\n    fn multiply(first_number_str: &str, second_number_str: &str) -> Result<i32, ParseIntError> {\n        // parse() \u8fd4\u56de\u7684\u662f result \u7c7b\u578b\n        first_number_str.parse::<i32>().and_then(|first_number| {\n            second_number_str.parse::<i32>().map(|second_number| first_number * second_number)\n        })\n    }\n    // \u66f4\u63a8\u8350\u7684\u5199\u6cd5\n    //\n    // \u63a8\u8350\u7ed9 \u592a\u957f\u7684\u7c7b\u578b\u8d77\u4e2a\u522b\u540d\n    type AliasedResult<T> = Result<T, ParseIntError>;\n    fn multiply1(first_number_str: &str, second_number_str: &str) -> AliasedResult<i32> {\n        let first_number = first_number_str.parse::<i32>()?;\n        let second_number = second_number_str.parse::<i32>()?;\n    \n        Ok(first_number * second_number)\n    }\n\n    //\n')),(0,l.kt)("h3",{id:"5214-\u9519\u8bef\u88c5\u7bb1-\u81ea\u5b9a\u4e49\u5f02\u5e38"},"5.21.4. \u9519\u8bef\u88c5\u7bb1 \u81ea\u5b9a\u4e49\u5f02\u5e38"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'    \n\n    //\n    //\n    // \n    //\u88c5\u7bb1\u53ef\u4ee5\u4fdd\u5b58\u539f\u59cb\u9519\u8bef\u4fe1\u606f, \u574f\u5904\u5c31\u662f\uff0c\u88ab\u5305\u88c5\u7684\u9519\u8bef\u7c7b\u578b\u53ea\u80fd\u5728\u8fd0\u884c\u65f6\u4e86\u89e3\uff0c\u800c\u4e0d\u80fd\u88ab\u9759\u6001\u5730 \u5224\u522b\u3002\n    //\n    //\u5bf9\u4efb\u4f55\u5b9e\u73b0\u4e86 Error trait \u7684\u7c7b\u578b\uff0c\u6807\u51c6\u5e93\u7684 Box \u901a\u8fc7 From \u4e3a\u5b83\u4eec\u63d0\u4f9b\u4e86 \u5230 Box<Error> \u7684\u8f6c\u6362, \u53ea\u8981\u8c03\u7528 XxxError.into() \u5373\u88c5\u7bb1\n    //\n    use std::error;\n    use std::fmt;\n    // \u4e3a `Box<error::Error>` \u53d6\u522b\u540d\u3002\n    type Result<T> = std::result::Result<T, Box<error::Error>>;\n    // \u81ea\u5b9a\u4e49\u5f02\u5e38 /////////////////////////////\n    // \u8fd8\u5fc5\u987b\u540c\u65f6\u5b9e\u73b0 Debug \u548c Display\n    #[derive(Debug, Clone)]\n    struct EmptyVec;\n    impl fmt::Display for EmptyVec {\n        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n            write!(f, "invalid first item to double")\n        }\n    }\n    impl error::Error for EmptyVec {\n        fn description(&self) -> &str {\n            "invalid first item to double"\n        }\n        fn cause(&self) -> Option<&error::Error> {\n            // \u6cdb\u578b\u9519\u8bef\u3002\u6ca1\u6709\u8bb0\u5f55\u5176\u5185\u90e8\u539f\u56e0\u3002\n            None\n        }\n    }\n    // \u5c06\u7b2c\u4e00\u4e2a\u6570\u5b57\u4e58\u4ee52\n    fn double_first(vec: Vec<&str>) -> Result<i32> {\n        vec.first()\n        .ok_or_else(|| EmptyVec.into())  // \u88c5\u7bb1\n        .and_then(|s| {\n                s.parse::<i32>()\n                    .map_err(|e| e.into())  // \u88c5\u7bb1\n                    .map(|i| 2 * i)\n            })\n    }\n    \n    // \u66f4\u597d\u7684\u5199\u6cd5: \u4f7f\u7528 ? \u53f7\n    // ?\u53f7 \u662f \u201c\u8981\u4e48 unwrap \u8981\u4e48 return Err(From::from(err))\u201d\u3002From::from \u662f \u4e0d\u540c\u7c7b\u578b\u95f4\u7684\u8f6c\u6362\u5de5\u5177\uff0c\n    fn double_first(vec: Vec<&str>) -> Result<i32> {\n        let first = vec.first().ok_or(EmptyVec)?;\n        let parsed = first.parse::<i32>()?;\n        Ok(2 * parsed)\n    }\n\n\n\n}\n\n\n')),(0,l.kt)("h3",{id:"5215-\u6355\u83b7\u5f02\u5e38"},"5.21.5. \u6355\u83b7\u5f02\u5e38"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u6050\u614c\u5b89\u5168: \u53d1\u751f panic\u540e, \u4ee3\u7801\u7ec8\u6b62\u6267\u884c, \u540e\u7eed\u7684\u8d44\u6e90\u56de\u6536\u76f8\u5173\u7684\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c, \u53ef\u80fd\u5f15\u53d1\u95ee\u9898, \u9632\u6b62\u8fd9\u6837\u7684\u95ee\u9898\u5c31\u662f\u4fdd\u8bc1\u6050\u614c\u5b89\u5168\n\n// rust \u901a\u8fc7 raii\u673a\u5236, \u4fdd\u8bc1\u4e86\u57fa\u672c\u7684\u6050\u614c\u5b89\u5168, \u5373\u4f7f\u5728 safe rust \u4e2d\u53d1\u751f panic, \u4e5f\u80fd\u4fdd\u8bc1\u8d44\u6e90\u56de\u6536\n// \u4f46\u662f\u82e5 panic \u53d1\u751f\u5728 unsafe rust \u91cc\u9762, \u5c31\u65e0\u6cd5\u4fdd\u8bc1\u6050\u614c\u5b89\u5168\u4e86\n\n// catch_unwind \u65b9\u6cd5\u6765\u8ba9\u5f00\u53d1\u8005\u6355\u83b7\u6050\u614c\uff0c\u6062\u590d\u5f53\u524d\u7ebf\u7a0b\u3002\n// \n// \u63a5\u6536\u7684\u662f\u4e00\u4e2a\u6b63\u5e38\u7684\u95ed\u5305\uff0c\u5728\u8be5\u95ed\u5305\u4e2d \u5e76\u672a\u53d1\u751f\u6050\u614c\uff0c\u6240 \u4ee5\u6b63\u5e38\u6267\u884c\nlet result = panic::catch_unwind(|| { println!("hello!"); });\nassert!(result.is_ok());\n// \u6355\u83b7\u6b64\u6050\u614c\uff0c\u5e76\u6062\u590d\u5f53\u524d\u7ebf\u7a0b\nlet result = panic::catch_unwind(|| { panic!("oh no!"); });// \u8f93 \u51fa \u7ed3\u679c \u4e2d\u6253\u5370 \u4e86\u6050\u614c\u4fe1\u606f\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5f71 \u54cd \u5230\u540e\u7eed\u4ee3\u7801 \u7684\u6267\u884c\nassert!(result.is_err());\nprintln!("{}", sum(1, 2));\n\n// \u4f7f\u7528 set_hook \u81ea\u5b9a\u4e49panic \u6d88\u606f\u6d88\u606f\n// set_hook \u662f\u5168\u5c40\u6027\u8bbe\u7f6e\uff0c \u5e76\u4e0d\u662f\u53ea\u9488\u5bf9\u5355\u4e2a\u4ee3\u7801\u6a21\u5757\u7684, \u53ef\u4ee5\u548c take_hook \u914d\u5408\u4f7f\u7528\n// \npanic::set_hook(Box::new(|panic_info| {\n    if let Some(location) = panic_info.location() {\n        println!("panic occurred \'{}\' at {}",\n            location.file(), location.line()\n        );\n    } else {\n        println!("can\'t get location information...");\n    }\n}));\nlet result = panic::catch_unwind(|| { panic!("oh no!"); });\nassert!(result.is_err());\n')),(0,l.kt)("h3",{id:"5216-\u9519\u8bef\u5904\u7406\u8fdb\u5316\u8fc7\u7a0b"},"5.21.6. \u9519\u8bef\u5904\u7406\u8fdb\u5316\u8fc7\u7a0b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'    //\n    // \u76f4\u63a5\u89e3\u9664\u5305\u88c5\n    // \n  // \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9, \u4e00\u6b65\u5230\u4f4d\n    let content = std::fs::read_to_string(&args.path).unwrap();\n// panic\n    let content = match std::fs::read_to_string(&args.path) {\n        Ok(content) => content,\n        Err(err) => panic!(">>> Error occurred: {}", err),\n    };\n// \u8fd4\u56de error\n    // \u9700\u8981 main \u8fd4\u56de Result<(), Box<dyn std::error::Error>>\n    let content = match std::fs::read_to_string(&args.path) {\n        Ok(content) => content,\n        Err(error) => {return Err(error.into())},\n    };\n    \n    // \u4f7f\u7528\u95ee\u53f7\n    main() -> Result<(), Box<dyn std::error::Error>> {\n        let content = std::fs::read_to_string(&args.path)?;\n    }\n\n    // \u6dfb\u52a0\u9519\u8bef\u4e0a\u4e0b\u6587, \u81ea\u5b9a\u4e49\u5f02\u5e38\n    main -> Result<(),SomeErr> {\n        let content = std::fs::read_to_string(&args.path)\n                .map_err(|err| SomeErr(format!("Error of reading {}: {}", &args.path, err)))?;\n    }\n    \n    // \u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\n    use failure::ResultExt;\n    use exitfailure::ExitFailure;\n    let ref path: PathBuf = args.path;\n    let content = std::fs::read_to_string(path)\n        .with_context(|_| format!("could not read file {}", path.to_str().unwrap()))?;\n\n\n')),(0,l.kt)("h3",{id:"5217-\u7b2c\u4e09\u65b9\u5e93\u5904\u7406\u5f02\u5e38"},"5.21.7. \u7b2c\u4e09\u65b9\u5e93\u5904\u7406\u5f02\u5e38"),(0,l.kt)("p",null,"anyhow + thiserror"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/rust-cli/human-panic"},"https://github.com/rust-cli/human-panic")),(0,l.kt)("h2",{id:"522-io"},"5.22. io"),(0,l.kt)("h3",{id:"5221-\u547d\u4ee4\u884c\u53c2\u6570"},"5.22.1. \u547d\u4ee4\u884c\u53c2\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'fn io_demo() {\n    //\n    let args = std::env::args();\n    println!("args: {:?}", args);//Args { inner: ["target/debug/hello", "main.rs"] }\n    for item in args {\n        println!("arg: {}", item);\n    }\n    //arg: target/debug/hello\n    //arg: main.rs\n\n    args.next().unwrap();\n    let arg0 = args.next().unwrap();// \u547d\u4ee4\u672c\u8eab, \u62ff\u5230\u53c2\u6570\u8981\u4e24\u4e2a args.next()\n\n    // \u6216\u8005\u4e00\u6b65\u5230\u4f4d\n    let pattern = std::env::args().nth(1).expect("no pattern given");\n\n     // \u6216\u8005\u901a\u8fc7 vector \u6536\u96c6\n    let args: Vec<String> = env::args().collect();\n\n\n    //\n    //\n    //\u547d\u4ee4\u884c\u8f93\u5165\u6587\u672c\n    //\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n\n    loop {\n        println!("Please input your guess.");\n\n        let mut guess = String::new();\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect("Failed to read line");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!("You guessed: {}", guess);\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!("Too small!"),\n            Ordering::Greater => println!("Too big!"),\n            Ordering::Equal => {\n                println!("You win!");\n                break;\n            }\n        }\n    }\n\n\n\n')),(0,l.kt)("h3",{id:"5222-\u6587\u4ef6-io"},"5.22.2. \u6587\u4ef6 io"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'    // \n    // //////////////////////////  \u6587\u4ef6 io //////////////\n    //\n    use std::fs;\n    use std::io::prelude::*; //\u6d89\u53ca\u5230 write \u9700\u8981 \u4e07\u80fd\u5bfc\u5165 prelude\n    // \u521b\u5efa\u5199\u5165\u6587\u4ef6\n    //\n    //\u9759\u6001\u65b9\u6cd5\uff0c\u4ee5 \u53ef\u5199 \u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\u3002\n    //\u5982\u679c\u6587\u4ef6\u5b58\u5728\u5219\u6e05\u7a7a\u65e7\u5185\u5bb9\n    //\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u65b0\u5efa                  \u7c7b\u4f3c echo "xxxx" > path\n    let mut file = fs::File::create("./cc.md").expect("create file error");\n    file.write_all("hello ".as_bytes()).expect("write error");\n    file.write_all(" world".as_bytes()).expect("write error");\n    file.write_all("\\n\u4f60\u597d".as_bytes()).expect("write error");\n\n\n    // \u8bfb\u53d6\u6587\u4ef6\n    //\n    // \u4e00\u6b21\u6027\u8bfb\u53d6\n    //\n    //\n    // \u9759\u6001\u65b9\u6cd5\n    let text = std::fs::read_to_string("./Cargo.toml").unwrap(); // \u76f8\u5bf9\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e\u6839\u76ee\u5f55\n    println!("{}", text);\n    //\n    // or\n    let mut file = fs::File::open("./cc.md").expect("open error");// \u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00, \u76f8\u5f53\u4e8e cat <path>\n    let mut str_buf = String::new();\n    // \u5b9e\u4f8b\u65b9\u6cd5\n    file.read_to_string(&mut str_buf).expect("read error");\n    println!("{}", str_buf);\n\n\n    // \u4fee\u6539\n    //  append() \u7528\u4e8e\u5c06\u6587\u4ef6\u7684\u6253\u5f00\u6a21\u5f0f\u8bbe\u7f6e\u4e3a \u8ffd\u52a0\u6a21\u5f0f\n    //\n    //\u6b64\u5916\u8fd8\u6709 .read(true).write(true)\n    // \u6bd4\u5982  OpenOptions::new().create(true).write(true).open(path) \u53ef\u521b\u5efa, \u53ef\u5199\u6a21\u5f0f\u6253\u5f00 , \u76f8\u5f53\u4e8e touch xxx , \u6709\u5219\u4e0d\u52a8, \u65e0\u5219\u521b\u5efa\n    //\n    let mut file = fs::OpenOptions::new().append(true).open("./cc.md").unwrap();\n    file.write_all("\\nappend something...".as_bytes()).unwrap();\n    let updated_content = fs::read_to_string("./cc.md").unwrap();\n    println!("{}", updated_content);\n\n    // \u8bfb\u5199\u4e8c\u8fdb\u5236\u6587\u4ef6\n    // \u6587\u4ef6\u6d41\u8bfb\u53d6, \u591a\u6b21\u8bfb\u53d6\n    // \n    // or\n    // \u4e8c\u8fdb\u5236 \u4f7f\u7528 std::fs::read("") \u8bfb\u53d6 u8 \u7c7b\u578b\u96c6\u5408\n    //\n    // \u590d\u5236\u6587\u4ef6\u7684 demo:\n    //\n    let mut buffer = [0u8; 5];\n    let mut file = fs::File::open("cc.md").unwrap();\n    println!("\u6587\u4ef6\u6253\u5f00\u6210\u529f\uff1a{:?}",file);//File { fd: 3, path: ".../data.txt", read: true, write: false }\n    file.read(&mut buffer).unwrap();\n    println!("{:?}", buffer);\n    file.read(&mut buffer).unwrap();\n    println!("{:?}", buffer);\n\n    // \u5220\u9664\n    fs::remove_file("cc.md").unwrap();\n\n\n\n    // \u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c\n    //\n    //\n    // \u521b\u5efa \u76ee\u5f55, \u8fd4\u56de io::Result<()>\n    fs::create_dir("a") \n    //\n    // \u9012\u5f52\u521b\u5efa,\u76ee\u5f55\n    fs::create_dir_all("a/c/d")\n\n    // \u521b\u5efa\u7b26\u53f7\u94fe\u63a5\n    //\n    unix::fs::symlink("../b.txt", "a/c/b.txt")\n\n    //\u8bfb\u53d6\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u7684\u5185\u5bb9\uff0c\u8fd4\u56de `io::Result<Vec<Path>>`\n    //\n    match fs::read_dir("a") {\n        Err(why) => println!("! {:?}", why.kind()),\n        Ok(paths) => for path in paths {\n            println!("> {:?}", path.unwrap().path());\n        },\n    }\n\n    // \u79fb\u9664\u4e00\u4e2a\u7a7a\u76ee\u5f55\uff0c\u8fd4\u56de `io::Result<()>`\n    fs::remove_dir("a/c/d")\n\n\n\n    println!("-----------------meta -------------------");\n    // metadata \u5143\u6570\u636e\n    //\n    // \u904d\u5386\u76ee\u5f55\n    let meta = fs::metadata("./src");\n    /*\n        Ok(Metadata {\n            file_type: FileType(FileType {\n                mode: 16895\n            }),\n            is_dir: true,\n            is_file: false,\n            permissions: Permissions(FilePermissions {\n                mode: 16895\n            }),\n            modified: Ok(SystemTime {\n                tv_sec: 1597127845,\n                tv_nsec: 217049100\n            }),\n            accessed: Ok(SystemTime {\n                tv_sec: 1597132516,\n                tv_nsec: 30962100\n            }),\n            created: Err(Custom {\n                kind: Other,\n                error: "creation time is not available for the filesystem"\n            })\n        })\n    */\n    println!("meta = {:?}", meta);\n    println!("src is dir? {}", meta.unwrap().is_dir());//true\n}\n\nfn copy_file() {\n    let mut command_line: std::env::Args = std::env::args();\n   command_line.next().unwrap();\n\n   // \u8df3\u8fc7\u7a0b\u5e8f\u540d\n   // \u539f\u6587\u4ef6\n   let source = command_line.next().unwrap();\n\n   // \u65b0\u6587\u4ef6\n   let destination = command_line.next().unwrap();\n   let mut file_in = std::fs::File::open(source).unwrap();\n   let mut file_out = std::fs::File::create(destination).unwrap();\n   let mut buffer = [0u8; 4096];\n   use std::io::Write;\n   loop {\n      let nbytes = file_in.read(&mut buffer).unwrap();\n      file_out.write(&buffer[..nbytes]).unwrap();\n      if nbytes < buffer.len() { break; }// \u5982\u679c\u67d0\u6b21\u8bfb\u53d6\u6ca1\u6709\u5c06 buf \u8bfb\u6ee1, \u5219\u5199\u5b8c\u540e\u9000\u51fa\u5faa\u73af\n   }\n}\n\n\n')),(0,l.kt)("h2",{id:"523-\u9762\u5411\u5bf9\u8c61-oop"},"5.23. \u9762\u5411\u5bf9\u8c61 oop"),(0,l.kt)("h3",{id:"5231-\u53ef\u89c1\u6027"},"5.23.1. \u53ef\u89c1\u6027"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// rust \u4e0b\u6240\u6709\u5143\u7d20\u90fd\u662f\u9ed8\u8ba4\u79c1\u6709\u7684, \u65e0\u6cd5\u5728\u5916\u90e8\u4f7f\u7528, \u901a\u8fc7 pub \u58f0\u660e\u4e3a \u516c\u5f00, \u624d\u80fd\u5728\u5916\u90e8\u4f7f\u7528\n// \n// - pub\uff0c \u53ef\u4ee5\u5bf9\u5916 \u66b4\u9732 \u516c\u5171\u63a5\u53e3\uff0c\u9690\u85cf\u5185\u90e8\u5b9e\u73b0\u7ec6\u8282 (\u53ef\u7528\u4e8e\u4efb\u4f55\u5bf9\u8c61)\n// - pub(crate)\uff0c\u5bf9\u6574\u4e2a crate \u53ef\u89c1 \u3002\n// - pub(in Path)\uff0c\u5176\u4e2d Path\u662f\u6a21\u5757\u8def\u5f84(\u4ee5 crate \u5f00\u5934), \u8868\u793a\u53ea\u80fd\u5728 Path \u6307\u5b9a\u7684\u6a21\u5757\u4e2d\u8bbf\u95ee\n// - pub(self)\uff0c \u7b49\u4ef7\u4e8e pub(in self)\uff0c\u8868\u793a\u53ea\u9650\u5f53\u524d\u6a21\u5757\u53ef\u89c1/\u4f7f\u7528\n// - pub(super)\uff0c \u7b49\u4ef7\u4e8e pub(in super)\uff0c\u8868\u793a\u5728\u5f53\u524d\u6a21\u5757\u548c\u7236\u6a21\u5757\u4e2d\u53ef\u89c1\n// \n// \n// \u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5, \u9700\u8981\u5355\u72ec\u4f7f\u7528 pub \u5173\u952e\u5b57\u6765 \u6539\u53d8\u5176 \u53ef\u89c1\u6027 \n\n// 2015 \npub mod outer_mod {\n    pub(self) fn outer_mod_fn() {}\n    pub mod inner_mod {\n        // use outer_mod::outer_mod_fn;\n        // \u5bf9\u5916\u5c42\u6a21\u5757 `outer_mod` \u53ef\u89c1\n        pub(in outer_mod) fn outer_mod_visible_fn() {}\n        // \u5bf9\u6574\u4e2acrate\u53ef\u89c1\n        pub(crate) fn crate_visible_fn() {}\n        // `outer_mod` \u5185\u90e8\u53ef\u89c1\n        pub(super) fn super_mod_visible_fn() {\n            // \u8bbf\u95ee\u540c\u4e00\u6a21\u5757\u7684\u51fd\u6570\n            inner_mod_visible_fn();\n            // \u8bbf\u95ee\u7236\u6a21\u5757\u7684\u51fd\u6570\u9700\u8981\u4f7f\u7528\u201c::\u201d\u524d\u7f00\n            ::outer_mod::outer_mod_fn();\n        }\n        // \u4ec5\u5728`inner_mod`\u53ef\u89c1\n        pub(self) fn inner_mod_visible_fn() {}\n    }\n     \n    pub fn foo() {\n        inner_mod::outer_mod_visible_fn();\n        inner_mod::crate_visible_fn();\n        inner_mod::super_mod_visible_fn();\n     \n        // \u4e0d\u80fd\u4f7f\u7528inner_mod \u7684\u79c1\u6709\u51fd\u6570\n        // inner_mod::inner_mod_visible_fn();\n    }\n}\nfn bar() {\n    // \u8be5\u51fd\u6570\u5bf9\u6574\u4e2acrate\u53ef\u89c1\n    outer_mod::inner_mod::crate_visible_fn();\n \n    // \u8be5\u51fd\u6570\u53ea\u5bf9outer_mod\u53ef\u89c1\n    // outer_mod::inner_mod::super_mod_visible_fn();\n \n    // \u8be5\u51fd\u6570\u53ea\u5bf9outer_mod\u53ef\u89c1\n    // outer_mod::inner_mod::outer_mod_visible_fn();\n     \n    // \u901a\u8fc7foo\u51fd\u6570\u8c03\u7528\u5185\u90e8\u7ec6\u8282\n    outer_mod::foo();\n}\nfn main() { bar() }\n\n\n\n\n\n\n// 2018\npub mod outer_mod {\n    pub(self) fn outer_mod_fn() {}\n     \n    pub mod inner_mod {\n        // \u5728Rust 2018 edtion \u6a21\u5757\u7cfb\u7edf\u5fc5\u987b\u4f7f\u7528use\u5bfc\u5165\n        use crate::outer_mod::outer_mod_fn;\n        // \u5bf9\u5916\u5c42\u6a21\u5757 `outer_mod` \u53ef\u89c1\n        pub(in crate::outer_mod)  fn outer_mod_visible_fn() {}\n        // \u5bf9\u6574\u4e2acrate\u53ef\u89c1\n        pub(crate) fn crate_visible_fn() {}\n        // `outer_mod` \u5185\u90e8\u53ef\u89c1\n        pub(super) fn super_mod_visible_fn() {\n            // \u8bbf\u95ee\u540c\u4e00\u6a21\u5757\u7684\u51fd\u6570\n            inner_mod_visible_fn();\n            // \u4f7f\u7528use\u5bfc\u5165\u4e86outer_mod\n            outer_mod_fn();\n        }\n        // \u4ec5\u5728`inner_mod`\u53ef\u89c1\n        pub(self) fn inner_mod_visible_fn() {}\n    }\n     \n    pub fn foo() {\n        inner_mod::outer_mod_visible_fn();\n        inner_mod::crate_visible_fn();\n        inner_mod::super_mod_visible_fn();\n     \n        // \u4e0d\u80fd\u4f7f\u7528inner_mod \u7684\u79c1\u6709\u51fd\u6570\n        // inner_mod::inner_mod_visible_fn();\n    }\n}\nfn bar() {\n    // \u8be5\u51fd\u6570\u5bf9\u6574\u4e2acrate\u53ef\u89c1\n    outer_mod::inner_mod::crate_visible_fn();\n \n    // \u8be5\u51fd\u6570\u53ea\u5bf9outer_mod\u53ef\u89c1\n    // outer_mod::inner_mod::super_mod_visible_fn();\n \n    // \u8be5\u51fd\u6570\u53ea\u5bf9outer_mod\u53ef\u89c1\n    // outer_mod::inner_mod::outer_mod_visible_fn();\n     \n    // \u901a\u8fc7foo\u51fd\u6570\u8c03\u7528\u5185\u90e8\u7ec6\u8282\n    outer_mod::foo();\n}\nfn main() { bar() }\n")),(0,l.kt)("h3",{id:"5232-\u591a\u6001"},"5.23.2. \u591a\u6001"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\nfn oop_demo() {\n\n    // \u591a\u6001\n    //\n    pub struct Screen {\n        pub components: Vec<Box<dyn Draw>>,// Box<dyn Draw> \u4e3a\u4efb\u4f55\u5b9e\u73b0\u4e86 Draw trait \u7684\u7c7b\u578b\u7684\u66ff\u8eab\n    }\n\n    // \u53e6\u5916\u591a\u6001\u4f8b\u5b50\n    //\n    struct Rectangle {\n        width : u32,\n        height : u32,\n    } \n    struct Circle {\n        x : u32,\n        y : u32,\n        radius : u32,\n    }\n    trait  IShape  { \n        fn area(&self) -> f32;\n        fn to_string(&self) -> String;\n    }\n    impl IShape  for Rectangle {\n        fn area(&self) -> f32 { (self.height * self.width) as f32 }\n        fn to_string(&self) ->String {\n            format!("Rectangle -> width={} height={} area={}", \n                    self.width, self.height, self.area())\n        }\n    }\n    use std::f64::consts::PI;\n    impl IShape  for Circle  {\n        fn area(&self) -> f32 { (self.radius * self.radius) as f32 * PI as f32}\n        fn to_string(&self) -> String {\n            format!("Circle -> x={}, y={}, area={}", \n                    self.x, self.y, self.area())\n        }\n    }\n\n    // \u4f7f\u7528\n    use std::vec::Vec;\n    let rect = Box::new( Rectangle { width: 4, height: 6});\n    let circle = Box::new( Circle { x: 0, y:0, radius: 5});\n    let mut v : Vec<Box> = Vec::new();\n    v.push(rect);\n    v.push(circle);\n    for i in v.iter() {\n        println!("area={}", i.area() );\n        println!("{}", i.to_string() );\n    }\n\n\n\n')),(0,l.kt)("h3",{id:"5233-\u5411\u4e0b\u8f6c\u578b"},"5.23.3. \u5411\u4e0b\u8f6c\u578b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n\n    //\u5411\u4e0b\u8f6c\u578b\n    //\n    //\n    //\u5148\u5f97\u8ba9 IShape \u7ee7\u627f\u4e8e Any \uff0c\u5e76\u589e\u52a0\u4e00\u4e2a as_any() \u7684\u8f6c\u578b\u63a5\u53e3\n    use std::any::Any;\n    trait  IShape : Any + \'static  {\n        fn as_any(&self) -> &dyn Any; \n        \u2026\u2026 \u2026\u2026 \u2026\u2026 \n    }\n    //\u7136\u540e\uff0c\u5728\u5177\u4f53\u7c7b\u4e2d\u5b9e\u73b0\u8fd9\u4e2a\u63a5\u53e3\n    impl IShape  for Rectangle {\n        fn as_any(&self) -> &dyn Any { self }\n        \u2026\u2026 \u2026\u2026 \u2026\u2026 \n    }\n    impl IShape  for Circle  {\n        fn as_any(&self) -> &dyn Any { self }\n        \u2026\u2026 \u2026\u2026 \u2026\u2026 \n    }\n    let mut v : Vec<Box<dyn IShape>> = Vec::new();\n    v.push(rect);\n    v.push(circle);\n    for i in v.iter() {\n        if let Some(s) = i.as_any().downcast_ref::<Rectangle>() {\n            println!("downcast - Rectangle w={}, h={}", s.width, s.height);\n        }else if let Some(s) = i.as_any().downcast_ref::<Circle>() {\n            println!("downcast - Circle x={}, y={}, r={}", s.x, s.y, s.radius);\n        }else{\n            println!("invaild type");\n        }\n    }\n\n\n\n    \n}\n\n')),(0,l.kt)("h3",{id:"5234-\u5404\u79cdself\u533a\u5206\u4f7f\u7528"},"5.23.4. \u5404\u79cdself\u533a\u5206\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"&self           \u5e38\u7528, \u8868\u793a\u5f53\u524d\u5bf9\u8c61\u7684\u5f15\u7528, \u4e0d\u53ef\u53d8, \u65e0\u6cd5\u4fee\u6539\n&mut self       \u5e38\u7528, \u8868\u793a\u5f53\u524d\u5bf9\u8c61\u7684\u5f15\u7528, \u53ef\u53d8\nself            \u4e0d\u5e38\u7528, \u8868\u793a\u5f53\u524d\u5bf9\u8c61\u672c\u8eab, \u64cd\u4f5c\u5b8c\u6210\u540e, \u5f53\u524d\u5bf9\u8c61\u65e0\u6cd5\u518d\u4f7f\u7528,\u4f1a\u88ab\u4e22\u5f03\u56de\u6536 (\u573a\u666f: \u6790\u6784\u51fd\u6570)\nmut self        \u4e0d\u5e38\u7528 ..... \u64cd\u4f5c\u5b8c\u6210\u88ab\u4e22\u5f03\n\n\n\n")),(0,l.kt)("h3",{id:"5235-\u8bbe\u8ba1\u6a21\u5f0f"},"5.23.5. \u8bbe\u8ba1\u6a21\u5f0f"),(0,l.kt)("h4",{id:"52351-\u5efa\u9020\u8005\u6a21\u5f0f"},"5.23.5.1. \u5efa\u9020\u8005\u6a21\u5f0f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// std::process::Command \u5c31\u4f7f\u7528\u4e86 \u5efa\u9020\u8005\u6a21\u5f0f\n\n\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\nstruct CircleBuilder {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\nimpl Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n    fn new() -> CircleBuilder {\n        CircleBuilder {\n            x: 0.0, y: 0.0, radius: 1.0,\n        }\n   }\n}\nimpl CircleBuilder {\n   fn x(&mut self, coordinate: f64) -> &mut CircleBuilder {\n       self.x = coordinate;\n       self\n   }\n   fn y(&mut self, coordinate: f64) -> &mut CircleBuilder {\n       self.y = coordinate;\n       self\n   }\n   fn radius(&mut self, radius: f64) -> &mut CircleBuilder {\n       self.radius = radius;\n      self\n   }\n   fn build(&self) -> Circle {\n       Circle {\n           x: self.x, y: self.y, radius: self.radius,\n       }\n   }\n}\n")),(0,l.kt)("h4",{id:"52352-\u8bbf\u95ee\u8005\u6a21\u5f0f"},"5.23.5.2. \u8bbf\u95ee\u8005\u6a21\u5f0f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u7528\u4e8e\u5c06\u6570\u636e\u7ed3\u6784\u548c\u4f5c\u7528\u4e8e\u7ed3\u6784\u4e0a\u7684\u64cd\u4f5c\u89e3\u7978\u3002\n// \u8bbf\u95ee\u8005\u6a21\u5f0f\u4e00\u822c\u5305\u542b\u4e24\u4e2a\u5c42 \u6b21:\n// - \u5b9a\u4e49\u9700\u8981\u64cd\u4f5c\u7684\u5143\u7d20\u3002\n// - \u5b9a\u4e49\u76f8\u5173\u7684\u64cd\u4f5c. \u4e00\u822c\u5c06\u64cd\u4f5c\u5c01\u88c5\u5230\u4e00\u4e2a trait \u4e2d, \u9488\u5bf9\u4e0d\u540c\u7684\u5143\u7d20, \u6709\u4e0d\u540c\u7684\u65b9\u6cd5\u5b9e\u73b0\n// Serde\u7684\u67b6\u6784\u662f\u8bbf\u95ee\u8005\u6a21\u5f0f\n\n\nuse std::any::Any;\ntrait HouseElement {\n    fn accept(&self, visitor: &HouseElementVisitor);\n    fn as_any(&self) -> &Any;\n}\ntrait HouseElementVisitor {\n    fn visit(&self, element: &HouseElement);\n}\nstruct House {\n    components: Vec<Box<HouseElement>>,\n}\nimpl House {\n    fn new() -> Self {\n        House {\n            components: vec![Box::new(Livingroom::new())],\n        }\n    }\n}\nimpl HouseElement for House {\n    fn accept(&self, visitor: &HouseElementVisitor) {\n        for component in self.components.iter() {\n            component.accept(visitor);\n        }\n        visitor.visit(self);\n    }\n    fn as_any(&self) -> &Any { self }\n}\n\nstruct Livingroom;\nimpl Livingroom {\n    fn new() -> Self { Livingroom }\n}\nimpl HouseElement for Livingroom {\n    fn accept(&self, visitor: &HouseElementVisitor) {\n        visitor.visit(self);\n    }\n    fn as_any(&self) -> &Any { self }\n}\n\nstruct HouseElementListVisitor;\nimpl HouseElementListVisitor {\n    fn new() -> Self { HouseElementListVisitor }\n}\n\nimpl HouseElementVisitor for  HouseElementListVisitor {\n    fn visit(&self, element: &HouseElement) {\n        match element.as_any() {\n            house if house.is::<House>() => println!("Visiting the house..."),\n            living if living.is::<Livingroom>() => println!("Visiting the Living room..."),\n            _ => {}\n        }\n    }\n}\nstruct HouseElementDemolishVisitor;\nimpl HouseElementDemolishVisitor {\n    pub fn new() -> Self {\n        HouseElementDemolishVisitor\n    }\n}\nimpl HouseElementVisitor for HouseElementDemolishVisitor {\n    fn visit(&self, element: &HouseElement) {\n        match element.as_any() {\n            house if house.is::<House>() => println!("Annihilating the house...!!!"),\n            living if living.is::<Livingroom>() => println!("Bombing the Living room...!!!"),\n            _ => {}\n        }\n    }\n}\n\nfn main() {\n    let house = House::new();\n    // simply print out the house elements\n    house.accept(&HouseElementListVisitor::new());\n    println!();\n    // do something with the elements of a house\n    house.accept(&HouseElementDemolishVisitor::new());\n}\n')),(0,l.kt)("h4",{id:"52353-raii\u6a21\u5f0f"},"5.23.5.3. raii\u6a21\u5f0f"),(0,l.kt)("p",null,"\u91cd\u6784\u540e\u7684\u4ee3\u7801:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'/*\n\u5229\u7528Rust\u7684ownership\uff08linear/affine type\uff09\u6765\u8bbe\u8ba1\u63a5\u53e3\n\nRefact\n\n1. \u53bb\u6389letter\u7684Clone\uff0c\u4f7f\u7528\u6240\u6709\u6743\u4fdd\u8bc1\u5176\u552f\u4e00\u6027\uff1b\u5e76\u4e14\u4fe1\u5c01\u7684wrap\u65b9\u6cd5\u53ea\u63a5\u53d7\u83b7\u5f97\u6240\u6709\u6743\u7684\u4fe1\u5c01\uff0c\u800c\u975e\u5f15\u7528\n2. \u4f7f\u7528\u7c7b\u578b\u7cfb\u7edf\u6765\u4fdd\u8bc1\u4fe1\u5c01\u7684\u552f\u4e00\u6027\n3. \u4f7f\u7528RAII\u673a\u5236\u6765\u7ba1\u7406\u6536\u5c3e\u903b\u8f91\uff0c\u6bd4\u5982\u5b9e\u73b0Drop\n\n\u5176\u4ed6\u793a\u4f8b\uff1a\n\n1. http response\n2. steaming engine\n\n*/\n\n// #[derive(Clone)]\npub struct Letter {\n    text: String,\n}\npub struct EmptyEnvelope {}\npub struct ClosedEnvelope {\n    letter: Letter,\n}\npub struct PickupLorryHandle {\n    done: bool,\n}\nimpl Letter {\n    pub fn new(text: String) -> Self {\n        Letter {text: text}\n    }\n}\nimpl EmptyEnvelope {\n    pub fn wrap(self, letter: Letter) -> ClosedEnvelope {\n        ClosedEnvelope {letter: letter}\n    }\n}\npub fn buy_prestamped_envelope() -> EmptyEnvelope {\n    EmptyEnvelope {}\n}\nimpl PickupLorryHandle {\n    pub fn pickup(&mut self, envelope: ClosedEnvelope) {\n        /*give letter*/\n    }\n    pub fn done(self) {}\n}\nimpl Drop for PickupLorryHandle {\n    fn drop(&mut self) {\n        println!("sent");\n    }\n}\npub fn order_pickup() -> PickupLorryHandle {\n    PickupLorryHandle {done: false , /* other handles */}\n}\nfn main(){\n    let letter = Letter::new(String::from("Dear RustFest"));\n    let envelope = buy_prestamped_envelope();\n    let closed_envelope = envelope.wrap(letter);\n    let mut lorry = order_pickup();\n    lorry.pickup(closed_envelope);\n}\n\n')),(0,l.kt)("p",null,"\u6709\u95ee\u9898\u7684\u4ee3\u7801:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'/*\n\u5229\u7528Rust\u7684ownership\uff08linear/affine type\uff09\u6765\u8bbe\u8ba1\u63a5\u53e3\n\n\u5b58\u5728\u7684\u95ee\u9898\uff1a\n\n1. Letter\u6709\u53ef\u80fd\u590d\u5236\u591a\u4efd\u5230\u591a\u4e2a\u4fe1\u5c01\uff08envelope\uff09\u91cc\uff0c\u4e0d\u5b89\u5168\n2. \u4fe1\u5c01\u91cc\u6709\u53ef\u80fd\u6709\u4fe1\uff0c\u4e5f\u6709\u53ef\u80fd\u6ca1\u6709\u4fe1, \u53ef\u80fd\u5bc4\u51fa\u7684\u662f\u7a7a\u4fe1\u5c01\uff1b\u6216\u8005\u540c\u4e00\u4e2a\u4fe1\u5c01\u88c5\u591a\u6b21\u4e0d\u540c\u7684\u4fe1\u4ef6, \u9020\u6210\u4fe1\u4ef6\u7684\u8986\u76d6\uff0c\u4e0d\u5b89\u5168\n3. \u6709\u6ca1\u6709\u628a\u4fe1\u4ea4\u7ed9\u90ae\u8f66\u4e5f\u662f\u65e0\u6cd5\u4fdd\u8bc1\uff0c\u4e0d\u5b89\u5168\n\n*/\n// \u4fe1\u7eb8\n#[derive(Clone)]\npub struct Letter {\n    text: String,\n}\n// \u4fe1\u5c01\npub struct Envelope {\n    letter: Option<Letter>,\n}\n// \u4fe1\u4ef6\u5904\u7406\u5668\npub struct PickupLorryHandle {\n    done: bool,//\u662f\u5426\u5bc4\u51fa\n}\nimpl Letter {\n    pub fn new(text: String) -> Self {\n        Letter {text: text}\n    }\n}\nimpl Envelope {\n    // \u88c5\u4fe1\u7eb8\u8fdb\u53bb\n    pub fn wrap(&mut self, letter: &Letter){\n        self.letter = Some(letter.clone());\n    }\n}\n// \u521b\u5efa\u7a7a\u7684\u4fe1\u5c01\npub fn buy_prestamped_envelope() -> Envelope {\n    Envelope {letter: None}\n}\nimpl PickupLorryHandle {\n    // \u88c5\u8f66\n    pub fn pickup(&mut self, envelope: &Envelope) {\n        /*give letter*/\n    }\n    // \u5bc4\u51fa\n    pub fn done(&mut self) {\n        self.done = true;\n        println!("sent");\n    }\n}\n// \u521b\u5efa\u5904\u7406\u5668\npub fn order_pickup() -> PickupLorryHandle {\n    PickupLorryHandle {done: false , /* other handles */}\n}\nfn main(){\n    let letter = Letter::new(String::from("Dear RustFest"));\n    let mut envelope = buy_prestamped_envelope();\n    envelope.wrap(&letter);\n    let mut lorry = order_pickup();\n    lorry.pickup(&envelope);\n    lorry.done();\n}\n\npub fn builder_pattern(){\n    unimplemented!();\n}\n')),(0,l.kt)("h2",{id:"524-\u5b50\u8fdb\u7a0b"},"5.24. \u5b50\u8fdb\u7a0b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n/// \u5b50\u8fdb\u7a0b\n/// \n/// process::Output \u7ed3\u6784\u4f53\u8868\u793a\u5df2\u7ed3\u675f\u7684\u5b50\u8fdb\u7a0b\uff08child process\uff09\u7684\u8f93\u51fa\uff0c\u800c process::Command \u7ed3\u6784\u4f53\u662f\u4e00\u4e2a\u8fdb\u7a0b\u521b\u5efa\u8005\n/// \n/// std::Child \u7ed3\u6784\u4f53\u4ee3\u8868\u4e86\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u5b50\u8fdb\u7a0b\uff0c\u5b83\u66b4\u9732\u4e86 stdin\uff08\u6807\u51c6 \u8f93\u5165\uff09\uff0cstdout\uff08\u6807\u51c6\u8f93\u51fa\uff09 \u548c stderr\uff08\u6807\u51c6\u9519\u8bef\uff09 \u53e5\u67c4\uff0c\n/// \u4ece\u800c\u53ef\u4ee5\u901a\u8fc7\u7ba1\u9053\u4e0e \u6240\u4ee3\u8868\u7684\u8fdb\u7a0b\u4ea4\u4e92\n/// \nfn sub_process_command() {\n    println!("-------------sub_process_command--------------");\n    use std::process::Command;\n\n    let output = Command::new("rustc")\n        .arg("--version")\n        .output().unwrap_or_else(|e| {\n            panic!("failed to execute process: {}", e)\n    });\n\n    if output.status.success() {\n        let s = String::from_utf8_lossy(&output.stdout);\n\n        print!("rustc succeeded and stdout was:\\n{}", s);\n    } else {\n        let s = String::from_utf8_lossy(&output.stderr);\n\n        print!("rustc failed and stderr was:\\n{}", s);\n    }\n\n    // \u7ba1\u9053\n    //\n    //\n    use std::error::Error;\n    use std::io::prelude::*; // \u9690\u85cf\u5bfc\u5165 \u4e07\u80fd\u5bfc\u5165\n    use std::process::{Stdio};\n\n    static PANGRAM: &\'static str = "the quick brown fox jumped over the lazy dog\\n";\n    // \u542f\u52a8 `wc` \u547d\u4ee4\n    let process = match Command::new("wc")\n                                .stdin(Stdio::piped())\n                                .stdout(Stdio::piped())\n                                .spawn() {\n        Err(why) => panic!("couldn\'t spawn wc: {}", why.description()),\n        Ok(process) => process,\n    };\n    // \u5c06\u5b57\u7b26\u4e32\u5199\u5165 `wc` \u7684 `stdin`\u3002\n    //\n    // `stdin` \u62e5\u6709 `Option<ChildStdin>` \u7c7b\u578b\uff0c\u4e0d\u8fc7\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e2a\u5b9e\u4f8b\u4e0d\u4e3a\u7a7a\u503c\uff0c\n    // \u56e0\u800c\u53ef\u4ee5\u76f4\u63a5 `unwrap \u5b83\u3002\n    match process.stdin.unwrap().write_all(PANGRAM.as_bytes()) {\n        Err(why) => panic!("couldn\'t write to wc stdin: {}", why.description()),\n        Ok(_) => println!("sent pangram to wc"),\n    }\n\n    // \u56e0\u4e3a `stdin` \u5728\u4e0a\u9762\u8c03\u7528\u540e\u5c31\u4e0d\u518d\u5b58\u6d3b\uff0c\u6240\u4ee5\u5b83\u88ab `drop` \u4e86\uff0c\u7ba1\u9053\u4e5f\u88ab\u5173\u95ed\u3002\n    //\n    // \u82e5\u7ba1\u9053\u4e0d\u5173\u95ed,  `wc` \u5c31\u4e0d\u4f1a\u5f00\u59cb\u5904\u7406\u6211\u4eec\u521a\u521a\u53d1\u9001\u7684\u8f93\u5165\u3002\n\n    let mut s = String::new();\n    match process.stdout.unwrap().read_to_string(&mut s) {\n        Err(why) => panic!("couldn\'t read wc stdout: {}",\n                           why.description()),\n        Ok(_) => print!("wc responded with:\\n{}", s),\n    }\n\n    // \u7b49\u5f85\n    //\n    //\u5982\u679c\u4f60\u60f3\u7b49\u5f85\u4e00\u4e2a process::Child \u5b8c\u6210\uff0c\u5c31\u5fc5\u987b\u8c03\u7528 Child::wait\uff0c\u8fd9\u4f1a\u8fd4\u56de \u4e00\u4e2a process::ExitStatus\u3002\n    //\n    let mut child = Command::new("sleep").arg("5").spawn().unwrap();\n    let _result = child.wait().unwrap(); // \u5fc5\u987b\u8c03\u7528 wait() \u7b49\u5f85\n    println!("reached end of main");\n\n}\n')),(0,l.kt)("h2",{id:"525-\u53cd\u5c04"},"5.25. \u53cd\u5c04"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 std::any::Any \u6765\u652f\u6301\u8fd0\u884c\u65f6\u53cd\u5c04\u3002\n// \u53ef\u4ee5\u63a5\u6536\u4efb\u4f55\u9759\u6001\u751f\u547d\u5468\u671f\u7c7b\u578b \u5373 \'static \u7c7b\u578b, \u4e0d\u80fd\u63a5\u6536\u975e\u9759\u6001\u751f\u547d\u5468\u671f\u7684\u7c7b\u578b\n\n   let v1 = 0xc0ffee_u32;\n    let v2 = E::He;\n    let v3 = S { x: 0xde, y: 0xad, z: 0xbeef };\n    let v4 = "rust";\n    let mut a: &Any; // trait object\n    a = &v1;\n    // \u5224\u65ad\u662f\u5426\u5c5e\u4e8e\u67d0\u79cd\u7c7b\u578b\n    assert!(a.is::<u32>());\n    // \u5168\u5c40\u552f\u4e00\u7c7b\u578b\u6807\u8bc6\u7b26\n    // \u7b49\u4ef7 get_type_id()\n    // TypeId { t: 12849923012446332737 }\n    println!("{:?}", TypeId::of::<u32>());   \n    a = &v2;\n    assert!(a.is::<E>());\n    // TypeId { t: 15527215023668350898 }\n    println!("{:?}", TypeId::of::<E>());   \n    a = &v3;\n    assert!(a.is::<S>());\n    // TypeId { t: 17868507538031848664 }\n    println!("{:?}", TypeId::of::<S>());   \n    a = &v4;\n    assert!(a.is::<&str>());\n    // TypeId { t: 1229646359891580772 }\n    println!("{:?}", TypeId::of::<&str>());\n\n\n    // \u5411\u4e0b\u8f6c\u578b\u4e3a\u5177\u4f53\u7c7b\u578b\n    use std::any::Any;\n    #[derive(Debug)]\n    enum E { H, He, Li}\n    struct S { x: u8, y: u8, z: u16 }\n    // \u53c2\u6570\u9664\u4f7f\u7528&Any\u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Box<Any>\n    fn print_any(a: &Any) {\n        if let Some(v) = a.downcast_ref::<u32>() {\n            println!("u32 {:x}", v);\n        } else if let Some(v) = a.downcast_ref::<E>() {\n            println!("enum E {:?}", v);\n    } else if let Some(v) = a.downcast_ref::<S>() {\n        println!("struct S {:x} {:x} {:x}", v.x, v.y, v.z);\n    } else {\n        println!("else!");\n    }\n    }\n    fn main() {\n        print_any(& 0xc0ffee_u32);                       \n        print_any(& E::He);                             \n        print_any(& S{ x: 0xde, y: 0xad, z: 0xbeef }); \n        print_any(& "rust");                           \n        print_any(& "hoge");                           \n    }\n\n\n\n    // \u975e\u9759\u6001\u751f\u547d\u5468\u671f\u7684\u7c7b\u578b\u672a\u5b9e\u73b0Any, \u65e0\u6cd5\u88ab Any \u7c7b\u578b\u63a5\u6536\n    use std::any::Any;\n    struct UnStatic<\'a> { x: &\'a i32 }\n    fn main() {\n        let a = 42;\n        let v = UnStatic { x: &a };\n        let mut any: &Any;\n        any = &v;  // Compile Error!\n    }\n    //ok\n    // \u56e0\u4e3a \u4f7f\u7528\u4e86 \u9759\u6001\u751f\u547d\u5468\u671f\u7c7b\u578b\u6765\u521b\u5efa UnStatic, \u4f7f\u5f97 UnStatic \u4e5f\u53d8\u4e3a \u4e86\u9759\u6001\u751f\u547d\u5468\u671f\u7c7b\u578b\n    static ANSWER: i32 = 42;\n    fn main() {\n        let v = UnStatic { x: &ANSWER };\n        let mut a: &Any;\n        a = &v;\n        assert!(a.is::<UnStatic>());\n    }\n')),(0,l.kt)("h2",{id:"526-\u5b8f"},"5.26. \u5b8f"),(0,l.kt)("h3",{id:"5261-\u5b8f\u57fa\u672c\u4ecb\u7ecd"},"5.26.1. \u5b8f\u57fa\u672c\u4ecb\u7ecd"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"rust macro process",src:t(10194).Z,width:"1472",height:"1230"})),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"\n\n/// \u53ef\u8fdb\u884c\u5143\u7f16\u7a0b\uff08metaprogramming\uff09\n/// \u5b8f\u5e76\u4e0d\u4ea7 \u751f\u51fd\u6570\u8c03\u7528\uff0c\u800c\u662f\u5c55\u5f00\u6210\u6e90\u7801\uff0c\u5e76\u548c\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u4e00\u8d77\u88ab\u7f16\u8bd1\n/// \n/// \u4f7f\u7528\u573a\u666f:\n/// - \u907f\u514d\u91cd\u590d\u4ee3\u7801 (https://doc.rust-lang.org/stable/rust-by-example/macros/dry.html)\n/// - \u9886\u57df\u4e13\u7528\u8bed\u8a00\uff08DSL\uff0cdomain-specific language\uff09\u3002\u5b8f\u5141\u8bb8\u4f60\u4e3a\u7279\u5b9a\u7684\u76ee\u7684\u521b\u9020\u7279\u5b9a\u7684 \u8bed\u6cd5\n/// - \u53ef\u53d8\u63a5\u53e3\uff08variadic interface\uff09\u3002\u6709\u65f6\u4f60\u9700\u8981\u80fd\u591f\u63a5\u53d7\u4e0d\u5b9a\u6570\u76ee\u53c2\u6570\u7684\u63a5\u53e3\uff0c\u6bd4\u5982 println!\n/// \n")),(0,l.kt)("p",null,"\u6309\u7167\u5b9a\u4e49\u65b9\u5f0f\u5206\u7c7b:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u58f0\u660e\u5b8f, \u901a\u8fc7 macro_rules! \u5b9a\u4e49 ( \u8f93\u5165\u4ee3\u7801, \u901a\u8fc7 match \u5339\u914d, \u4ee5\u53e6\u5916\u7684\u4ee3\u7801\u66ff\u6362\u8f93\u51fa)"),(0,l.kt)("li",{parentName:"ul"},"\u8fc7\u7a0b\u5b8f (\u63a5\u53d7 rust \u4ee3\u7801\u4f5c\u4e3a\u8f93\u5165,  \u5728\u6b64\u57fa\u7840\u4e0a\u4fee\u6539\u540e, \u8f93\u51fa;)")),(0,l.kt)("p",null,"\u6839\u636e\u4f7f\u7528\u7684\u8bed\u6cd5\u5f62\u5f0f\u53c8\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u8c03\u7528\u5b8f\uff0c \u5f62\u5982 println!\u3001 assert_eq! \u3001 thread_local!\u7b49\u53ef\u4ee5\u5f53\u4f5c\u51fd\u6570\u8c03\u7528\u7684\u5b8f, "),(0,l.kt)("li",{parentName:"ul"},"\u5c5e\u6027\u5b8f\uff0c \u4e5f\u5c31\u662f\u5f62\u5982 ",(0,l.kt)("inlineCode",{parentName:"li"},"#[derive(Debug))\u6216#[cfg]"),"\u8fd9\u79cd\u5f62\u5f0f\u7684\u8bed\u6cd5")),(0,l.kt)("p",null,"\u6309\u5b8f\u7684\u6765\u6e90\uff0c\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e24\u7c7b"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5185\u7f6e\u5b8f"),(0,l.kt)("li",{parentName:"ul"},"\u81ea\u5b9a\u4e49\u5b8f")),(0,l.kt)("p",null,"\u6709\u54ea\u4e9b\u5185\u7f6e\u5b8f?"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'todo!()\n\nprint!()\nprintln!()\neprintln!(" = {:?}", );\n\nvec!\n\npanic!\n\n\n\n#[derive(Debug)] \u8c03\u8bd5\u6253\u5370 struct\n\n#[allow(dead_code)] \u7528\u4e8e\u5c4f\u853d\u5bf9\u672a\u4f7f\u7528\u4ee3\u7801\u7684\u8b66\u544a\n\n\n// \u901a\u8fc7\u8fd9\u4e2a\u5c5e\u6027\u5c4f\u853d\u8b66\u544a\u3002\n#[allow(non_camel_case_types)]\n\n#[cfg(test)] // \u6761\u4ef6\u7f16\u8bd1, \u53ea\u5728 \u6d4b\u8bd5\u65f6\u7f16\u8bd1\n\n')),(0,l.kt)("h3",{id:"5262-\u58f0\u660e\u5b8f"},"5.26.2. \u58f0\u660e\u5b8f"),(0,l.kt)("h4",{id:"52621-\u521b\u5efa\u5b8f"},"5.26.2.1. \u521b\u5efa\u5b8f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// \u5b8f\u5c55\u5f00:\n// \u5047\u5982\u662f\u5355\u72ec\u7684\u6587\u4ef6\u5219\u6267\u884c\u6b64\u547d\u4ee4\u5c55\u5f00\n//  rustc -Z unstable-options --pretty=expanded main.rs\n// \u5047\u5982\u662f cargo \u751f\u6210\u7684\u4e8c\u8fdb\u548cl\u5305\u5219\u6267\u884c\u6b64\u547d\u4ee4\n// cargo rustc -- -Z unstable-options --pretty=expanded\n\n\n// macro rules!\u672c\u8eab \u4e5f \u662f\u4e00\u79cd\u58f0\u660e\u5b8f \uff0c \u53ea\u4e0d\u8fc7\u5b83\u7531\u7f16\u8bd1\u5668 \u5185\u90e8\u6240\u5b9a\u4e49\n// \u5b8f\u7684\u539f\u7406\u548c\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7684\u539f\u7406\u7c7b\u4f3c \n// \n// \u8bed\u6cd5:\n// macro_rule! $macro_name { \n//      // \u6269\u5c55\u90e8\u5206, \u5927\u5c0f\u62ec\u53f7\u5747\u53ef\n//      ($arg1:expr, $arg2:expr) => {code...}; // \u5206\u652f\u4ee5\u5206\u53f7\u7ed3\u5c3e\n//      () => ()                                // \u6700\u540e\u4e00\u4e2a\u5206\u652f\u53ef\u7701\u7565\u5206\u53f7\n// }\n// \u672a\u6765\u4f1a\u652f\u6301 macro \u5173\u952e\u5b57\n// #![feature(decl_macro)]\n// macro unless($arg:expr, $branch:expr) {\n//     ( if !$arg { $branch }); \n// } \n// \n// \u5339\u914d\u8868\u8fbe\u5f0f\u4e2d\u7c7b\u578b\u652f\u6301: (\u5404\u4e2a\u7c7b\u578b\u80fd\u591f\u5339\u914d\u7684\u8303\u56f4\u6709\u91cd\u53e0\u8986\u76d6)\n// \u2022 item\uff0c \u4ee3\u8868\u8bed\u8a00\u9879\uff0c\u5c31\u662f\u7ec4\u6210\u4e00\u4e2a Rust\u5305\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u6bd4\u5982\u6a21\u5757\u3001\u58f0\u660e\u3001\u51fd\u6570\u5b9a\u4e49 \u3001 \u7c7b\u578b\u5b9a\u4e49\u3001\u7ed3\u6784\u4f53\u5b9a\u4e49\u3001 impl \u5b9e\u73b0\u7b49\u3002\n// \u2022 block\uff0c \u4ee3\u8868\u4ee3\u7801\u5757\uff0c\u7531\u82b1\u62ec\u53f7\u9650\u5b9a\u7684\u4ee3\u7801\u3002\n// \u2022 stmt\uff0c\u4ee3\u8868\u8bed\u53e5 \uff0c \u4e00\u822c\u662f \u6307\u4ee5\u5206\u53f7\u7ed3\u5c3e\u7684\u4ee3\u7801 \u3002\n// \u2022 expr\uff0c\u6307\u4ee3\u8868\u8fbe\u5f0f\uff0c\u4f1a\u751f\u6210\u5177\u4f53\u7684\u503c \u3002\n// \u2022 pat\uff0c\u6307\u4ee3\u6a21\u5f0f\u3002\n// \u2022 ty\uff0c \u8868\u793a\u7c7b\u578b\u3002\n// \u2022 ident\uff0c \u6307\u4ee3\u6807\u8bc6\u7b26\u3002\u5982 \u53d8\u91cf\u540d\u6216\u51fd\u6570\u540d\n// \u2022 path\uff0c\u6307\u4ee3\u8def\u5f84\uff0c \u6bd4\u5982foo\u3001 std::iter\u7b49\u3002\n// \u2022 meta\uff0c \u5143\u4fe1\u606f\uff0c\u8868\u793a\u5305\u542b\u5728# [...]\u6216#![...]\u5c5e\u6027 \u5185\u7684\u4fe1 \u606f\u3002\n// \u2022 tt , TokenTree \u7684 \u7f29\u5199\uff0c\u6307\u4ee3\u8bcd\u6761\u6811\u3002\u6bd4 expr \u80fd\u5339\u914d\u7684\u8303\u56f4\u8981\u5e7f\n// \u2022 vis\uff0c\u6307\u4ee3\u53ef\u89c1\u6027\uff0c\u6bd4\u5982 pub\u3002\n// \u2022 lifetime\uff0c \u6307\u4ee3\u751f\u547d\u5468\u671f\u53c2\u6570 \u3002\n\n// \n// \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5b8f\uff0c\u540d\u4e3a `say_hello`\u3002\nmacro_rules! say_hello {\n    // `()` \u8868\u793a\u6b64\u5b8f\u4e0d\u63a5\u53d7\u4efb\u4f55\u53c2\u6570\u3002\n    () => (// \u8fd9\u91cc\u4f7f\u7528 \u5927\u62ec\u53f7\u4ea6\u53ef\n        // \u6b64\u5b8f\u5c06\u4f1a\u5c55\u5f00\u6210\u8fd9\u4e2a\u4ee3\u7801\u5757\u91cc\u9762\u7684\u5185\u5bb9\u3002\n        println!("Hello cacro!");\n    )\n}\n// \u8fd9\u4e2a\u8c03\u7528\u5c06\u4f1a\u5c55\u5f00\u6210 `println("xxx");`!\nsay_hello!();// \u8fd9\u91cc\u4f7f\u7528\u5927\u62ec\u53f7\u4ea6\u53ef\n\n// \u5e26\u53c2\u6570\nmacro_rules! hello {\n    ($name:expr) => {// \u4f7f\u7528 \u5927\u5c0f\u62ec\u53f7\u5747\u53ef\n        println!("Hello, {}", $name);\n    };\n}\nfn main() {\n    hello!("xy")// \u4f7f\u7528\u5927\u5c0f\u62ec\u53f7\u5747\u53ef\n}\n\n// \u5e26\u4ee3\u7801\u6bb5\nmacro_rules! unless {\n    ($arg: expr, $logic:expr) => (\n        if !$arg {\n            $logic\n        }\n    );\n}\nfn main() {\n    let (a, b) = (1, 2);\n    unless!(a > b, {// \u5927\u62ec\u53f7\u53ef\u7701\u7565\n        println!("a < b");\n    });\n}\n\n\n// \u53c2\u6570\u7c7b\u578b\u4e3a \u6807\u8bc6\u7b26\nmacro_rules! create_function {\n    // `ident` \u6307\u793a\u7b26, \u6807\u8bc6 func_name \u662f\u53d8\u91cf\u540d\u6216\u51fd\u6570\u540d\n    ($func_name:ident) => (\n        fn $func_name() {\n            // `stringify!` \u5b8f\u628a `ident` \u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u3002\n            println!("You called {:?}()", stringify!($func_name))\n        }\n    )\n}\n// \u501f\u52a9\u4e0a\u8ff0\u5b8f\u6765\u521b\u5efa\u540d\u4e3a `foo` \u548c `bar` \u7684\u51fd\u6570\u3002\ncreate_function!(foo);\ncreate_function!(bar);\n\nmacro_rules! print_result {\n    // `expr` \u6307\u793a\u7b26\u8868\u793a\u8f93\u5165\u53c2\u6570\u4e3a\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\n    ($expression:expr) => (\n        println!("{:?} = {:?}",\n                    stringify!($expression),// `stringify!` \u628a\u8868\u8fbe\u5f0f*\u539f\u6837*\u8f6c\u6362\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\n                    $expression)// \u6267\u884c\u8868\u8fbe\u5f0f\n    )\n}\nfoo();\nbar();\nprint_result!(1u32 + 1);\n//\u4ee3\u7801\u5757\u4e5f\u662f\u8868\u8fbe\u5f0f\uff01\nprint_result!({\n    let x = 1u32;\n    x * x + 2 * x - 1\n});\n\n\n')),(0,l.kt)("h4",{id:"52622-\u91cd\u590d\u5faa\u73af\u5339\u914d"},"5.26.2.2. \u91cd\u590d\u5faa\u73af\u5339\u914d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u4e0d\u5b9a\u53c2\u6570 \u53ef\u53d8\u63a5\u53e3\n//\u5b8f\u5728\u53c2\u6570\u5217\u8868\u4e2d\u53ef\u4ee5\u4f7f\u7528 + \u6765\u8868\u793a\u4e00\u4e2a\u53c2\u6570\u53ef\u80fd\u51fa\u73b0\u4e00\u6b21\u6216\u591a\u6b21\uff0c\n// \u4f7f\u7528 * \u6765\u8868\u793a\u8be5 \u53c2\u6570\u53ef\u80fd\u51fa\u73b0\u96f6\u6b21\u6216\u591a\u6b21\n//\nmacro_rules! map {\n    ($($key:expr => $value:expr),*) => {\n        // \u5305\u88f9\u4e00\u5c42\u5927\u62ec\u53f7, \u8868\u793a\u8fd4\u56de\u4e00\u4e2a\u503c\n        {\n            // \u4f7f\u7528\u7edd\u5bf9\u8def\u5f84, \u907f\u514d\u51b2\u7a81\n            // \u82e5\u4f7f\u7528\u5230\u81ea\u5b9a\u4e49\u51fd\u6570, \u9700\u8981\u5728\u8def\u5f84\u4e2d\u4f7f\u7528 $crate , \u907f\u514d\u5bfc\u51fa\u65f6\u51fa bug\n            let mut map = std::collections::HashMap::new();\n            // \u5faa\u73af\u8bfb\u53d6\n            $(\n                map.insert($key, $value);\n            )*\n            map\n        }\n    };\n}\nfn main() {\n    // \u8c03\u7528\u65f6, \u5927\u5c0f\u62ec\u53f7\u90fd\u53ef\n    let map = map!("a" => 1, "b" => 2, "c" => 3);\n    println!("map: {:?}", map);\n    let mat1 = map!{1 => "a", 2 => "b", 3 => "c"};\n    println!("mat1: {:?}", mat1);\n    //\u4f46\u8fd8\u662f\u5b58\u5728\u95ee\u9898, \u672b\u5c3e\u5143\u7d20\u4e0d\u80fd\u6709\u9017\u53f7 , \u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u591a\u4e2a\u5339\u914d\u89c4\u5219\u89e3\u51b3\n    // error\n    let map2 = map!("a" => 1, "b" => 2,);\n}\n\n\n// \u89e3\u51b3:\nmacro_rules! map {\n    ($($key:expr => $value:expr),*) => {\n        {\n            let mut map = std::collections::HashMap::new();\n            $(\n                map.insert($key, $value);\n            )*\n            map\n        }\n    };\n    // \u65b0\u589e\u4e00\u6761\u5339\u914d\u89c4\u5219\n    ($($key:expr => $value:expr,)*) => {\n        map!($($key => $value),*) // \u9012\u5f52\u8c03\u7528\u524d\u9762\u7684 \u5339\u914d\n    };\n\n}\n\n// \u6216\u8005\u6700\u7b80\u5355\u7684\u65b9\u6cd5, \u5c06\u539f\u6765\u7684\u5339\u914d\u7565\u52a0\u4fee\u6539:\n// \u6dfb\u52a0\u7684 $(,)* \u8868\u793a\u5339\u914d\u4efb\u610f\u6b21\u6570\u7684\u9017\u53f7\n($($key:expr => $value:expr),* $(,)*) => {}\n// or\n($($key:expr => $value:expr,)* $(,)*) => {}\n\n\nfn main() {\n    let map = map!(\n        1 => "a",\n        2 => "b", // \u53ef\u4ee5\u4f7f\u7528 \u9017\u53f7\u7ed3\u5c3e\u4e86\n    );\n    println!("{:?}", map);\n}\n\n\n')),(0,l.kt)("h4",{id:"52623-\u5b9e\u9645\u6848\u4f8b"},"5.26.2.3. \u5b9e\u9645\u6848\u4f8b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'//  \u521b\u5efa map \u5b8f\nmacro_rules! map {\n    // @unit \u662f\u7ea6\u5b9a\u4fd7\u6210\u7684\u5728\u5b8f\u5185\u90e8\u5b9a\u4e49\u5b8f\u7684\u547d\u540d\u89c4\u5219\n    // \u5fc5\u987b\u5b9a\u4e49\u5728\u5f00\u5934, \u5426\u5219\u5c31\u6309\u7167\u666e\u901a\u5339\u914d\u5206\u652f\u5904\u7406\u4e86\n    (@unit $($x:tt)*) => {()};    // \u7edf\u8ba1 item \u4e2a\u6570\u65f6\u4f7f\u7528\u7684\u5355\u4f4d, \u8fd9\u91cc\u4f7f\u7528 \u7a7a\u5143\u7ec4, \u4e0d\u5360\u7a7a\u95f4\n    (@count $($key:expr),* ) => {\n        (<[()]>::len(&[$(map!(@unit $key)),*]));\n    };\n\n    ($($key:expr => $value:expr),* $(,)*) => (\n        {\n            let _cap = map!(@count $($key),*);\n            let mut _map = std::collections::HashMap::with_capacity(_cap);\n           $(\n               _map.insert($key, $value);\n            )*\n           _map\n       }\n    )\n}\nfn main() {\n    let map = map!(\n        1 => "a",\n        2 => "b",\n    );\n    println!("{:?}", map);\n}\n\n\n\n\n\n\n\n//  \u5b9e\u4f8b:\n    // `min!` \u5c06\u6c42\u51fa\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\u7684\u6700\u5c0f\u503c\u3002\n    macro_rules! find_min {\n        // \u57fa\u672c\u60c5\u5f62\uff1a\n        ($x:expr) => ($x);\n        // `$x` \u540e\u9762\u8ddf\u7740\u81f3\u5c11\u4e00\u4e2a `$y,`\n        ($x:expr, $($y:expr),+) => (\n            // \u5bf9 `$x` \u540e\u9762\u7684 `$y` \u4eec\u8c03\u7528 `find_min!` \n            std::cmp::min($x, find_min!($($y),+))\n        )\n    }\n    println!("{}", find_min!(1u32));\n    println!("{}", find_min!(1u32 + 2 , 2u32));\n    println!("{}", find_min!(5u32, 2u32 * 3, 4u32));\n\n\n\n\n\n\n    // \u521b\u9020 dsl\n    // \u8fd9\u91cc\u521b\u9020\u5173\u952e\u5b57 eval\n    //\n    macro_rules! calculate {\n        (eval $e:expr) => {\n            let val: usize = $e; // \u5f3a\u5236\u7c7b\u578b\u4e3a\u6574\u578b\n            println!("{} = {}", stringify!{$e}, val);\n        };\n    }\n    calculate! {\n        eval 1 + 2 \n    }\n    calculate! {\n        eval (1 + 2) * (3 / 4)\n    }\n\n    // \u5347\u7ea7\u7248 dsl\n    // \u53ef\u63a5\u53d7\u591a\u4e2a\u53c2\u6570\n    //\n    macro_rules! calculate {\n        // \u5355\u4e2a `eval` \u7684\u6a21\u5f0f\n        (eval $e:expr) => {{\n            {\n                let val: usize = $e; // Force types to be integers\n                println!("{} = {}", stringify!{$e}, val);\n            }\n        }};\n    \n        // \u9012\u5f52\u5730\u62c6\u89e3\u591a\u91cd\u7684 `eval`\n        (eval $e:expr, $(eval $es:expr),+) => {{\n            calculate! { eval $e }\n            calculate! { $(eval $es),+ }\n        }};\n    }\n    calculate! { \n        eval 1 + 2,\n        eval 3 + 4,\n        eval (2 * 3) + 1\n    }\n\n\n\n\n\n')),(0,l.kt)("h3",{id:"5263-\u5b8f\u8c03\u8bd5"},"5.26.3. \u5b8f\u8c03\u8bd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u5fc5\u987b nightly rust \u624d\u884c\n// #![feature(trace_macros) \u6807\u6ce8\u5b8f\u5b9a\u4e49, \u7136\u540e\u5728main \u5f00\u5934 trace_macros!(true);\n\n#![feature(trace_macros)]\nmacro_rules! hashmap {\n    (@unit $($x:tt)*) => (());\n    (@count $($rest:expr),*) => \n        (<[()]>::len(&[$(hashmap!(@unit $rest)),*]));\n    ($($key:expr => $value:expr),* $(,)*) => {\n        {\n            let _cap = hashmap!(@count $($key),*);\n            let mut _map = \n                ::std::collections::HashMap::with_capacity(_cap);\n           $(\n               _map.insert($key, $value);\n           )*\n           _map\n       }\n   };\n}\nfn main(){\n   trace_macros!(true);\n   let map = hashmap!{\n       "a" => 1,\n       "b" => 2,\n       "c" => 3, \n   };\n   assert_eq!(map["a"], 1);\n}\n\n\n')),(0,l.kt)("h3",{id:"5264-\u8fc7\u7a0b\u5b8f"},"5.26.4. \u8fc7\u7a0b\u5b8f"),(0,l.kt)("h4",{id:"52641-\u8fc7\u7a0b\u5b8f\u57fa\u672c\u4f7f\u7528\u89c4\u5219"},"5.26.4.1. \u8fc7\u7a0b\u5b8f\u57fa\u672c\u4f7f\u7528\u89c4\u5219"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n// \u53ef\u4ee5\u7528\u6765:\n// - \u81ea\u5b9a\u4e49\u6d3e\u751f\u5c5e\u6027, \u7c7b\u4f3c\u4e8e #[derive(Debug)]\u8fd9\u6837\u7684 derive \u5c5e\u6027\uff0c\u53ef\u4ee5\u81ea\u52a8\u4e3a \u7ed3\u6784\u4f53\u6216\u679a\u4e3e\u7c7b\u578b\u8fdb\u884c\u8bed\u6cd5\u6269\u5c55, \u589e\u52a0\u65b0\u7684\u65b9\u6cd5\u5b9e\u73b0\n// - \u81ea\u5b9a\u4e49\u5c5e\u6027\uff0c \u53ef\u4ee5\u81ea\u5b9a\u4e49\u7c7b\u4f3c\u4e8e#[cfg()]\u8fd9\u79cd\u5c5e\u6027\n// - \u7c7b\u4f3c\u51fd\u6570\u8c03\u7528\u7684\u5b8f, \u548c macro_rules!\u5b9a\u4e49\u7684\u5b8f\u7c7b\u4f3c\uff0c\u4ee5 Bang \u7b26\u53f7(\u5c31\u662f\u53f9\u53f7 "!" )\u7ed3\u5c3e\u7684\u5b8f \u3002\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u88ab\u8c03\u7528 , custom!(...)\u3002\n\n\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-t"},"# \u8fc7\u7a0b\u5b8f\uff0c\u5fc5\u987b\u5199\u5728\u5355\u72ec\u7684lib\u7c7b\u578b\u7684crate\u4e2d, `cargo new --lib xxx`, \n\n    # \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a crate \u91cc\u540c\u65f6\u5b9a\u4e49&\u4f7f\u7528 procedual macro ?\n    # procedual macro \u662f\u5728\u9879\u76ee\u7f16\u8bd1\u524d\u4f1a\u88ab\u9884\u5148\u7f16\u8bd1\u52a0\u5de5\u7684\u4e00\u6bb5\u7a0b\u5e8f, \u5982\u679c\u5b9a\u4e49\u548c\u4f7f\u7528\u5728\u540c\u4e00\u4e2a crate, \u5c31\u5d4c\u5165\u4e86\u6b7b\u9501 (\u9e21\u751f\u86cb\u86cb\u751f\u9e21\u7684\u95ee\u9898)\n    # crate \u4ee3\u7801\u8981\u7f16\u8bd1\u7684\u8bdd\u9700\u8981\u5148\u5904\u7406 procedual macro\u5c55\u5f00, \u800c \u5904\u7406 procedual macro \u5c55\u5f00\u9700\u8981\u5148\u7f16\u8bd1\n\n# \u9700\u8981 \u4e3a\u5f53\u524d\u9879\u76ee\u58f0\u660e\u4f7f\u7528 proc_macro,  proc_macro crate\u4e3a rust \u81ea\u5e26, \u9ed8\u8ba4\u4e0d\u5f15\u5165, \u9700\u8981\u663e\u5f0f\u58f0\u660e\u4e3a true\n\n[lib]\n# \u8bbe\u7f6e\u4e3a proc_macro \u7c7b\u578b\nproc_macro = true\n\n\n")),(0,l.kt)("h4",{id:"52642-\u81ea\u5b9a\u4e49\u5c5e\u6027\u5b8f"},"5.26.4.2. \u81ea\u5b9a\u4e49\u5c5e\u6027\u5b8f"),(0,l.kt)("p",null,"Rust \u81ea\u8eab\u6709\u5f88\u591a\u5185\u7f6e\u7684\u5c5e\u6027 \uff0c \u6bd4\u5982\u6761\u4ef6\u7f16\u8bd1\u5c5e\u6027 ",(0,l.kt)("inlineCode",{parentName:"p"},"#[cfgOJ\u548c\u6d4b\u8bd5\u5c5e\u6027#[test]")),(0,l.kt)("p",null,"\u8fc7\u7a0b\u5b8f\u5b9e\u73b0\u81ea\u5b9a\u4e49\u5c5e\u6027\u7684\u529f\u80fd\u8fd8\u672a\u7a33\u5b9a\u3002\u5728 \u8be5\u7248\u672c\u7a33\u5b9a\u4e4b\u524d\uff0c\u5fc5\u987b\u5728 Nightly \u7248\u672c\u4e0b\u4f7f\u7528 ",(0,l.kt)("inlineCode",{parentName:"p"},"#![feature(custom_attribute)]"),"\u7279\u6027, \u5f53\u524d\u7248\u672c\u4e0d\u9700\u8981\u4e86"),(0,l.kt)("p",null,"\u5b9a\u4e49\u5b8f:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'use proc_macro::TokenStream;\n\n#[proc_macro_attribute]\npub fn attr_with_args(args: TokenStream, _input: TokenStream) -> TokenStream {\n    // args \u662f #[attr_with_args("Hello attr macro.")] \u4e2d\u7684\u5b57\u7b26\u4e32\n    // _input \u662f\u8f93\u5165, \u5373 fn boo() {}, \u8fd9\u91cc\u76f4\u63a5\u5ffd\u7565\u4e86\n    format!("fn foo() -> &\'static str {{{}}}", args.to_string()).parse().unwrap()\n}\n')),(0,l.kt)("p",null,"\u4f7f\u7528:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'#[macro_use] extern crate proc_macro_me;\n\n#[test]\nfn tt() {\n    #[attr_with_args("Hello attr macro.")]\n    fn foo() {}\n    println!("{:?}", foo());//"Hello attr macro."\n}\n')),(0,l.kt)("h4",{id:"52643-\u51fd\u6570\u8c03\u7528\u5b8f"},"5.26.4.3. \u51fd\u6570\u8c03\u7528\u5b8f"),(0,l.kt)("p",null,"\u5b9a\u4e49\u51fd\u6570\u8c03\u7528\u5b8f:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'use proc_macro::TokenStream;\n\n#[proc_macro]\npub fn make_fn_answer(_item: TokenStream) -> TokenStream {\n    "fn answer() -> u32 { 11 }".parse().unwrap()\n}\n')),(0,l.kt)("p",null,"\u4f7f\u7528:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'#[macro_use] extern crate proc_macro_me;\n\n#[test]\nfn tt() {\n    make_fn_answer!();\n    println!("{:?}", answer());// 11\n}\n')),(0,l.kt)("h4",{id:"52644-derive-\u5b8f"},"5.26.4.4. derive \u5b8f"),(0,l.kt)("p",null,"\u5b9a\u4e49\u5b8f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u81ea\u5b9a\u4e49 derive \u5b8f\n//\n// extern crate proc_macro;\n// use proc_macro::TokenStream;\n//or\n// use self::proc_macro::TokenStream;\n// or\nuse proc_macro::TokenStream;\n\n\n// AnswerFn \u76f8\u5f53\u4e8e\u6807\u8bc6\u7b26, \u4f7f\u7528\u65f6, \u8fd9\u6837\u4f7f\u7528 #[derive(Hello, AnswerFn)]\n#[proc_macro_derive(AnswerFn)]\npub fn derive_answer_fn(_input: TokenStream) -> TokenStream {\n    "fn answer() -> u32 { 11 }".parse().unwrap()\n}\n\n#[proc_macro_derive(Hello)]//\u8868\u793a\u5176\u4e0b\u65b9\u7684\u51fd\u6570\u4e13\u95e8\u5904\u7406\u81ea\u5b9a\u4e49\u6d3e\u751f\u5c5e\u6027\npub fn derive_a_hello(input: TokenStream) -> TokenStream {\n    let input = input.to_string();\n    // \u4fdd\u8bc1 \u4ee3\u7801\u4e2d\u5b58\u5728 struct A\n    assert!(input.contains("struct A"));\n    //\u65b9\u6cd5\u6700\u7ec8\u4f1a\u8fd4\u56de\u4e00\u4e2a Result<TokenSteam, Err\u3009\u7c7b\u578b\uff0c \n    // \u6240\u4ee5\u8fd8\u9700\u8981\u518d\u6b21\u7528 unwrap \u65b9\u6cd5\u624d\u80fd\u8fd4\u56de\u3002\n    r#"\n        impl A {\n            fn a(&self) -> String {\n                format!("hello from a impl")\n            }\n        }\n    "#.parse().unwrap() \n}\n\n\n')),(0,l.kt)("p",null,"\u4f7f\u7528:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// #[macro_use] extern crate proc_macro_me;\n//or\nuse proc_macro_me::{AnswerFn, Hello};\n\n#[derive(Hello, AnswerFn)]\npub struct A;\n\n#[test]\nfn test_derive_a() {\n    let aa = A;\n    assert_eq!("hello from a impl".to_string(), aa.a());\n    println!("{}", answer());\n}\n')),(0,l.kt)("h3",{id:"5265-\u4f7f\u7528\u7b2c\u4e09\u65b9\u5305"},"5.26.5. \u4f7f\u7528\u7b2c\u4e09\u65b9\u5305"),(0,l.kt)("p",null,"\u5b98\u65b9\u7684\u8fc7\u7a0b\u5b8f\u5e93\u4e3aproc_macro, \u8fd8\u6ca1\u7a33\u5b9a\uff0c\u4e0d\u63a8\u8350\u76f4\u63a5\u4f7f\u7528"),(0,l.kt)("p",null,"derive_more"),(0,l.kt)("p",null,"syn  \u5b8c\u6574\u5b9e\u73b0\u4e86 Rust \u6e90\u7801 \u7684\u8bed \u6cd5\u6811\u7ed3\u6784"),(0,l.kt)("p",null,"quote \u53ef\u4ee5\u5c06 syn \u7684\u8bed\u6cd5\u6811\u7ed3\u6784\u8f6c\u4e3a proc macro::TokenStrem \u7c7b\u578b"),(0,l.kt)("p",null,"proc_macro2"),(0,l.kt)("p",null,"proc-macro-workshop"),(0,l.kt)("p",null,"seq-macro"),(0,l.kt)("p",null,"paste"),(0,l.kt)("h3",{id:"5266-\u7f16\u8bd1\u5668\u63d2\u4ef6"},"5.26.6. \u7f16\u8bd1\u5668\u63d2\u4ef6"),(0,l.kt)("p",null,"cargo-expand"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# install\ncargo install cargo-expand\nrustup component add rustfmt # this is used to format the expanded code\nrustup install nightly # \u5728 Nightly \u7248\u672c\u7684 Rust \u4e4b\u4e0b\uff0c\u914d\u5408, just need install nightly version, not have to switch to nightly\n\n\n# \u4f7f\u7528 \ncargo expand # this will expand all code\n\ncargo expand <function name> # this will only expand the specified function\n")),(0,l.kt)("h1",{id:"6-unsafe-\u5c4f\u853d\u5185\u5b58\u5b89\u5168\u68c0\u67e5"},"6. unsafe \u5c4f\u853d\u5185\u5b58\u5b89\u5168\u68c0\u67e5"),(0,l.kt)("h2",{id:"61-unsafe-\u57fa\u672c\u573a\u666f"},"6.1. unsafe \u57fa\u672c\u573a\u666f"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u4f7f\u7528 unsafe \u5b9a\u4e49 \u4e0d\u5b89\u5168\u7684 \u51fd\u6570/\u65b9\u6cd5/trait, \u4ee5\u53ca\u4e3a trait \u5b9e\u73b0\u65b9\u6cd5\n// \n// \u5982: String::from_utf8_unchecked \u5c31\u662f\u4e0d\u5b89\u5168\u7684, \u5bf9\u4e8e\u8f93\u5165\u53c2\u6570, \u6ca1\u6709\u68c0\u67e5\u662f\u5426\u662f\u6709\u6548\u7684 utf-8\u5b57\u8282\u5e8f\u5217; String::from_utf8_lossy \u5219\u662f\u5b89\u5168\u7684\n// \u5982: Send trait, Sync trait \u90fd\u662f unsafe \u7684, \u4f7f \u7528 unsafe\u5bf9 Send\u548c Sync\u8fdb\u884c\u6807\u8bb0\uff0c\u5c31\u610f\u5473\u7740\u5f00\u53d1\u8005\u624b\u52a8\u5b9e\u73b0\u5b83\u4f1a\u6709\u5b89\u5168\u98ce\u9669, \u6240\u4ee5\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5bf9\u6211\u4eec\u81ea\u5b9a\u4e49\u7684\u7c7b\u578b\u5b9e\u73b0\u8fd9\u4e24\u4e2a\u63a5\u53e3\n// \u5982: Searcher trait, \u6ca1\u6709\u68c0\u67e5\u622a\u53d6\u7684\u5b57\u7b26\u4f4d\u7f6e\u5728\u5b57\u7b26\u4e32\u4e2d\u662f\u5426\u662f\u6709\u6548\u5b57\u7b26\u8fb9\u754c, \u9700\u8981\u5f00\u53d1\u8005\u81ea\u5df1\u4fdd\u8bc1\n\n\n// \u5728 unsafe \u5757\u4e2d\u6267\u884c\u4e0d\u5b89\u5168\u7684\u64cd\u4f5c (\u5bf9\u4e8e\u4e0d\u5b89\u5168\u7684\u64cd\u4f5c, \u4f1a\u5c4f\u853d\u5185\u5b58\u5b89\u5168\u68c0\u67e5, \u4f46\u662f\u5bf9\u4e8e\u5b89\u5168\u7684\u64cd\u4f5c, \u4f9d\u7136\u6709\u5b89\u5168\u68c0\u67e5)\n// \n/// - \u89e3\u5f15\u7528\u88f8\u6307\u9488 (\u4f46\u662f\u521b\u5efa\u88f8\u6307\u9488\u65e0\u9700\u5728 unsafe \u4e2d)\n/// - \u8c03\u7528 unsafe \u7684\u51fd\u6570/\u65b9\u6cd5\n/// - \u8bbf\u95ee\u4fee\u6539\u53ef\u53d8\u9759\u6001\u53d8\u91cf\n/// - \u5b9e\u73b0 unsafe \u7684 trait\n// - \u8bfb\u5199 union \u8054\u5408\u4f53\u4e2d\u7684  \u5b57\u6bb5\n\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// \u8bbf\u95ee\u4fee\u6539\u53ef\u53d8\u9759\u6001\u53d8\u91cf (\u4e00\u822c\u7528\u4e0d\u5230, \u53ea\u662f\u7528\u4e8e\u548c c \u4ea4\u4e92)\n// \n// \n// \u9759\u6001\u53d8\u91cf\u662f\u5168\u5c40\u53ef\u8bbf \u95ee \u7684 \u3002\u5bf9\u4e8e\u4e0d\u53ef\u53d8\u9759\u6001\u53d8\u91cf\u6765\u8bf4\uff0c\u8bbf\u95ee\u5b83\u4e0d\u5b58\u5728\u4efb\u4f55\u5b89\u5168 \u95ee\u9898\n// \u5982\u679c\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf \u95ee\u53ef\u53d8\u9759\u6001\u53d8\u91cf, \u4f1a\u6709\u5b89\u5168\u95ee\u9898, \u6240\u4ee5\u8981\u5728 unsafe \u4e2d\u4fee\u6539\nstatic mut COUNTER: u32 = 0;\nfn main() {\n    let inc = 3;\n    unsafe {\n        COUNTER += inc;\n        println!("COUNTER: {}", COUNTER);\n    }\n}\n\n\n\n\n\n// \u8bbf\u95ee union \u8054\u5408\u4f53 (\u53ea\u8981\u8fd8\u662f\u4e3a\u4e86\u65b9\u4fbf \u548c c \u4ea4\u4e92)\n// \n// \n// \n\n\n\n\n\n// \u89e3\u5f15\u7528\u88f8/\u539f\u751f\u6307\u9488 (raw pointer), \u88f8\u6307\u9488\u5e38\u7528\u4e8e \u548c c \u4ea4\u4e92\n//\n// \u5206\u4e3a:\n// \u4e0d\u53ef\u53d8\u88f8\u6307\u9488   *const T\n// \u53ef\u53d8\u88f8\u6307\u9488     *mut T\n//\n// - \u5141\u8bb8\u5ffd\u7565\u501f\u7528\u89c4\u5219: \u67d0\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u540c\u65f6\u62e5\u6709\u53ef\u53d8\u4e0d\u53ef\u53d8\u88f8\u6307\u9488, \u6216\u8005\u591a\u4e2a\u540c\u65f6\u6307\u5411\u76f8\u540c\u4f4d\u7f6e\u7684\u53ef\u53d8\u88f8\u6307\u9488\n// - \u4e0d\u4fdd\u8bc1\u6307\u5411\u7684\u5185\u5b58\u662f\u6709\u6548\u7684, \u5141\u8bb8\u6307\u5411\u7a7a\u5730\u5740\n// - \u4e0d\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\n// - \u6ca1\u6709\u81ea\u52a8\u6e05\u7406\u7684\u529f\u80fd, \u9700\u8981\u624b\u52a8\u6e05\u7406\u5185\u5b58\n// \nlet mut a = 1;\nlet rp1 = & a as *const i32; // \u521b\u5efa\u65f6\u65e0\u9700\u5728 unsafe\n// \u540c\u65f6\u51fa\u73b0\u4e86 \u53ef\u53d8, \u4e0d\u53ef\u53d8\u501f\u7528, \u7f16\u8bd1\u5668\u4e0d\u62a5\u9519\nlet rp2 = &mut a as *mut i32;\nunsafe {\n    println!("rp1 = {}", *rp1);\n    println!("rp2 = {}", *rp2);\n}\n\n\n// \u8bbf\u95ee unsafe \u65b9\u6cd5\n// \n//\nunsafe fn danger() {\n    println!("dangerous");\n}\nunsafe {\n    danger();\n}\n\n\n\n\n// \n\n\n\n')),(0,l.kt)("h2",{id:"62-\u4ea4\u53c9\u7f16\u8bd1"},"6.2. \u4ea4\u53c9\u7f16\u8bd1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"# \u5982\u679c\u662f\u9488\u5bf9 ARM \u5d4c\u5165\u5f0f\u5f00\u53d1\u5e73\u53f0, \u4e0d\u80fd\u4f7f \u7528std\u6807\u51c6\u5e93 (#![no_std))\nrustc --target=arm-unknown-linux-gnueabihf hello .rs\n\ncargo build --target=arm - unknown - linux - gnueabihf\n\n# \u7b2c\u4e09\u65b9\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177 xargo\n")),(0,l.kt)("p",null,"\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6307\u5b9a\u94fe\u63a5\u5668: vim ~/ . cargo/config"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-t"},"[target . arm- unknown-linux-gnueabihf]\nlinker = \u201darm-linux-gnueabihf-gcc-4.8\u201d\n")),(0,l.kt)("h2",{id:"63-ffi-\u5916\u90e8\u51fd\u6570\u63a5\u53e3"},"6.3. ffi \u5916\u90e8\u51fd\u6570\u63a5\u53e3"),(0,l.kt)("h3",{id:"631-ffi-\u57fa\u672c\u4ecb\u7ecd"},"6.3.1. ffi \u57fa\u672c\u4ecb\u7ecd"),(0,l.kt)("p",null,"Java\u8bed\u8a00\u5219\u5c06FFI\u79f0\u4e3aJNI CJavaNativeInterface)"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.cnblogs.com/Jackeyzhe/p/12623689.html"},"https://www.cnblogs.com/Jackeyzhe/p/12623689.html")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://rustcc.cn/article?id=3b8241d0-c4ca-4f49-8e07-0a5142b00f59"},"https://rustcc.cn/article?id=3b8241d0-c4ca-4f49-8e07-0a5142b00f59")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'///\u5916\u90e8\u8bed\u8a00\u51fd\u6570\u63a5\u53e3\n/// \n/// Rust \u63d0\u4f9b\u4e86\u5230 C \u8bed\u8a00\u5e93\u7684\u5916\u90e8\u8bed\u8a00\u51fd\u6570\u63a5\u53e3\uff08Foreign Function Interface\uff0cFFI\uff09\u3002\n/// \u5916 \u90e8\u8bed\u8a00\u51fd\u6570\u5fc5\u987b\u5728\u4e00\u4e2a extern \u4ee3\u7801\u5757\u4e2d\u58f0\u660e\uff0c\u4e14\u8be5\u4ee3\u7801\u5757\u8981\u5e26\u6709\u4e00\u4e2a\u5305\u542b\u5e93\u540d\u79f0 \u7684 #[link] \u5c5e\u6027\n/// \n// \u652f\u6301\u56db\u79cd\u5e93:\n// - dylib , rust\u52a8\u6001\u5e93\n// - rlib, rust \u9759\u6001\u5e93\n// - cdylib, \u5176\u4ed6\u8bed\u8a00\u5199\u7684\u52a8\u6001\u5e93\n// - staticlib , \u5176\u4ed6\u8bed\u8a00\u9759\u6001\u5e93\n// \n// \n\n// \u5982\u4f55\u7f16\u8bd1\u4e3a\u5e93\n// \n// flag \u53c2\u6570\n// (crate type \u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a, #[crate_type = "bin"] \u8fd9\u79cd\u4f7f\u7528\u5f62\u5f0f\u9700\u8981\u6807\u6ce8\u5728 lib.rs or main.rs \u5f00\u5934)\n// \n// --crate-type=bin or #[crate_type = "bin"] \u8868\u793a\u5c06\u751f\u6210-\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 \u3002\u8981\u6c42\u7a0b\u5e8f\u4e2d\u5fc5 \u987b\u5305\u542b\u4e00\u4e2a main \u51fd\u6570\n// --crate-type=lib or #[crate_type = "lib"] \u8868\u793a\u5c06\u751f\u6210\u4e00\u4e2a Rust\u5e93\u3002 \u5177\u4f53\u751f\u6210\u4ec0\u4e48\u7c7b\u578b\u5e93\uff0c\u7531\u7f16\u8bd1\u5668\u81ea\u884c\u51b3\u5b9a\u3002\u9ed8\u8ba4\u4f1a\u4ea7\u751f rlib\u9759\u6001 \u5e93\n//--crate-type=rlib or #[crate_type = "rlib"] \u9759\u6001 Rust\u5e93\uff0c\u7531Rust\u7f16\u8bd1\u5668\u6765\u4f7f \u7528\u3002\n//--crate-type=dylib or #[crate_type = "dylib"] \u52a8\u6001 Rust\u5e93,\u7531 Rust \u7f16\u8bd1\u5668\u6765\u4f7f\u7528(\u5728 Linux\u4e0a\u4f1a\u521b\u5efa*.so\u6587\u4ef6\uff0c\u5728 MacOSX\u4e0a\u4f1a\u521b\u5efa.dylib\u6587\u4ef6\uff0c \u5728 Windows\u4e0a\u4f1a\u521b\u5efa.dll\u6587\u4ef6)\n// --crate-type=staticlib or #[crate_type = "staticlib"] \u751f\u6210\u9759\u6001\u7cfb\u7edf\u5e93 \u3002 Rust \u7f16\u8bd1\u5668 \u6c38\u8fdc\u4e0d\u4f1a\u94fe\u63a5\u8be5\u7c7b\u578b\u5e93\uff0c\u4e3b\u8981\u7528\u4e8e\u548c C \u8bed\u8a00\u8fdb\u884c\u94fe\u63a5 \uff0c\u8fbe\u6210\u548c\u5176\u4ed6\u8bed \u8a00\u4ea4\u4e92 \u7684\u76ee\u7684 \u3002 \u9759\u6001\u7cfb\u7edf\u5e93\u5728 Linux\u548c MacOSX\u4e0a\u4f1a\u521b\u5efa.a\u6587\u4ef6\uff0c\u5728 Windows\u4e0a\u4f1a\u521b\u5efa*.lib\u6587\u4ef6\n//--crate-type=cdylib or #[crate_type = "cdylib"] \u751f\u6210\u52a8\u6001\u7cfb\u7edf\u5e93\u3002\u540c\u6837 \u7528 \u4e8e\u751f\u6210 C \u63a5\u53e3\uff0c \u548c\u5176\u4ed6\u8bed\u8a00\u4ea4\u4e92\u3002\u8be5\u7c7b\u578b\u5728 Linux\u4e0a\u4f1a\u521b\u5efa.so\u6587\u4ef6 \uff0c\u5728 MacOSX\u4e0a\u4f1a\u521b\u5efa.dylib , \u5728 Windows\u4e0a\u4f1a\u521b\u5efa.dll\u6587\u4ef6\n\n\n')),(0,l.kt)("h3",{id:"632-\u548c-elixir-\u4ea4\u4e92"},"6.3.2. \u548c elixir \u4ea4\u4e92"),(0,l.kt)("p",null,"rustler"),(0,l.kt)("h3",{id:"633-\u548cc-cpp-\u4ea4\u4e92"},"6.3.3. \u548cc cpp \u4ea4\u4e92"),(0,l.kt)("p",null,"Cbindgen"),(0,l.kt)("p",null,"autocxx -> c++"),(0,l.kt)("h4",{id:"6331-\u5728-rust-\u4e2d\u8c03\u7528-c-\u51fd\u6570"},"6.3.3.1. \u5728 rust \u4e2d\u8c03\u7528 C \u51fd\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u5728 Rust \u4e2d\u8c03\u7528 C \u51fd\u6570\n// \n// \u8fd9\u91cc\u6307\u5b9a\u4f7f\u7528 C-ABI\uff0c\u7b49\u4ef7\u4e8e \u201cextern fn foo () \u201d\u8fd9\u6837\u7684\u51fd\u6570\u58f0\u660e; \u6b64\u5916\u8fd8\u6709 extern "Rust\u201d\uff0c \u8fd9\u662f\u9ed8\u8ba4\u7684 ABI\uff0c\u4efb\u4f55\u666e\u901a \u7684\u51fd\u6570\u90fd\u5c06\u4f7f \u7528 \u8be5 ABI\nextern "C" {//\u4e5f\u53ef\u4ee5 \u76f4\u63a5\u4f7f\u7528 extern \u5757\uff0c\u800c\u7701\u7565\u6389ABI\u5b57\u7b26\u4e32\xb0C\u201d \u3002\u56e0\u4e3a\u9ed8\u8ba4\u7684extern\u5757\u5c31\u662f\u6309C-ABI\u5904\u7406\u7684\n    // \u5b9a\u4e49\u4e86 C \u6807\u51c6\u5e93\u5185\u7f6e\u7684 isalnum \u51fd\u6570\u7b7e\u540d, \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e86\n    fn isalnum(input: i32) -> i32;\n}\nfn main() {\n    unsafe {\n        println!("Is 3 a number ?  the answer is : {}", isalnum(3));\n        // error, \u53c2\u6570\u7c7b\u578b\u9519\u8bef\n        println!("Is \'a\' a number ? ", isalnum(\'a\'));\n    }\n}\n\n\n')),(0,l.kt)("h4",{id:"6332-\u5728-rust\u8c03\u7528-cpp"},"6.3.3.2. \u5728 rust\u8c03\u7528 cpp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n// \u8c03\u7528 cpp c++\n// \n// \n\n\n\n\n    // \u5355\u7cbe\u5ea6\u590d\u6570\u7684\u6700\u7b80\u5b9e\u73b0\n    #[repr(C)]\n    #[derive(Clone, Copy)]\n    struct Complex {\n        re: f32,\n        im: f32,\n    }\n    impl fmt::Debug for Complex {\n        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n            if self.im < 0. {\n                write!(f, "{}-{}i", self.re, -self.im)\n            } else {\n                write!(f, "{}+{}i", self.re, self.im)\n            }\n        }\n    }\n    // \u8fd9\u4e2a extern \u4ee3\u7801\u5757\u94fe\u63a5\u5230 libm \u5e93\n    #[link(name = "m")]\n    extern {\n        // \u8fd9\u4e2a\u5916\u90e8\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u5355\u7cbe\u5ea6\u590d\u6570\u7684\u5e73\u65b9\u6839\n        fn csqrtf(z: Complex) -> Complex;\n\n        // \u8fd9\u4e2a\u7528\u6765\u8ba1\u7b97\u5355\u7cbe\u5ea6\u590d\u6570\u7684\u590d\u53d8\u4f59\u5f26\n        fn ccosf(z: Complex) -> Complex;\n    }\n    // \u7531\u4e8e\u8c03\u7528\u5176\u4ed6\u8bed\u8a00\u7684\u51fd\u6570\u88ab\u8ba4\u4e3a\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u7ed9\u5b83\u4eec\u5199\u4e00\u5c42\u5b89\u5168\u7684\u5c01\u88c5\n    fn cos(z: Complex) -> Complex {\n        unsafe { ccosf(z) }\n    }\n\n    // z = -1 + 0i\n    let z = Complex { re: -1., im: 0. };\n    // \u8c03\u7528\u5916\u90e8\u8bed\u8a00\u51fd\u6570\u662f\u4e0d\u5b89\u5168\u64cd\u4f5c\n    let z_sqrt = unsafe { csqrtf(z) };\n    println!("the square root of {:?} is {:?}", z, z_sqrt);\n    // \u8c03\u7528\u4e0d\u5b89\u5168\u64cd\u4f5c\u7684\u5b89\u5168\u7684 API \u5c01\u88c5\n    println!("cos({:?}) = {:?}", z, cos(z));\n\n')),(0,l.kt)("h4",{id:"6333-\u5728-c-\u4e2d\u8c03\u7528-rust"},"6.3.3.3. \u5728 c \u4e2d\u8c03\u7528 rust"),(0,l.kt)("h3",{id:"634-\u548c-python-\u4ea4\u4e92"},"6.3.4. \u548c Python \u4ea4\u4e92"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/PyO3/pyo3"},"https://github.com/PyO3/pyo3"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://saidvandeklundert.net/learn/2021-11-18-calling-rust-from-python-using-pyo3/"},"https://saidvandeklundert.net/learn/2021-11-18-calling-rust-from-python-using-pyo3/"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/148144823"},"https://zhuanlan.zhihu.com/p/148144823")),(0,l.kt)("h3",{id:"635-\u548c-swift"},"6.3.5. \u548c Swift"),(0,l.kt)("p",null,"cbingen"),(0,l.kt)("h3",{id:"636-\u548c-js-javascript-nodejs-\u4ea4\u4e92"},"6.3.6. \u548c js JavaScript nodejs \u4ea4\u4e92"),(0,l.kt)("p",null,"neon -> \u548c node \u4ea4\u4e92"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/napi-rs/napi-rs"},"https://github.com/napi-rs/napi-rs")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://rustwasm.github.io/"},"https://rustwasm.github.io/")," webassembly"),(0,l.kt)("h3",{id:"637-\u548c-java-\u4ea4\u4e92"},"6.3.7. \u548c java \u4ea4\u4e92"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/jni-rs/jni-rs"},"https://github.com/jni-rs/jni-rs"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/astonbitecode/j4rs"},"https://github.com/astonbitecode/j4rs")),(0,l.kt)("p",null,"flapigen-rs, robusta"),(0,l.kt)("h4",{id:"6371-java-\u8c03\u7528-rust"},"6.3.7.1. java \u8c03\u7528 rust"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/drrb/java-rust-example"},"https://github.com/drrb/java-rust-example")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/jnr/jnr-ffi"},"https://github.com/jnr/jnr-ffi")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/drrb/java-rust-example"},"https://github.com/drrb/java-rust-example"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/30258427/calling-rust-from-java"},"https://stackoverflow.com/questions/30258427/calling-rust-from-java")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://blog.csdn.net/abcamus/article/details/81017325"},"https://blog.csdn.net/abcamus/article/details/81017325")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://rustcc.cn/article?id=98b96e69-7a5f-4bba-a38e-35bdd7a0a7dd"},"https://rustcc.cn/article?id=98b96e69-7a5f-4bba-a38e-35bdd7a0a7dd")," \u5404\u79cd\u5e93\u533a\u522b"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://rustcc.cn/article?id=f371a5f1-08fa-4ab8-99a4-21d307223f82"},"https://rustcc.cn/article?id=f371a5f1-08fa-4ab8-99a4-21d307223f82")," rust \u5bfc\u51fa\u5171\u4eab\u5e93"),(0,l.kt)("h4",{id:"6372-rust-\u8c03\u7528-java"},"6.3.7.2. rust \u8c03\u7528 java"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/benanders/rjni"},"https://github.com/benanders/rjni")," "),(0,l.kt)("h1",{id:"7-\u5185\u5b58\u7ba1\u7406"},"7. \u5185\u5b58\u7ba1\u7406"),(0,l.kt)("h2",{id:"71-\u5806-\u548c-\u6808"},"7.1. \u5806 \u548c \u6808"),(0,l.kt)("p",null,"\u624b\u52a8\u7ba1\u7406\u5185\u5b58 -> bug (\u5185\u5b58\u6cc4\u6f0f, \u5782\u60ac\u6307\u9488)"),(0,l.kt)("p",null,'gc -> \u6027\u80fd\u95ee\u9898(stop the world, \u56e0\u4e3aGC \u5728\u5de5\u4f5c\u7684 \u65f6\u5019\u5fc5\u987b\u4fdd\u8bc1\u7a0b\u5e8f\u4e0d\u4f1a\u5f15\u5165\u65b0\u7684\u201c\u5783\u573e", \u6240\u4ee5\u8981\u4f7f\u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f\u6682\u505c)'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u865a\u62df\u5185\u5b58\u7ba1\u7406\u6280\u672f: \u5bf9\u7269\u7406\u5b58\u50a8\u8bbe\u5907\u7684\u62bd\u8c61, \u65b9\u4fbf\u540c\u65f6\u8fd0\u884c \u591a\u9053\u7a0b\u5e8f \uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u5404\u81ea\u72ec\u7acb\u7684\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u865a\u62df\u5730\u5740\u7a7a\u95f4: (\u7528\u6237\u6240\u63a5\u89e6\u5230\u7684\u5730\u5740\u90fd\u662f\u865a\u62df\u5730\u5740\uff0c\u800c\u4e0d\u662f\u771f\u5b9e \u7684\u7269\u7406\u5730\u5740)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u662f\u7ebf\u6027\u7a7a\u95f4, \u5206\u4e3a \u7528\u6237\u7a7a \u95f4\u548c\u5185\u6838\u7a7a\u95f4 (\u5b83\u4eec\u7684\u6bd4\u4f8b\u662f 3:1 (Linux\u7cfb\u7edf\u4e2d)\u6216 2:2 (Windows\u7cfb\u7edf\u4e2d))"),(0,l.kt)("p",{parentName:"li"},"  32 \u4f4d\u8ba1\u7b97\u673aLinux\u7684\u5730\u5740\u7a7a\u95f4\u5927\u5c0f\u662f 4GB")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u597d\u5904:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u7528\u6237\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u6bd4\u7269\u7406\u5185\u5b58\u66f4\u5927\u7684\u5730\u5740\u7a7a\u95f4")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u4fdd\u62a4\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8ba9\u8fdb\u7a0b\u5728\u5404\u81ea\u7684\u5730\u5740\u7a7a\u95f4\u5185\u64cd\u4f5c\u5185\u5b58")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u7528\u6237\u7a7a\u95f4\u4e2d\u7684 \u6808 (stack), \u5806 (heap)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u6808 (\u5806\u6808): \u7528 \u4e8e\u652f\u6301 CPU \u5165\u6808\u6216\u51fa\u6808\u7684\u6307\u4ee4\u64cd\u4f5c, \u5982\u51fd\u6570\u5d4c\u5957\u8c03\u7528\u65f6\u9700\u8981\u5b58\u50a8\u65b9\u6cd5\u6808\u5e27"),(0,l.kt)("p",{parentName:"li"},"  stack \u5185\u5b58\u4e2d\u4fdd\u5b58\u7684\u6570\u636e\uff0c\u751f\u547d\u5468\u671f\u90fd\u6bd4\u8f83\u77ed\uff0c\u4f1a\u968f\u7740\u51fd\u6570\u8c03\u7528\u7684\u5b8c\u6210\u800c\u6d88\u4ea1, "),(0,l.kt)("p",{parentName:"li"},"  \u5bf9\u4e8e\u57fa\u672c\u539f\u751f\u6570\u636e\u7c7b\u578b\u6765\u8bf4\uff0c Rust \u662f\u9ed8\u8ba4\u5c06\u5176\u5206\u914d\u5230\u6808\u4e2d\u7684"),(0,l.kt)("p",{parentName:"li"},"  \u7ed3\u6784\u4f53\u6216\u679a\u4e3e, \u8054\u5408\u4f53\u53ea\u662f\u5b9a\u4e49\uff0c\u770b\u5b83\u4eec\u88ab\u5206\u914d\u5728\u54ea \uff0c\u4e3b\u8981\u662f\u770b\u5176\u7c7b\u578b\u5b9e\u4f8b\u5982 \u4f55\u4f7f\u7528")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u5806: \u4e00\u5757\u5de8\u5927\u7684\u5185\u5b58\u7a7a\u95f4, \u957f\u4e45\u5730\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\u7684\u6570\u636e\uff0c\u4ee5\u4fbf\u8de8\u51fd\u6570\u4f7f\u7528;\u7a0b\u5e8f\u4e0d\u53ef\u4ee5\u4e3b\u52a8\u7533\u8bf7\u6854 \u5185\u5b58\uff0c\u4f46\u53ef\u4ee5\u4e3b\u52a8\u7533\u8bf7\u5806\u5185\u5b58")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u5806\u5206\u914d\u7b97\u6cd5: \u7a7a\u95f2\u94fe\u8868 (Free List)\u548c\u4f4d\u56fe\u6807\u8bb0 (Bitmap)\u3002"),(0,l.kt)("p",{parentName:"li"},"  \u7a7a\u95f2\u94fe\u8868\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u5806\u4e2d\u7a7a\u95f2\u7684\u5185\u5b58\u5730\u5740\u8bb0\u5f55\u4e3a\u94fe\u8868 \uff0c \u5f53\u7cfb\u7edf\u6536\u5230\u7a0b\u5e8f\u7533\u8bf7\u65f6\uff0c\u4f1a\u904d \u5386\u8be5\u94fe\u8868:\u5f53\u627e\u5230\u9002\u5408\u7684\u7a7a\u95f4\u5806\u8282\u70b9 \u65f6\uff0c \u4f1a\u5c06\u6b64\u8282\u70b9\u4ece\u94fe\u8868\u4e2d\u5220\u9664;\u5f53\u7a7a\u95f4\u88ab\u56de\u6536\u4ee5\u540e \uff0c \u518d \u5c06\u5176\u52a0\u5230\u7a7a\u95f2\u94fe\u8868\u4e2d\u3002\u7a7a\u95f2\u94fe\u8868\u7684\u4f18\u52bf\u662f\u5b9e\u73b0\u7b80\u5355\uff0c\u4f46\u5982\u679c\u94fe\u8868\u906d\u5230\u7834\u574f \uff0c \u6574\u4e2a\u5806\u5c31\u65e0\u6cd5\u6b63 \u5e38\u5de5\u4f5c\u3002"),(0,l.kt)("p",{parentName:"li"},"  \u4f4d\u56fe\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5c06\u6574\u4e2a\u5806\u5212\u5206\u4e3a\u5927\u91cf\u5927\u5c0f\u76f8\u7b49\u7684\u5757\u3002 \u5f53\u7a0b\u5e8f\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u603b\u662f\u5206\u914d\u6574 \u6570\u4e2a\u5757\u7684\u7a7a\u95f4\u3002\u6bcf\u5757\u5185\u5b58\u90fd\u7528\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\u6765\u8868\u793a\u5176\u72b6\u6001\uff0c\u5982\u679c\u8be5\u5185\u5b58\u88ab\u5360\u7528 \uff0c\u5219\u76f8\u5e94\u4f4d\u56fe \u4e2d\u7684\u4f4d\u7f6e\u7f6e\u4e3a 1;\u5982\u679c\u8be5\u5185\u5b58\u7a7a\u95f2\uff0c\u5219\u76f8\u5e94\u4f4d\u56fe\u4e2d\u7684\u4f4d\u7f6e\u7f6e\u4e3a 0\u3002\u4f4d\u56fe\u7684\u4f18\u52bf\u662f\u901f\u5ea6\u5feb\uff0c\u5982 \u679c\u5355\u4e2a\u5185\u5b58\u5757\u6570\u636e\u906d\u5230\u7834\u574f\uff0c \u4e5f\u4e0d\u4f1a\u5f71\u54cd\u6574\u4e2a\u5806\uff0c\u4f46\u7f3a\u70b9\u662f\u5bb9\u6613\u4ea7\u751f\u5185\u5b58\u788e\u7247")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u5185\u5b58\u91ca\u653e: \u5206\u914d\u7684\u90fd\u662f\u865a\u62df\u5730\u5740\u7a7a \u95f4 \u3002 \u6240\u4ee5\u5f53\u5806\u7a7a\u95f4\u88ab\u91ca\u653e\u65f6\uff0c\u5e76\u4e0d\u4ee3\u8868\u6307\u7269\u7406 \u7a7a \u95f4\u4e5f \u9a6c\u4e0a\u88ab\u91ca\u653e, \u53ea\u662f\u5185\u5b58\u88ab\u5f52\u8fd8\u7ed9\u4e86\u5185\u5b58\u5206\u914d\u5668\u3002 \u5185\u5b58\u5206\u914d \u5668\u4f1a\u5bf9\u7a7a\u95f2\u7684 \u5185\u5b58\u8fdb\u884c\u7edf\u4e00 \u201c\u6574\u7406\u201d, \u5728\u9002\u5408( \u6bd4\u5982\u7a7a\u95f2\u5185\u5b58\u8fbe\u5230 2048KB)\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u628a \u5185\u5b58\u5f52\u8fd8\u7ed9\u7cfb\u7edf \uff0c\u4e5f\u5c31\u662f\u6307\u91ca\u653e\u7269\u7406\u7a7a \u95f4"),(0,l.kt)("p",{parentName:"li"},"  Rust \u7f16\u8bd1\u5668\u76ee\u524d\u81ea\u5e26\u4e24\u4e2a\u9ed8\u8ba4\u5206\u914d \u5668: alloc_system \u548c alloc_jemalloc, Rust 2018 \u7248\u672c \u4e0b\uff0c \u9ed8\u8ba4\u4f7f\u7528 alloc_system, \u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a"))))),(0,l.kt)("h2",{id:"72-\u5185\u5b58\u5bf9\u9f50"},"7.2. \u5185\u5b58\u5bf9\u9f50"),(0,l.kt)("p",null,"\u5185\u5b58\u5bf9\u9f50, \u5373\u5b57\u8282\u5bf9\u9f50, \u51cf\u5c11 cpu \u8bfb\u53d6\u5185\u5b58\u6b21\u6570"),(0,l.kt)("p",null,"CPU\u5728\u5355\u4f4d\u65f6\u95f4/\u4e00\u6b21\u8ba1\u7b97\u80fd\u5904\u7406\u7684\u4f4d\u6570 -> \u5b57\u957f, 32\u4f4dCPU\uff0c \u5176\u5b57\u957f\u4e3a32\u4f4d\uff0c\u4e5f\u5c31\u662f\u4e00\u6b21\u8bfb\u53d64\u4e2a\u5b57\u8282, \u6240\u4ee5\u6bcf\u6b21\u53ea\u80fd\u5bf9 4 \u7684 \u500d\u6570\u7684 \u5730\u5740 \u8fdb\u884c\u8bfb\u53d6"),(0,l.kt)("p",null,"\u73b0\u6709\u4e00\u6574\u6570\u7c7b\u578b\u7684\u6570\u636e\uff0c\u9996\u5730\u5740\u5e76\u4e0d\u662f 4 \u7684\u500d\u6570\uff0c\u4e0d\u59a8\u8bbe\u4e3a Ox3, \u5b58\u50a8\u5728 \u5730\u5740\u8303\u56f4\u662f Ox3~Ox7 \u7684\u5b58\u50a8\u7a7a\u95f4, cpu \u9700\u8981\u5206\u522b\u5728 Ox1 \u548c Ox5 \u5904\u8fdb\u884c\u4e24\u6b21\u8bfb\u53d6, \u91c7\u53d6\u5185\u5b58\u5bf9\u9f50\u7b56\u7565\u540e, \u6570\u636e\u7684\u9996\u5730\u5740\u53d8\u4e3a 0x5, CPU\u53ea\u9700\u8981\u8bfb\u53d6\u4e00\u6b21\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u5bf9\u5e94\u5230\u4ee3\u7801\u5c42\u9762:\nstruct A {\n    a: u8,// 1byte\n    b: u32,// 4byte\n    c: u16,  // 2 byte\n}\nprintln!("{:?}", std :: mem::size o f : : < A > ( );// 8 , \u5355\u4f4d \u5b57\u8282\n\n// \u5206\u6790:\n// \u603b\u5171\u662f 7, \u4e3a\u4ec0\u4e48\u6253\u5370 8 ?\n// \u56e0\u4e3a\u5b58\u5728\u5185\u5b58\u5bf9\u9f50\u7b56\u7565\n// \n// \u5185\u5b58\u5bf9\u9f50\u5305\u62ec\u57fa\u672c\u6570\u636e\u5bf9\u9f50\u548c\u7ed3\u6784\u4f53(\u6216\u8054\u5408\u4f53)\u6570\u636e\u5bf9\u9f50\n// \u5bf9\u4e8e\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u9ed8\u8ba4 \u5bf9\u9f50\u65b9\u5f0f\u662f\u6309\u5176\u5927\u5c0f\u8fdb\u884c\u5bf9\u9f50\uff0c\u4e5f\u88ab\u79f0\u4f5c\u81ea\u7136\u5bf9\u9f50\u3002 \u6bd4\u5982Rust\u4e2du32\u7c7b\u578b\u53604\u5b57\u8282\uff0c\u5219\u5b83\u9ed8 \u8ba4\u5bf9\u9f50\u65b9\u5f0f\u4e3a 4 \u5b57\u8282\u5bf9\u9f50\n')),(0,l.kt)("h2",{id:"73-\u624b\u52a8\u5806\u5185\u5b58\u5206\u914d"},"7.3. \u624b\u52a8\u5806\u5185\u5b58\u5206\u914d"),(0,l.kt)("p",null,"\u5728\u7f16\u5199 Unsafe Rust\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u9700\u8981\u624b\u52a8\u8fdb\u884c\u5806\u5185\u5b58\u5206\u914d\uff0c\u6240\u4ee5 Rust\u6807\u51c6\u5e93 std::alloc \u6a21\u5757\u4e2d\u4e5f\u63d0\u4f9b \u4e86\u5806\u5185\u5b58 \u5206\u914d\u7684 \u76f8 \u5173 API"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// Rust 1.28\u4e4b\u524d\u9ed8\u8ba4\u5168\u5c40\u5185\u5b58\u5206\u914d\u5668\uff1ajemalloc\n// Rust 1.28\u5185\u5b58\u5206\u914d\u5668 : System\uff0c\u540c\u65f6\u4f1a\u63d0\u4f9b\u5176\u4ed6\u5168\u5c40\u5206\u914d\u5668\uff0c\u53ef\u81ea\u5b9a\u4e49\n// \nuse std::alloc::{GlobalAlloc, System, Layout};\nstruct MyAllocator;// \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528GlobalAlloc, \u8fd9\u91cc\u662f\u505a\u4e86\u4e00\u4e2a\u5305\u88c5\nunsafe impl GlobalAlloc for MyAllocator {\n    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n        System.alloc(layout)\n    }\n    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n        System.dealloc(ptr, layout)\n    }\n}\n// \u58f0\u660e\u4e3a\u5168\u5c40\u5206\u914d\u5668\n#[global_allocator]\nstatic GLOBAL: MyAllocator = MyAllocator;\nfn main() {\n   // \u6b64\u5904Vec\u7684\u5185\u5b58\u4f1a\u7531GLOBAL\u5168\u5c40\u5206\u914d\u5668\u6765\u5206\u914d\n   let mut v = Vec::new();\n   v.push(1);\n}\n\n\n// \u6307\u5b9a\u5168\u5c40\u5206\u914d\u5668\u4e3ajemalloc\n// \nextern crate jemallocator;\nuse jemallacator::Jemalloc;\n#[global_allocator]\nstatic GLOBAL: Jemalloc = Jemalloc;\n\n")),(0,l.kt)("h1",{id:"8-\u5de5\u7a0b\u7ba1\u7406-\u6a21\u5757"},"8. \u5de5\u7a0b\u7ba1\u7406 \u6a21\u5757"),(0,l.kt)("h2",{id:"81-\u6982\u5ff5\u7b80\u5355\u89e3\u91ca"},"8.1. \u6982\u5ff5\u7b80\u5355\u89e3\u91ca"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.jianshu.com/p/51693602114a"},"https://www.jianshu.com/p/51693602114a"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/73544030"},"https://zhuanlan.zhihu.com/p/73544030"),"\nor\n",(0,l.kt)("a",{parentName:"p",href:"https://privaterookie.github.io/2019-07-14-Rust%E6%A8%A1%E5%9D%97%E4%B8%8E%E6%96%87%E4%BB%B6/"},"https://privaterookie.github.io/2019-07-14-Rust%E6%A8%A1%E5%9D%97%E4%B8%8E%E6%96%87%E4%BB%B6/")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'/// - \u7bb1\uff08Crate\uff09: \u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6587\u4ef6or \u5e93\u6587\u4ef6, \u4f4d\u4e8e\u5305\u4e2d\n/// \n/// - \u5305\uff08Package\uff09: cargo new xxx \u65b0\u5efa\u7684 \u5c31\u662f \u5305; \u5305\u5fc5\u987b\u7531\u4e00\u4e2a Cargo.toml \u6587\u4ef6\u6765\u7ba1\u7406\uff0c\u8be5\u6587\u4ef6\u63cf\u8ff0\u4e86\u5305\u7684\u57fa\u672c\u4fe1\u606f\u4ee5\u53ca\u4f9d\u8d56\u9879\u3002\n///\n///    \u4e00\u4e2a package \u6700\u5c11\u6709\u4e00\u4e2a crate\n///\n///    \u5f53\u4f7f\u7528 cargo new \u547d\u4ee4\u521b\u5efa\u5b8c\u5305\u4e4b\u540e\uff0csrc \u76ee\u5f55\u4e0b\u4f1a\u751f\u6210\u4e00\u4e2a main.rs \u6e90\u6587\u4ef6\uff0cCargo \u9ed8\u8ba4\u8fd9\u4e2a\u6587\u4ef6\u4e3a\u4e8c\u8fdb\u5236\u7bb1\u7684\u6839\uff0c\u7f16\u8bd1\u4e4b\u540e\u7684\u4e8c\u8fdb\u5236\u7bb1\u5c06\u4e0e\u5305\u540d\u76f8\u540c\u3002\n///\n/// - \u6a21\u5757\uff08Module\uff09: \u4f7f\u7528 mod \u58f0\u660e\u4e00\u4e2a\u6a21\u5757, \u4e00\u4e2a\u6587\u4ef6\u9ed8\u8ba4\u5c31\u662f\u4e00\u4e2a module, \u6587\u4ef6\u540d\u5c31\u662f module name\n// \n//      \u6bcf\u4e2a\u5305\u90fd\u62e5\u6709\u4e00\u4e2a\u9876\u7ea7 (top level) \u6a21\u5757 src/lib.rs \u6216 src/main.rs\u3002\n/// \n///     \u6bcf\u4e2a rust \u6587\u4ef6\u90fd\u662f\u4e00\u4e2a module, \u6bd4\u5982: \n//      (\u82e5\u60f3\u5728\u540c\u4e2a\u6587\u4ef6\u5b9a\u4e49\u591a\u4e2a module , \u53ea\u9700 mod xx_module {...} mod yy_module {...})\n///     ```\n///     // main.rs\n///     mod second_module; // \u58f0\u660e\u4e00\u4e2a\u6a21\u5757\n///     fn main() {\n///         println!("This is the main module.");\n///         println!("{}", second_module::message());\n///     }\n///     // second_module.rs, \u6a21\u5757\u540d\u5c31\u662f\u6587\u4ef6\u540d\n///     pub fn message() -> String {\n///         String::from("This is the 2nd module.")\n///     }\n///     ```\n// \n//      \u82e5\u5e0c\u671b\u591a\u4e2a \u6587\u4ef6, \u7ec4\u6210\u4e00\u4e2a module,\n//      \u9700\u8981:\n//      \u5408\u5e76\u5230\u4e00\u4e2a\u6587\u4ef6\u5939, \u65b0\u5efa\u4e00\u4e2a mod.rs (2018 \u4e2d\u53ef\u4ee5\u7701\u7565\u4e86), \u7136\u540e\u5728\u5176\u4e2d\u5bfc\u51fa\u5373\u53ef (pub use sub1; pub use sub2;), \u65b0 module name = \u6587\u4ef6\u5939\u540d\n// \n//      \u82e5\u6587\u4ef6\u5939 \u548c\u67d0\u4e2a\u6587\u4ef6 aa.rs \u540c\u540d, \u5219\u6587\u4ef6\u5939\u4e0b\u5b9a\u4e49\u7684 module \u90fd\u662f aa.rs \u7684\u5b50\u6a21\u5757 (2015 \u4e2d\u5219\u4e0d\u5141\u8bb8\u6587\u4ef6\u4e0e\u76ee\u5f55\u540c\u540d)\n// \n// \nfn mod_package_crate() {\n\n    // \u8def\u5f84:\n    // Rust \u4e2d\u7684\u8def\u5f84\u5206\u9694\u7b26\u662f ::\n    \n    //\u7edd\u5bf9\u8def\u5f84\u4ece crate \u5173\u952e\u5b57\u5f00\u59cb\u63cf\u8ff0\u3002\n    // \u76f8\u5bf9\u8def\u5f84\u4ece self \u6216 super \u5173\u952e\u5b57\u6216\u4e00\u4e2a\u6807\u8bc6\u7b26\u5f00\u59cb\u63cf\u8ff0\n\n    // \u5982: \u5bfc\u5165\u5916\u90e8\u4f9d\u8d56\n    use super::{deserial, serial}; //\u5bfc\u5165 parent \u6307\u5b9a\u8d44\u6e90\n    use super::*; // \u5bfc\u5165 parent \u7684\u6240\u6709\n    use crate::codec::{serial, deserial}; // \u7edd\u5bf9\u8def\u5f84, codec \u4e3a\u4f9d\u8d56 (\u4e0d\u8bba\u662f\u81ea\u5b9a\u4e49\u6a21\u5757\u8fd8\u662f\u7b2c\u4e09\u65b9\u4f9d\u8d56, \u82e5\u4e3a\u7b2c\u4e09\u65b9\u6a21\u5757, \u5219 crate \u5173\u952e\u5b57\u53ef\u9009), codec \u4e5f\u80fd\u662f \u540c\u4e2a\u9879\u76ee\u7684\u5176\u4ed6 module (rust \u6587\u4ef6)\n\n//  \u6807\u51c6\u5e93 \u9ed8\u8ba4\u5bfc\u5165\u4e86, \u6240\u4ee5\u4ee5\u4e0b\u4e24\u53e5\u53ef\u9009\n    extern crate std; // \u5bfc\u5165 \u6807\u51c6\u5e93 std crate, \u8fd9\u662f 2015 \u4e2d\u7684\u8bed\u6cd5, 2018 \u4e2d\u53ef\u9009\u4e86, \u53ea\u9700\u8981 cargo.toml \u4e2d\u5bfc\u5165\u5373\u53ef, \u65e0\u9700\u518d\u4ee3\u7801\u4e2d\u663e\u5f0f\u6307\u5b9a\n    use std : :prelude: :vl: :* ; // \u6807\u51c6\u5e93\u7684 prelude module\n\n    // \u5728 module \u5f00\u5934\u58f0\u660e\u4e0d\u9700\u8981 \u6807\u51c6\u5e93, \u4f7f\u7528 \u6838\u5fc3\u5e93(\u5d4c\u5165\u5f0f\u5f00\u53d1\u5fc5\u987b)\n    #[no_std]\n\n\n\n\n    // govern \u51fd\u6570\u7684\u7edd\u5bf9\u8def\u5f84\n    crate::nation::government::govern();\n    // \u76f8\u5bf9\u8def\u5f84\n    nation::government::govern();\n\n\n    //Rust \u4e2d\u6709\u4e24\u79cd\u7b80\u5355\u7684\u8bbf\u95ee\u6743\uff1a\u516c\u5171\uff08pub\uff09\u548c\u79c1\u6709\uff08\u6a21\u5757\u6210\u5458\u9ed8\u8ba4\u90fd\u662f\u79c1\u6709\uff09\u3002\n    // \u79c1\u6709 \u6a21\u5757\u4e2d\u7684\u5143\u7d20\u90fd\u9700\u8981 pub \u4fee\u9970\u624d\u80fd\u5728\u5916\u90e8\u8bbf\u95ee\u5230 , \u4f46\u662f \u679a\u4e3e\u7c7b\u7684\u5b57\u6bb5\u4e0d\u53d7\u8fd9\u4e2a\u9650\u5236\n    //\u5bf9\u4e8e\u79c1\u6709\u7684\u6a21\u5757\uff0c\u53ea\u6709\u5728\u4e0e\u5176\u5e73\u7ea7\u7684\u4f4d\u7f6e\u6216\u4e0b\u7ea7\u7684\u4f4d\u7f6e\u624d\u80fd\u8bbf\u95ee\uff0c\u4e0d\u80fd\u4ece\u5176\u5916\u90e8\u8bbf\u95ee\u3002\n    mod nation {\n        pub mod government {\n            pub fn govern() {println!("govern()")}\n        }\n    \n        mod congress {\n            pub fn legislate() {\n                println!("legislate()");\n            }\n        }\n       \n        pub mod court {\n            pub fn judicial() {\n                print!("judicial - ");\n                super::congress::legislate();\n            }\n        }\n\n        // use \u5173\u952e\u5b57\u53ef\u4ee5\u4e0e pub \u5173\u952e\u5b57\u914d\u5408\u4f7f\u7528\uff1a\n        pub use congress::legislate as le;\n\n    }\n    \n    nation::government::govern();\n    nation::court::judicial();\n\n    // \u5bfc\u5165 and \u7b80\u5316\u8def\u5f84\n    use nation::court::judicial as  ju;\n    // \u73b0\u5728\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\n    ju();\n\n    nation::le();\n}\n\n')),(0,l.kt)("h2",{id:"82-\u53ef\u89c1\u6027\u7ba1\u7406"},"8.2. \u53ef\u89c1\u6027\u7ba1\u7406"),(0,l.kt)("p",null,"pub use T \u5bfc\u51fa\u4e86 T\uff0cT \u53ef\u4ee5\u88ab\u5176\u4ed6 crate \u4f7f\u7528\uff1bpub (crate) use T \u53ea\u628a T \u5bfc\u51fa\u5230\u5f53\u524d\u7684 crate\uff0c\u5176\u4ed6 crate \u8bbf\u95ee\u4e0d\u4e86"),(0,l.kt)("h2",{id:"83-\u7f16\u8bd1\u5668\u7248\u672c\u7ba1\u7406"},"8.3. \u7f16\u8bd1\u5668\u7248\u672c\u7ba1\u7406"),(0,l.kt)("p",null,"\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b, \u653e rust-toolchain \u6587\u4ef6, \u6307\u5b9a\u7f16\u8bd1\u5668\u7248\u672c"),(0,l.kt)("h2",{id:"84-\u4e3a\u9879\u76ee\u5355\u72ec\u6307\u5b9aconfig-\u914d\u7f6e"},"8.4. \u4e3a\u9879\u76ee\u5355\u72ec\u6307\u5b9aconfig \u914d\u7f6e"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cargo \u5168\u5c40\u914d\u7f6e : /.cargo/confg\n\u5f53\u524d\u7528\u6237\u5168\u5c40\u914d\u7f6e: $HOME/.cargo/config\n\u9879\u76ee\u5355\u72ec\u914d\u7f6e:     $proj/.cargo/config (\u5b50\u6a21\u5757\u4ea6\u53ef\u7ee7\u7eed\u6307\u5b9a)\n\n")),(0,l.kt)("h2",{id:"85-\u4f9d\u8d56\u7ba1\u7406-cargo"},"8.5. \u4f9d\u8d56\u7ba1\u7406 cargo"),(0,l.kt)("h3",{id:"851-cargo-\u57fa\u672c\u547d\u4ee4"},"8.5.1. cargo \u57fa\u672c\u547d\u4ee4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'# \u65b0\u5efa\u53ef\u6267\u884c\u7a0b\u5e8f, \u9ed8\u8ba4\u662f --bin\n# \u751f\u6210 main.rs \u542f\u52a8\u7c7b\ncargo new [--bin] <proj>\n\n# \u4e0d\u521d\u59cb\u5316 git\ncargo new <proj> --vcs none\n\n# \u65b0\u5efa\u5e93, \u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\n# \u751f\u6210 \u7684\u5e93\u4e0b, \u6709 src, toml, lib_name.rs (\u5e26\u6709\u57fa\u672c\u7684\u6d4b\u8bd5)\ncargo new --lib <lib name>\n\n\n# \u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u65b0\u5efa\u9879\u76ee\ncargo init [--bin]\ncargo init --lib\n\n\n\n\n# \u6784\u5efa, \u66f4\u65b0\u4f9d\u8d56, \u4f9d\u8d56\u5728\u8fd9\u91cc\u627e https://crates.io/\n# \u9ed8\u8ba4\u662f\u4ee5 debug \u65b9\u5f0f\u7f16\u8bd1, \u7f16\u8bd1\u901f\u5ea6\u5feb, \u4f46\u662f\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u672a\u4f18\u5316\n# build \u540e\u4f1a\u751f\u6210 Cargo.lock\n#  ./target/debug/project_name \u4e2d\u627e\u5230\u7f16\u8bd1\u540e\u7684 \u53ef\u6267\u884c\u6587\u4ef6(exe) \u8fd0\u884c\ncargo build \n\n# \u4f7f\u7528 --release \u53c2\u6570\u7f16\u8bd1\u6700\u7ec8\u53d1\u5e03\u7248\u672c\u3002\n# \u7f16\u8bd1\u5668\u4f1a\u5bf9\u4ee3\u7801\u8fdb\u884c\u4f18\u5316\uff0c \u4f7f\u5f97\u7f16\u8bd1\u65f6\u95f4\u53d8\u6162\uff0c \u4f46\u662f\u4ee3\u7801\u8fd0\u884c\u901f\u5ea6\u4f1a\u53d8\u5feb\u3002\ncargo build --release\n\n# \u6307\u5b9a\u6761\u4ef6\u7f16\u8bd1\u5c5e\u6027 (\u53ef\u4ee5\u5728 Cargo.toml \u4e2d\u6307\u5b9a)\n# \u4f1a\u7ed9 rustc \u4f20\u9012 --cfg features="xxx", \u8868\u793a \u4f1a\u7f16\u8bd1 aa_module \u6a21\u5757, \u4e0d\u6307\u5b9a xxx feature \u5219\u4e0d\u4f1a\u7f16\u8bd1 \u8be5\u6a21\u5757\ncargo build --features "xxx"\n# \u5728\u4ee3\u7801\u4e2d\u8fd9\u4e48\u4f7f\u7528\n#   # \u8868\u793a\u82e5\u6ca1\u6709\u6307\u5b9a xxx feature, \u5219\u7f16\u8bd1\u62a5\u9519\n#   #[cfg(not(feature = "xxx"))]\n#   compile_error!("xxx feature is required to build this crate")\n#   \n#   # \u8868\u793a \u53ea\u6709\u6307\u5b9a \u4e86 xxx feature, \u7f16\u8bd1\u65f6\u624d\u4f1a\u5305\u542b aa_module \u8fdb\u53bb\n#   #[cfg(feature = "xxx")]\n#   mod aa_module\n\n\n\ncargo check # \u8fc5\u901f\u68c0\u67e5\u9519\u8bef, \u65f6\u95f4\u77ed\n\n\n\n\ncargo run \n# \u8fd0\u884c example \u6587\u4ef6\u5939\u4e0b\u7684 server.rs \u7684 main()\ncargo run --example server\n# \u8fd0\u884c\u6307\u5b9a\u5b50\u6a21\u5757\ncargo run -p <xxx>\n\n# \u8fd0\u884c\u5f53\u524d\u9879\u76ee(rust_tools)\u4e0b\u7684 bin \u6587\u4ef6\u5939\u4e0b\u7684 chat_server.rs \u53ef\u6267\u884c\u6587\u4ef6\ncargo run --package rust_tools --bin chat_server\n\n\n\n\n# \u4ece\u4e2d\u5fc3\u4ed3\u5e93\u5b89\u88c5\ncargo install <package>\n# \u4ece GitHub \u5b89\u88c5\ncargo install orz --git https://github.com/richox/orz --tag v1.6.1 \n\n\n\n\n\ncargo doc # \u751f\u6210html\u6587\u6863\ncargo doc --open # \u540c\u65f6\u6253\u5f00\u6587\u6863\u9884\u89c8\ncargo doc --target-doc ./ #\u8f93\u51fa\u6587\u6863\u65f6\u6307\u5b9atarget\u76ee\u5f55\n\n\n\n\n\n# # \u6d4b\u8bd5, \n# \u4f1a\u8dd1 #cfg[test] \u4e0b\u7684 #[test]; \u4e5f\u4f1a\u8dd1\u6587\u6863\u6ce8\u91ca (\u5355\u5143\u6d4b\u8bd5)\n# and  tests/ \u4e0b\u7684\u6d4b\u8bd5 (\u96c6\u6210\u6d4b\u8bd5)\ncargo test \ncargo test xxx # \u8fc7\u6ee4, \u8fd0\u884c\u4efb\u4f55\u540d\u5b57\u4e2d\u5305\u542b xxx \u7684\u6d4b\u8bd5\n\n\n\n\ncargo publish # publish a library to crates.io\ncargo --version\n\n\n\n\n# This will write out a new Cargo.lock with the new version information\ncargo update           # updates all dependencies\ncargo update -p rand   # updates just \u201crand\u201d\n\n# \u7b2c\u4e09\u65b9\u63d2\u4ef6\u6269\u5c55:\n\n# \u9700\u8981 rustup component add rustfmt [\u4e00toolchain nightly]\ncargo fmt # \u683c\u5f0f\u5316\u9879\u76ee\u4ee3\u7801, \u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6267\u884c, \u4f1a\u751f\u6210\u5907\u4efd\u6587\u4ef6, .bk\u7ed3\u5c3e, \u8df3\u8fc7\u683c\u5f0f\u5316 #[rustfmt_skip]\ncargo fix # \u81ea\u52a8\u4fee\u590d\u4ee3\u7801\u8b66\u544a\ncargo clippy #\u6355\u6349\u5e38\u89c1\u9519\u8bef\uff0c\u6539\u5584\u4ee3\u7801 (\u9700\u8981\u5b89\u88c5 clippy)\n')),(0,l.kt)("p",null,"\u81ea\u5b9a\u4e49\u683c\u5f0f\u5316:  \u5728\u9879\u76ee\u6839\u76ee\u5f55 rustfmt.tomI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-t"},"max_width = 90 # \u6700\u5927\u5bbd\u5ea6\nfn_call_width = 90 # \u51fd\u6570\u5bbd\u5ea6\nchain_one_line_max = 80 # \u94fe\u5f0f\u8c03\u7528\u6700\u5927\u5bbd\u5ea6\ncondense_wildcard_suffixes = true # \u538b\u7f29\u901a\u914d\u7b26\u524d\u7f00\n")),(0,l.kt)("h3",{id:"852-\u6587\u4ef6\u5e03\u5c40\u7ed3\u6784"},"8.5.2. \u6587\u4ef6\u5e03\u5c40\u7ed3\u6784"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},".\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 benches #\u6027\u80fd\u6d4b\u8bd5\n\u2502\xa0\xa0 \u2514\u2500\u2500 large-input.rs\n\u251c\u2500\u2500 examples    # \u793a\u4f8b\n\u2502\xa0\xa0 \u2514\u2500\u2500 simple.rs\n\u251c\u2500\u2500 src    # \u6e90\u7801\n\u2502\xa0\xa0 \u251c\u2500\u2500 bin # \u5176\u4ed6\u53ef\u6267\u884c\u6587\u4ef6 (\u5982\u679c\u53ef\u6267\u884c\u6587\u4ef6\u5305\u542b\u4e0d\u6b62\u4e00\u4e2a\u6e90\u6587\u4ef6\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528src/bin\u76ee\u5f55\u4e0b\uff0c\u53c8\u4e00\u4e2a\u5305\u542bmain.rs\u6587\u4ef6\u7684\u76ee\u5f55,\u800c\u8be5\u76ee\u5f55\u5c06\u88ab\u89c6\u4e3a\u5177\u6709\u7236\u76ee\u5f55\u540d\u79f0\u7684\u53ef\u6267\u884c\u6587\u4ef6)\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 another_executable.rs\n\u2502\xa0\xa0 \u251c\u2500\u2500 lib.rs  # \u9ed8\u8ba4\u5e93\u6587\u4ef6\n\u2502\xa0\xa0 \u2514\u2500\u2500 main.rs # \u9ed8\u8ba4\u53ef\u6267\u884c\u6587\u4ef6\n\u2514\u2500\u2500 tests   # \u96c6\u6210\u6d4b\u8bd5 , \u5355\u5143\u6d4b\u8bd5\u4e00\u822c\u5c31\u5199\u5728 src \u4e0b\n    \u2514\u2500\u2500 some-integration-tests.rs\n\n\n")),(0,l.kt)("h3",{id:"853-cargotoml"},"8.5.3. Cargo.toml"),(0,l.kt)("p",null,"Cargo.toml \u9879\u76ee\u5143\u4fe1\u606f, \u5305\u62ec\u7248\u672c, \u4f9d\u8d56"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-t"},'[package]\n...\nbuild = "build.rs" # \u6784\u5efa\u811a\u672c, \u76f8\u5bf9\u4e8e\u6839\u76ee\u5f55\nworkspace = ".." # \u8fd9\u662f sub crate \u4e2d\u7684\u914d\u7f6e\nmember = ["", ""] # \u8fd9\u662f parent crate \u4e2d\u7684\u914d\u7f6e\n\n[[bin]]\nname = "run-main" # \u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u540d\u5b57\npath = "src/main.rs" # \u5f53\u60f3\u5728\u4e00\u4e2a\u4f5c\u4e3a\u5e93\u7684\u5305\u91cc\u540c\u65f6\u5305\u542b main.rs , \u9700\u8981\u914d\u7f6e\u8fd9\u4e2a, \u6587\u4ef6\u540d\u5fc5\u987b\u4e3a main.rs, \u82e5\u653e\u5728 src/bin \u4e0b\u5219\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6587\u4ef6\u540d\nbench = false # \u751f\u6210 \u53ef\u6267\u884c\u6587\u4ef6\u65f6\u4e0d\u6267\u884c\u6027\u80fd\u6d4b\u8bd5\n\n\n[[bench]]\nname = "bench"\npath = "src/bench.rs" # \u6027\u80fd\u6d4b\u8bd5\u4ee3\u7801\ntest = false\nbench = true\n\n\n# \u4f9d\u8d56\n#  [dependencies] \u4e13\u95e8\u7528\u4e8e\u8bbe\u7f6e\u7b2c\u4e09\u65b9\u5305\u7684\u4f9d\u8d56\uff0c\u8fd9\u4e9b\u4f9d\u8d56\u4f1a\u5728\u6267\u884c cargo build\u547d\u4ee4\u7f16\u8bd1 \u65f6\u4f7f\u7528\u3002\n[dependencies]\nuuid = "0.0.1" # \u4f1a\u4ece\u4e2d\u5fc3\u4ed3\u5e93\u4e0b\u8f7d\nferris-says = "0.1"\n\n# \u7248\u672c\u53f7\u89c4\u5219\n\n\n[dependencies]\ngfx-hal = { version = "0.1.0", git = "https://github.com/gfx-rs/gfx", rev = "bd7f058efe78d7626a1cc6fbc0c1d3702fb6d2e7" }\n#  \u6216\u8005\u5199\u6210\u591a\u884c (\u4f7f\u7528\u70b9 "." \u8868\u793ajson \u4e2d\u7684\u5d4c\u5957)\n[dependencies.gfx-hal]\ngit = "https://github.com/gfx-rs/gfx"\nversion = "0.1.0" \nrev = "bd7f058efe78d7626a1cc6fbc0c1d3702fb6d2e7"\n\n\n# \u672c\u5730\u9879\u76ee\u5bfc\u5165\n[dependencies]\nhello_utils = { path = "../hello_utils", version = "0.1.0" }\n\n# \u9ed8\u8ba4\u4e0d\u4f1a\u88ab\u7f16\u8bd1, \u4f46\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a \u548c\u4f9d\u8d56\u540d\u79f0\u4e00\u6837\u7684 feature, \u5373 gif, \u5728\u4ee3\u7801\u4e2d\u53ef\u4ee5\u4f7f\u7528 cfg(feature = "gif"), \u7136\u540e\u547d\u4ee4\u884c\u4e2d\u53ef\u4ee5 --features gif \u4f7f\u7528\u6761\u4ef6\u7f16\u8bd1\n# \u5f53\u7136, \u4e5f\u80fd\u8fd9\u6837\u4f7f\u7528: \n    # [dependencies]\n    # ravif = { version = "0.6.3", optional = true }\n    # rgb = { version = "0.8.25", optional = true }\n    # \n    # [features]\n    # avif = ["ravif", "rgb"] (\u65e0\u6cd5\u76f4\u63a5\u4f7f\u7528 raif, \u6216\u8005 rgb)\ngif = { version = "0.11.1", optional = true }\n\n \n# [dev-dependencies]\u8868\u7684\u4f5c\u7528\u7528\u6765\u8bbe\u7f6e\u6d4b\u8bd5( tests)\u3001\u793a\u4f8b (examples)\u548c\u57fa\u51c6\u6d4b\u8bd5( benchmarks)\u65f6\u4f7f\u7528\u7684\u4f9d\u8d56, \u5728\u6267\u884c cargo test \u6216 cargo bench \u547d \u4ee4 \u65f6\u4f7f\u7528 \u3002\n[dev-dependencies]\n\n\n\n# build \u4f9d\u8d56\u5e93\n[build-dependencies]\ncc = "1.0"\n\n# \u6253\u5f00\u6307\u5b9a feature\n[dependencies]\nserde = { version = "1.0.118", features = ["derive"] }\n# \u7981\u7528\u9ed8\u8ba4\u6253\u5f00\u7684 feature\nflate2 = { version = "1.0.3", default-features = false, features = ["zlib"] }\n\n\n\n# \u6761\u4ef6\u7f16\u8bd1\u529f\u80fd (\u9009\u62e9\u6027\u5730\u7f16 \u8bd1 \u4ee3 \u7801)\n# \u901a\u8fc7\u547d\u4ee4\u884c --features "foo bar"\n# \u9ed8\u8ba4\u6240\u6709 features \u662f\u5173\u95ed\u7684, \u9664\u975e\u624b\u52a8\u6253\u5f00, \u901a\u8fc7 default feature \u53ef\u4ee5\u6539\u53d8\u8fd9\u4e00\u9ed8\u8ba4\u7ea6\u5b9a\n# \u53ef\u4ee5\u901a\u8fc7\u5f15\u5165\u4f9d\u8d56\u65f6\u6307\u5b9a default-features=false \u5373 flate2 = { version = "1.0.3", default-features = false, features = ["zlib"] } \u6765\u9632\u6b62\u9ed8\u8ba4\u6253\u5f00\u67d0\u4e9b feature\n[features]\ndefault=["use_std"] # use_std feature \u5c31\u9ed8\u8ba4\u6253\u5f00\u4e86\nuse_std=[]\nunstable= ["pattern"]\npatter=[]\n# \u6253\u5f00jpeg-decoder\u4f9d\u8d56\u7684 rayon feature\nparallel = ["jpeg-decoder/rayon"]\n\n\n# \u6700\u7ec8\u7f16\u8bd1\u76ee\u6807\u5e93\u7684\u4fe1\u606f\n[lib]\nname = foo # \u8868\u793a\u5c06\u6765\u7f16\u8bd1\u7684\u5e93\u540d\u5b57\u4e3a\u201clibfooa\u201d \u6216 \u201clibfoo.so"\u7b49\u3002\ncrate-type = dylib # \u6bd4\u5982 crate-type = [\u201ddylib\u201d, \u201dstaticlib\u201d]\uff0c\u8868\u793a\u53ef \u4ee5\u540c\u65f6\u7f16\u8bd1\u751f\u6210\u52a8\u6001\u5e93\u548c\u9759\u6001\u5e93\u3002\npath = "src/lib.rs" # \u8868\u793a\u5e93\u6587\u4ef6\u5165\u53e3 \uff0c \u5982\u679c\u4e0d\u6307\u5b9a\uff0c \u5219\u9ed8\u8ba4\u662f src/lib.rs\u3002\ntest=true # \u8868\u793a\u53ef\u4ee5\u4f7f\u7528\u5355\u5143\u6d4b\u8bd5\nbench = true # \u8868\u793a\u53ef\u4ee5\u4f7f\u7528\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5, \u82e5\u4ee3\u7801\u4e2d\u6ca1\u6709\u63d0\u4f9b\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5, \u5219\u53ef\u8bbe\u7f6e\u4e3a  false\n\n\n# \u53cc\u4e2d\u62ec\u53f7 -> \u6570\u7ec4\n[[test]]\npath = "tests/test_default.rs" \nname = "default"\n[[test]]\nname = "aa"\npath = "tests/aa.rs"\n\n\n\n\n# \u4f7f\u7528\u672c\u5730\u4ed3\u5e93\u4e2d\u7684\u4ee3\u7801build\n[patch.crates-io]\nuuid = { path = "../path/to/uuid" }\n# \u9ed8\u8ba4 master \u5206\u652f, # \u624b\u52a8\u6307\u5b9a commit id, \u4e0d\u8fc7\u6709\u4e86 lock \u6587\u4ef6, \u5c31\u4e0d\u5fc5\u8fd9\u4e48\u5e72\u4e86\nuuid = {git = "https://github.com/uuid-rs/uuid.git",  rev = "9f35b8e"} \n\n\n# \u56db\u4e2a\u5185\u5efa\u7684 profile : dev, release, test, and bench, \u5728\u547d\u4ee4\u884c\u901a\u8fc7 --release \u6307\u5b9a\n\n# \u5bf9\u6bcf\u4e2a profile \u8fdb\u884c\u66f4\u7ec6\u81f4\u7684\u914d\u7f6e\n# \u5206\u522b\u4ee3\u8868\u5bf9 Release\u3001 Bench \u548c Test, debug \u56db\u79cd \u7f16\u8bd1\u6a21\u5f0f\u8fdb\u884c\u914d\u7f6e\n[profile.release]\ndebug=true # \u7f16\u8bd1\u65f6, \u5305\u542b debug \u4fe1\u606f\n# \u4f18\u5316\u7ea7\u522b\nopt-level = 3 # \u7f16\u8bd1\u4f18\u5316, \u8017\u65f6\u66f4\u957f\n\n[profile.bench]\ndebug=true\n\n[profile.test]\ndebug=true\n\n[profile.dev]\nopt-level = 0 # \u4f18\u5316\u7ea7\u522b, \u547d\u4ee4\u884c\u901a\u8fc7  -C opt-level=1 \u6307\u5b9a\n                # 0: no optimizations, also turns on cfg(debug_assertions) (the default).\n                # 1: basic optimizations.\n                # 2: some optimizations.\n                # 3: all optimizations.\n                # s: optimize for binary size.\n                # z: optimize for binary size, but also turn off loop vectorization.\n\noverflow-checks = false # Disable integer overflow checks\nlto= # \u8fde\u63a5\u65f6\u95f4\u4f18\u5316\n\n\n\n')),(0,l.kt)("h3",{id:"854-cargolock"},"8.5.4. cargo.lock"),(0,l.kt)("p",null,"\u9501\u5b9a\u4f9d\u8d56\u7248\u672c"),(0,l.kt)("h3",{id:"855-workspace"},"8.5.5. workspace"),(0,l.kt)("p",null,"\u5de5\u4f5c\u7a7a\u95f4\u53ef\u4ee5\u7ba1\u7406\u591a\u4e2a proj \u548c lib"),(0,l.kt)("p",null,"\u65b0\u5efa Cargo.toml \u4f5c\u4e3a\u6839\u5305\u7684\u5143\u6570\u636e (\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684\u5b50\u5305 \u4e5f\u90fd\u6709\u81ea\u5df1\u7684 Cargo.toml \u914d\u7f6e\uff0c\u5404\u81ea\u72ec\u7acb\uff0c \u4e92\u4e0d\u5f71\u54cd)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-t"},'[workspace]\nmembers = [\n    "main", # \u53ef\u6267\u884c \u4e3b\u7a0b\u5e8f\n    "core", # \u6838\u5fc3\u7c7b\u5e93\n    "util", # \u5de5\u5177\u5e93\n]\n')),(0,l.kt)("p",null,"\u4e0d\u7ba1\u662f\u7f16\u8bd1\u6839\u5305\u8fd8\u662f\u5b50\u5305\uff0c\u6700\u7ec8\u7684\u7f16\u8bd1\u7ed3 \u679c\u6c38\u8fdc\u90fd\u4f1a\u8f93\u51fa\u5230\u6839\u5305\u7684 target \u76ee\u5f55\u4e0b\uff0c\u5e76\u4e14\u6574\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u53ea\u5141\u8bb8\u6709\u4e00\u4e2a Cargo.lock \u6587\u4ef6\u3002"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cargo new [--bin] main"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"cargo new --lib core"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"cargo new --lib util"),"; \u7531\u4e8e\u6bcf\u6b21\u521b\u5efa\u65f6, cargo \u90fd\u4f1a\u68c0\u67e5 \u9876\u5c42 Cargo \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684 member \u662f\u5426\u90fd\u5b58\u5728, \u6240\u4ee5\u4e2d\u95f4\u53ef\u80fd\u68c0\u67e5\u51fa\u73b0\u9519\u8bef, \u4e0d\u5fc5\u62c5\u5fc3, \u5168\u90e8\u521b\u5efa\u5b8c\u9519\u8bef\u5c31\u6d88\u5931\u4e86"),(0,l.kt)("p",null,"lib \u7c7b\u578b\u7c7b\u578b\u9700\u8981\u5c06\u65b0\u5efa\u7684 module (\u5373rs\u6587\u4ef6) \u5728 lib.rs \u4e2d\u58f0\u660e ",(0,l.kt)("inlineCode",{parentName:"p"},"pub mod xxx"),", pub \u53ef\u9009"),(0,l.kt)("h3",{id:"856-\u4f9d\u8d56\u7684\u7248\u672c\u53f7\u89c4\u5219"},"8.5.6. \u4f9d\u8d56\u7684\u7248\u672c\u53f7\u89c4\u5219"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// Rust \u5305\u4f7f\u7528\u7684\u662f\u8bed\u4e49\u5316\u7248\u672c\u53f7 (SemVer)\u3002\u57fa\u672c\u683c\u5f0f\u4e3a\u201cX\u536bZ\u201d\n\n// \u2022 x\uff0c\u4e3b\u7248\u672c\u53f7 \u5f53\u505a\u4e86\u4e0d\u517c\u5bb9\u6216\u98a0\u8986\u6027\u7684\u66f4\u65b0\u65f6 \uff0c \u4fee\u6539\u6b64\u7248\u672c\u53f7\u3002\n// \u2022 y\uff0c ;\u6b20\u7248\u672c\u53f7 (minor)\u3002\u5f53\u505a\u4e86\u5411\u4e0b\u517c\u5bb9\u7684\u529f\u80fd\u6027\u4fee\u6539\u65f6\uff0c\u4fee\u6539\u6b64\u7248\u672c\u53f7 \u3002 \n// \u2022 z\uff0c\u4fee\u8ba2\u7248\u672c\u53f7 (patch)\u3002\u5f53\u505a\u4e86\u5411\u4e0b\u517c\u5bb9\u7684\u95ee\u9898\u4fee\u6b63\u65f6\uff0c\u4fee\u6539\u6b64\u7248\u672c\u53f7\u3002\n\n// \u7b26\u53f7:\n// ^: \u7248\u672c\u53f7\u5fc5\u987b\u5927\u4e8e\u6307\u5b9a\u7248\u672c, \u65b0\u7684\u7248\u672c\u5fc5\u987b\u6ee1\u8db3\u4e0d\u4fee\u6539[major, minor, patch]\u4e2d\u6700\u5de6\u8fb9\u975e\u96f6\u6570\u5b57\u3002\u5982\u6307\u5b9a ^1.0.0, \u7b49\u4ef7\u4e8e >=1.0.0 <2.0.0\n// *: \u901a\u914d\u7b26, \u53ef\u4ee5\u7528\u5728[major, minor,patch]\u7684\u4efb\u4f55\u4e00\u4e2a\u4e0a\u9762\u3002 \n// ~: \u5141\u8bb8\u4fee\u6539[major, minor, patch]\u4e2d\u6ca1\u6709\u660e\u786e\u6307\u5b9a\u7684\u7248\u672c\u53f7\n// \u624b\u52a8\u6307\u5b9a\uff0c \u901a\u8fc7 >, <, =, >=, <= \u6765\u6307\u5b9a\u7248\u672c\u53f7 \u3002\n\n")),(0,l.kt)("h2",{id:"86-buildrs"},"8.6. build.rs"),(0,l.kt)("p",null,"build.rs\u53ef\u5b9e\u73b0\u672c\u9879\u76ee\u7f16\u8bd1\u524d\u7684\u989d\u5916\u64cd\u4f5c\uff0c\u6bd4\u5982\u4ee3\u7801\u751f\u6210(\u5982 grpc)\u3001\u8c03\u7528cmake/clang/gcc/ndk-build\u7b49\u7f16\u8bd1\u6240\u4f9d\u8d56\u7684C/C++\u5e93\u3001\u8bfb\u53d6C/C++\u5934\u6587\u4ef6\u751f\u6210FFI\u6587\u4ef6\u7ed9Rust\u9879\u76ee\u4f7f\u7528\u7b49\u7b49\uff0c\u76f8\u5f53\u4e8eRust\u5199\u7684shell\u811a\u672c"),(0,l.kt)("p",null,"\u5148\u4e8e cargo build \u88ab\u7f16 \u8bd1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"fn main() {\n    ...\n}\n")),(0,l.kt)("h2",{id:"87-\u9879\u76ee\u7ba1\u7406\u6848\u4f8b"},"8.7. \u9879\u76ee\u7ba1\u7406\u6848\u4f8b"),(0,l.kt)("h3",{id:"871-\u5bfc\u51fa\u81ea\u5b9a\u4e49\u5b8f"},"8.7.1. \u5bfc\u51fa\u81ea\u5b9a\u4e49\u5b8f"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cargo new --bin hello_macro"),", \u65b0\u5efa lib.rs (\u540d\u5b57\u4efb\u610f), \u5b9a\u4e49 macro, \u5bfc\u51fa"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"#[macro_export]\nmacro_rules! map {\n    // \u7edf\u8ba1 item \u4e2a\u6570\u65f6\u4f7f\u7528\u7684\u5355\u4f4d, \u8fd9\u91cc\u4f7f\u7528 \u7a7a\u5143\u7ec4, \u4e0d\u5360\u7a7a\u95f4\n    // @unit \u662f\u7ea6\u5b9a\u4fd7\u6210\u7684\u5728\u5b8f\u5185\u90e8\u5b9a\u4e49\u5b8f\u7684\u547d\u540d\u89c4\u5219\n    // \u5fc5\u987b\u5b9a\u4e49\u5728\u5f00\u5934\u6761, \u5426\u5219\u5c31\u6309\u7167\u666e\u901a\u5339\u914d\u5206\u652f\u5904\u7406\u4e86\n    (@unit $($x:tt)*) => {()};\n    (@count $($key:expr),* ) => {\n        (<[()]>::len(&[$(map!(@unit $key)),*]));\n    };\n\n    ($($key:expr => $value:expr),* $(,)*) => (\n        {\n            let _cap = map!(@count $($key),*);\n            let mut _map = std::collections::HashMap::with_capacity(_cap);\n           $(\n               _map.insert($key, $value);\n           )*\n           _map\n       }\n    )\n}\n\n")),(0,l.kt)("p",null,"\u5728 main.rs \u4e2d\u5bfc\u5165\u4f7f\u7528"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// #[macro_use] extern crate hello_async; \n// or\nuse hello_macro::map;\n\nfn main() {\n    let map = map!(\n        1 => "a",\n        2 => "b",\n    );\n    println!("{:?}", map);\n}\n\n\n\n\n\n\n// \u5bfc\u51fa\u540c\u4e2a\u5305\u4e0b, \u5176\u4ed6 mod \u5185\u7684\u5b8f\n#[macro_use]\nmod macros {\n     macro_rules! xxx {...}\n     macro_rules! yy {..}\n}\nfn main() {\n    // \u76f4\u63a5\u4f7f\u7528\n    xxx!(...);\n}\n\n')),(0,l.kt)("h3",{id:"872-\u5bfc\u5165\u81ea\u5b9a\u4e49-crate"},"8.7.2. \u5bfc\u5165\u81ea\u5b9a\u4e49 crate"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cargo new web-server")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cd web-server")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"cargo new --lib thread-pool")),(0,l.kt)("p",null,"\u4fee\u6539 web-server \u7684 cargo.toml:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-t"},'[dependencies]\nthread-pool = {path = "./thread-pool" } # \u5fc5\u987b\u4e3a thread-pool, \u548c\u5e93\u540d\u4e00\u81f4; thread_pool \u9519\u8bef, threadpool\u9519\u8bef\n                                    # \u4f7f\u7528: use thread_pool::xxxx (\u53d8\u4e3a\u4e0b\u5212\u7ebf)\n')),(0,l.kt)("h3",{id:"873-\u6267\u884c\u5b50\u76ee\u5f55\u4e2d\u7684-module"},"8.7.3. \u6267\u884c\u5b50\u76ee\u5f55\u4e2d\u7684 module"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-t"},'\n[[example]]\nname = "udp_server"\npath = "examples/udp_server.rs"\n\n[[example]]\nname = "udp_client"\npath = "examples/udp_client.rs"\n\n[[example]]\nname = "tcp_server"\npath = "examples/tcp_server.rs"\n\n[[example]]\nname = "tcp_client"\npath = "examples/tcp_client.rs"\n\n')),(0,l.kt)("p",null,"\u7136\u540e\u5728 /examples \u4e0b\u65b0\u5efa rs \u6587\u4ef6, \u5199 main \u65b9\u6cd5\u5373\u53ef"),(0,l.kt)("h3",{id:"874-\u5bfc\u5165\u81ea\u5b9a\u4e49-module"},"8.7.4. \u5bfc\u5165\u81ea\u5b9a\u4e49 module"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'//ferris_says  \u4e3a\u81ea\u5b9a\u4e49 module\n\nmod ferris_says; // \u65b9\u6cd5 1: \u901a\u8fc7\u58f0\u660e\u5bfc\u5165 module\nuse ferris_says::say;// \u65b9\u6cd5 2: \u5bfc\u5165\u6a21\u5757\u7684\u65b9\u6cd5  // \u652f\u6301 as , \u5982 use xxx as yyy\nuse std::io::{stdout, BufWriter}; \n\nfn demo() {\n    let stdout = stdout();\n    let message = String::from("Hello fellow Rustaceans!");\n    let width = message.chars().count();\n\n    let mut writer = BufWriter::new(stdout.lock());\n    say(message.as_bytes(), width, &mut writer).unwrap();\n}\n')),(0,l.kt)("h3",{id:"875-\u5bfc\u5165\u7b2c\u4e09\u65b9-crate"},"8.7.5. \u5bfc\u5165\u7b2c\u4e09\u65b9 crate"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// Rust 2015 \u7248\u672c\u7684\u5199\u6cd5\n// \u5728 Rust2018 \u7248\u672c\u4e2d\uff0c\u53ef\u4ee5\u7701\u7565\u6389 extern erate, \u56e0\u4e3a\u5728 Cargo.toml \u4e2d\u5df2\u7ecf\u6dfb\u52a0\u4e86\u4f9d\u8d56 \n// extern crate \u58f0\u660e\u5305\u7684\u540d\u79f0 \u662f linked_list\uff0c \u7528\u7684\u662f\u4e0b\u753b\u7ebf\u201c_\u201d\uff0c \u800c\u5728 Cargo.tom! \u4e2d\u7528\u7684\u662f\u8fde\u5b57\u7b26"-"\u3002\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\u5462?\u5176\u5b9e Cargo \u9ed8\u8ba4\u4f1a\u628a\u8fde\u5b57\u7b26\u8f6c\u6362\u6210 \u4e0b\u753b\u7ebf \nextern crate linked_list\uff0c\n')),(0,l.kt)("h1",{id:"9-\u5355\u5143\u6d4b\u8bd5"},"9. \u5355\u5143\u6d4b\u8bd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'/// \u5355\u5143\u6d4b\u8bd5\n/// \n/// \u4f7f\u7528 cargo test \u8fd0\u884c\n/// \n/// \u8fd0\u884c\u67d0\u4e2a\u7279\u5b9a\u7684\u6d4b\u8bd5\u65b9\u6cd5 cargo test test_any_panic\n/// \n/// cargo test panic \u65b9\u6cd5\u540d\u4e2d\u542b\u6709 panic \u7684\u6d4b\u8bd5\u65b9\u6cd5\u4f1a\u8fd0\u884c\n/// \n\n\n#[cfg(test)]// \u6761\u4ef6\u7f16\u8bd1 \uff0c \u544a\u8bc9\u7f16\u8bd1\u5668\u53ea\u5728\u8fd0\u884c\u6d4b\u8bd5( cargo test \u547d\u4ee4)\u65f6\u624d\u7f16\u8bd1\u6267\u884c\nmod tests {\n    // \u6ce8\u610f\u8fd9\u4e2a\u60ef\u7528\u6cd5\uff1a\u5728 tests \u6a21\u5757\u4e2d\uff0c\u4ece\u5916\u90e8\u4f5c\u7528\u57df\u5bfc\u5165\u6240\u6709\u540d\u5b57\u3002\n    use super::*;\n\n    #[test]\n    fn test_xx() {\n        println!("hello unit test");\n    }\n\n    // \u6d4b\u8bd5 panic\n    #[test]\n    #[ignore] // \u5ffd\u7565\u6d4b\u8bd5, \u6216\u8005\u4f7f\u7528 cargo test -- --ignored \u547d\u4ee4\u6765\u8fd0\u884c\u5b83\u4eec\u3002\n    #[should_panic(expected = "assertion failed")] // \u5012\u7f6e\u6211\u4eec\u7684\u6d4b\u8bd5\u7ed3\u679c (\u5982\u679c\u53d1\u751f\u9519\u8bef\u6d4b\u8bd5\u5c06\u4f1a\u6210\u529f\u5e76\u4e14\u5982\u679c\u6ca1\u6709\u9519\u8bef\u4f1a\u5931\u8d25), \u4e00\u822c \u548c `(expected = "assertion failed")` \u4e00\u8d77\u4f7f\u7528\n    fn test_any_panic() {\n        divide_non_zero_result(1, 0);\n    }\n\n    // \u6d4b\u8bd5 \u5e26\u6709\u8f93\u51fa\u6587\u672c\u7684panic\n    #[test]\n    #[should_panic(expected = "Divide result is zero")]\n    fn test_specific_panic() {\n        divide_non_zero_result(1, 10);\n    \n}\n\n\n\n')),(0,l.kt)("h1",{id:"10-\u4ea4\u53c9\u7f16\u8bd1-and-\u6761\u4ef6\u7f16\u8bd1"},"10. \u4ea4\u53c9\u7f16\u8bd1 and \u6761\u4ef6\u7f16\u8bd1"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/japaric/rust-cross#tldr-ubuntu-example"},"https://github.com/japaric/rust-cross#tldr-ubuntu-example"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/76611800"},"https://zhuanlan.zhihu.com/p/76611800"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/128626720"},"https://zhuanlan.zhihu.com/p/128626720")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'///\u6761\u4ef6\u7f16\u8bd1\n/// \n/// cfg \u5c5e\u6027\uff1a\u5728\u5c5e\u6027\u4f4d\u7f6e\u4e2d\u4f7f\u7528 #[cfg(...)]\n///cfg! \u5b8f\uff1a\u5728\u5e03\u5c14\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528 cfg!(...)\n/// \nfn condition_compile() {\n    // \u8fd9\u4e2a\u51fd\u6570\u4ec5\u5f53\u76ee\u6807\u7cfb\u7edf\u662f Linux \u7684\u65f6\u5019\u624d\u4f1a\u7f16\u8bd1\n    #[cfg(target_os = "linux")]\n    fn are_you_on_linux() {\n        println!("You are running linux!")\n    }\n    // \u800c\u8fd9\u4e2a\u51fd\u6570\u4ec5\u5f53\u76ee\u6807\u7cfb\u7edf **\u4e0d\u662f** Linux \u65f6\u624d\u4f1a\u7f16\u8bd1\n    #[cfg(not(target_os = "linux"))]\n    fn are_you_on_linux() {\n        println!("You are *not* running linux!")\n    }\n\n    are_you_on_linux();\n\n    if cfg!(target_os = "linux") {\n        println!("Yes. It\'s definitely linux!");\n    } else {\n        println!("Yes. It\'s definitely *not* linux!");\n    }\n\n    // \u81ea\u5b9a\u4e49\u6761\u4ef6\n    //\n    // `rustc --cfg some_condition custom.rs && ./custom`\n    //\n    // #[cfg(some_condition)]\n    // fn conditional_function() {\n    //     println!("condition met!")\n    // }\n\n    // conditional_function();\n}\n\n')),(0,l.kt)("h1",{id:"11-\u5e76\u53d1"},"11. \u5e76\u53d1"),(0,l.kt)("h2",{id:"111-\u901a\u7528\u6982\u5ff5"},"11.1. \u901a\u7528\u6982\u5ff5"),(0,l.kt)("h3",{id:"1111-\u8fdb\u7a0b-and-\u7ebf\u7a0b"},"11.1.1. \u8fdb\u7a0b and \u7ebf\u7a0b"),(0,l.kt)("p",null,"\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u6700\u5c0f\u5355\u5143\uff0c\u7ebf\u7a0b\u662f\u7a0b\u5e8f\u6267\u884c\u65f6\u7684\u6700\u5c0f\u5355\u5143 "),(0,l.kt)("p",null,"\u53ef\u4ee5\u4f7f\u7528\u591a\u8fdb\u7a0b\u6765\u63d0\u4f9b\u5e76\u53d1\uff0c\u6bd4\u5982 Master-Worker \u6a21\u5f0f\uff0c\u7531 Master \u8fdb\u7a0b\u6765\u7ba1\u7406 Worker \u5b50\u8fdb\u7a0b\uff0c Worker \u5b50\u8fdb\u7a0b\u6267\u884c\u4efb\u52a1 \u3002 Master \u548c Worker \u4e4b\u95f4\u901a\u5e38\u4f7f\u7528 Socket \u6765\u8fdb\u884c\u8fdb\u7a0b\u95f4\u901a\u4fe1\u597d\u5904\u662f\u7a0b\u5e8f\u5065\u58ee, \u7f3a\u70b9\u662f\u8017\u8d39\u8d44\u6e90"),(0,l.kt)("p",null,"\u4f7f\u7528\u7ebf\u7a0b\u63d0\u4f9b\u5e76\u53d1, \u5360\u7528\u8d44\u6e90\u5c11, \u4f46\u662f\u7f16\u7a0b\u8c03\u8bd5\u76f8\u5f53\u590d\u6742"),(0,l.kt)("h3",{id:"1112-\u4e8b\u4ef6\u56de\u8c03\u5b9e\u73b0\u7684\u5f02\u6b65\u5e76\u53d1"},"11.1.2. \u4e8b\u4ef6\u56de\u8c03\u5b9e\u73b0\u7684\u5f02\u6b65\u5e76\u53d1"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"\u591a\u8fdb\u7a0b/\u7ebf\u7a0b \u5b9e\u73b0\u7684\u5e76\u53d1, \u8fd8\u662f\u65e0\u6cd5\u652f\u6491\u4e07\u7ea7\u522b\u7684\u5e76\u53d1\u8bbf\u95ee, \u56e0\u4e3a\u5c31\u7b97\u4e00\u4e2a\u7ebf\u7a0b\u5904\u7406\u4e00\u4e2a\u8fde\u63a5, \u4e5f\u8981\u4e0a\u4e07\u7ebf\u7a0b, \u8fd9\u65f6\u5019\u670d\u52a1\u5668\u4e5f\u5d29\u4e86")),(0,l.kt)("p",null,"\u4e8b\u4ef6\u9a71\u52a8\u5b9e\u73b0\u5e76\u53d1: \u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b, \u4e0d\u65ad\u4ece\u4e8b\u4ef6\u961f\u5217\u4e2d\u67e5\u8be2\u662f\u5426\u6709\u4e8b\u4ef6\u53d1\u751f, \u82e5\u6709, \u5219\u8c03\u7528\u5173\u8054\u7684\u56de\u8c03\u51fd\u6570, \u6574\u4e2a\u8fc7\u7a0b\u662f\u975e\u963b\u585e\u7684"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u4e3a\u4e86\u89e3\u51b3\u56de\u8c03\u5730\u72f1\u7684\u95ee\u9898, \u65b0\u7684\u65b9\u6848\u51fa\u73b0\u4e86 --\x3e Promise, Future, promise \u7ad9\u5728\u4efb\u52a1\u5904\u7406\u8005\u7684\u89d2\u5ea6\uff0c\u5c06\u5f02\u6b65\u4efb\u52a1\u5b8c\u6210\u6216\u5931\u8d25\u7684 \u72b6\u6001\u6807\u8bb0\u5230 Promise \u5bf9\u8c61\u4e2d \u3002 Future \u5219\u7ad9\u5728\u4efb\u52a1\u8c03\u7528\u8005\u7684\u89d2\u5ea6\uff0c\u6765\u68c0\u6d4b\u4efb\u52a1\u662f\u5426\u5b8c\u6210\uff0c\u5982\u679c \u5b8c\u6210\u5219\u76f4\u63a5\u83b7\u53d6\u7ed3\u679c\uff0c\u5982\u679c\u672a\u5b8c\u6210\u5219\u963b\u585e\u76f4\u5230\u83b7\u53d6\u5230\u7ed3\u679c \uff0c \u6216\u8005\u7f16\u5199\u56de\u8c03\u51fd\u6570\u907f\u514d\u963b\u585e")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"\u4e3a\u4e86\u8fdb\u4e00\u6b65\u89e3\u51b3\u4ee3\u7801\u5197\u4f59 ---\x3e \u534f\u7a0b: \u63cf\u8ff0\u4e86\u4e00\u79cd\u4efb\u52a1\u534f\u540c\u6267\u884c\u7684\u65b9\u5f0f, \u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b, \u540c\u65f6\u5904\u7406\u591a\u4e2a\u4efb\u52a1, \u4e00\u4e2a\u65f6\u95f4\u7247\u5728\u6267\u884c\u4efb\u52a1 1, \u67d0\u4e2a\u65f6\u95f4\u7247\u53c8\u5207\u5230\u6267\u884c\u4efb\u52a1 2, \u770b\u8d77\u6765\u5c31\u597d\u50cf\u4efb\u52a1 1,2 \u540c\u65f6\u5728\u6267\u884c (\u6574\u4e2a\u6982\u5ff5\u7c7b\u4f3c CPU \u5bf9\u7ebf\u7a0b\u7684\u8c03\u5ea6\u65b9\u5f0f)"),(0,l.kt)("p",{parentName:"li"},"\u603b\u7684\u6765\u8bf4\uff0c\u534f\u7a0b\u53ef\u4ee5\u8ba9\u5f00\u53d1\u8005\u7528\u5199\u540c\u6b65(\u987a\u5e8f)\u4ee3\u7801\u7684\u65b9 \u5f0f\u7f16\u5199\u53ef\u5f02\u6b65\u6267\u884c\u7684\u4ee3\u7801 "),(0,l.kt)("p",{parentName:"li"},"\u534f\u7a0b\u662f\u4ee5\u7ebf\u7a0b\u4e3a\u5bb9\u5668\u7684\uff0c \u534f\u7a0b\u7684\u7279\u70b9\u662f\u5185\u5b58\u5360\u7528\u6bd4\u7ebf\u7a0b\u66f4\u5c0f\u3001\u4e0a\u4e0b\u6587\u5207\u6362\u7684\u5f00\u9500\u66f4\u5c0f, \u4e5f\u88ab\u79f0\u4e3a\u7528\u6237 \u6001\u7ebf\u7a0b\uff0c\u6240\u4ee5\u53ef\u5927\u91cf\u4f7f\u7528"),(0,l.kt)("p",{parentName:"li"},"\u867d\u7136\u5145\u5206\u6316\u6398\u4e86\u5355\u7ebf\u7a0b\u7684\u5229\u7528\u7387\uff0c\u5728 \u5355\u7ebf\u7a0b\u4e0b\u53ef\u4ee5\u5904\u7406\u9ad8\u5e76\u53d1io\uff0c\u4f46\u5374\u65e0\u6cd5\u5229\u7528\u591a\u6838, \u56e0\u4e3a\u59cb\u7ec8\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u3002"))),(0,l.kt)("h2",{id:"112-\u7ebf\u7a0b\u57fa\u672c\u4f7f\u7528"},"11.2. \u7ebf\u7a0b\u57fa\u672c\u4f7f\u7528"),(0,l.kt)("h3",{id:"1121-\u521b\u5efa\u7ebf\u7a0b"},"11.2.1. \u521b\u5efa\u7ebf\u7a0b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'/// \u5e76\u53d1 \u95ed\u5305\n/// Rust \u4e2d\u901a\u8fc7 std::thread::spawn \u51fd\u6570\u521b\u5efa\u672c\u5730\u64cd\u4f5c\u7cfb\u7edf\uff08native OS\uff09\u7ebf\u7a0b\n/// \n/// spawn() \u8fd4\u56de\u65b0\u7ebf\u7a0b\u7684\u53e5\u67c4\uff08handle\uff09\uff0c\u6211\u4eec\u5fc5\u987b\u62e5\u6709\u53e5\u67c4\uff0c\u624d\u80fd\u83b7\u53d6\u7ebf\u7a0b\u7684\u8fd4\u56de\u503c, \u901a\u8fc7 handle.join().unwrap();\n// \n// \n/// \nfn concurrent() {\n    use std::thread;\n    use std::time::Duration;\n\n    // \u521b\u5efa\n    // \n    // \u666e\u901a\u51fd\u6570\u7684\u5199\u6cd5, \u4e0d\u63a8\u8350\u5199\u6cd5\n    //\n    fn spawn_function() {\n        for i in 0..5 {\n            println!("spawned thread print {}", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n    }\n    let t = thread::spawn(spawn_function);\n\n    //\n    // \u95ed\u5305\u7684\u5199\u6cd5\n    let t = thread::spawn(|| {\n        for i in 0..5 {\n            println!("spawned thread print {}", i);\n            thread::sleep(Duration::from_millis(1));// \u7761\u7720\n        }\n    });\n\n    t.join().unwrap();// \u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f or \u83b7\u53d6\u8fd4\u56de\u503c\n\n\n\n    //move \u5f3a\u5236\u6240\u6709\u6743\u8fc1\u79fb\n    //\n    //\u5728\u5b50\u7ebf\u7a0b\u4e2d\u5c1d\u8bd5\u4f7f\u7528\u5f53\u524d\u51fd\u6570\u7684\u8d44\u6e90, \u8fd9\u4e00\u5b9a\u662f\u9519\u8bef\u7684\n    // \u9700\u8981\u4f7f\u7528 move, \u5c06\u8d44\u6e90\u6240\u6709\u6743\u79fb\u52a8\u5230\u5b50\u7ebf\u7a0b\u5185\u90e8\u4f7f\u5f97\u5916\u90e8\u8d44\u6e90\u5931\u6548\n    //\n    \n    // let s = "hello"; // \u82e5\u662f &str \u7c7b\u578b, \u5219 move \u6267\u884c\u7684\u662f copy, \u95ed\u5305\u5916\u5c42 s \u8fd8\u662f\u6709\u6548\u7684\n    let s = "hello".to_owned();// \u82e5\u4e3a String, \u5219 move \u6267\u884c \u79fb\u52a8\u8bed\u4e49, s \u5931\u6548\n   \n    let handle = thread::spawn(move || {// \u4e00\u5b9a\u8981\u52a0 move\n        println!("sub thread, s = {}", s);\n    });\n    // \u9519\u8bef, s\u5df2\u7ecf \u5931\u6548\u4e86\n    println!("main thread, s= {}", s);\n    handle.join().unwrap();\n\n\n}\n\n')),(0,l.kt)("h3",{id:"1122-\u81ea\u5b9a\u4e49\u914d\u7f6e\u7ebf\u7a0b"},"11.2.2. \u81ea\u5b9a\u4e49\u914d\u7f6e\u7ebf\u7a0b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\n// \u8bbe\u7f6e\u7ebf\u7a0b\u6808, \u7ebf\u7a0b\u540d\n// \n // \u76f4\u63a5\u4f7f\u7528 thread::spawn\u751f\u6210\u7684\u7ebf\u7a0b\uff0c \u9ed8\u8ba4\u6ca1\u6709\u540d\u79f0\uff0c \u5e76\u4e14\u5176\u6808\u5927\u5c0f\u9ed8\u8ba4\u4e3a 2MB (\u5176\u5b9e\u5e95\u5c42\u8fd8\u662f\u901a\u8fc7 builder \u521b\u5efa\u7684)\n    // \u4f7f\u7528 thread::Builder \u7ed3\u6784\u4f53\u6765\u521b\u5efa\u53ef\u914d\u7f6e\u7684\u7ebf \u7a0b, \u4e3b\u7ebf\u7a0b\u65e0\u6cd5\u914d\u7f6e, \u548c rust \u65e0\u5173, \u56e0\u4e3a\u4e3b\u7ebf\u7a0b\u9ed8\u8ba4\u4f7f\u7528 \u8fdb\u7a0b\u7684\u6808, \u7531\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a\n    // \u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u73af\u5883\u53d8 \u91cf RUST_MIN_STACK  \u8bbe\u7f6e\u65b0\u521b\u5efa\u7684\u7ebf\u7a0b\u7684\u7ebf\u7a0b\u6808, \u4f1a\u88ab builder \u8986\u76d6\n    // \n    // \nuse std::{panic::catch_unwind, thread::{Builder, current}};\nfn main() {\n    let mut ths = vec![];\n    for id in 0..3 {\n        let thread_builder = Builder::new()\n            .name(format!("child-{}", id))\n            // unit: byte\n            .stack_size(3 * 1024);\n        let child = thread_builder.spawn(move || {\n            println!("child id = {}", id);\n            if id == 2 {\n                // panic!("panic.");\n                catch_unwind(|| {\n                    panic!("panic.");\n                }).unwrap();\n                println!("catch panic in {}", current().name().unwrap());\n                \n            }\n        }).unwrap();\n        ths.push(child);\n    }\n    for t in ths {\n        t.join().unwrap();\n    }\n}\n\n')),(0,l.kt)("h3",{id:"1123-\u7ebf\u7a0b\u672c\u5730\u53d8\u91cf"},"11.2.3. \u7ebf\u7a0b\u672c\u5730\u53d8\u91cf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u7ebf\u7a0b\u672c\u5730\u53d8\u91cf\nuse std::cell::RefCell;\nuse std::thread;\nfn main() {\n    thread_local!(static FOO: RefCell<u32> = RefCell::new(1));\n    FOO.with(|f| {\n        assert_eq!(*f.borrow(), 1);\n        *f.borrow_mut() = 2;\n    });\n    thread::spawn(|| {\n       FOO.with(|f| {\n           assert_eq!(*f.borrow(), 1);\n           *f.borrow_mut() = 3;\n       });\n   });\n   FOO.with(|f| {\n       assert_eq!(*f.borrow(), 2);\n   });\n}\n\n\n")),(0,l.kt)("h3",{id:"1124-\u624b\u52a8\u963b\u585e\u5524\u9192"},"11.2.4. \u624b\u52a8\u963b\u585e\u5524\u9192"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'use std::thread;\nuse std::time::Duration;\nfn main() {\n    let parked_thread = thread::Builder::new()\n        .spawn(|| {\n            println!("Parking thread");\n            // \u963b\u585e\n            // \u4e5f\u53ef\u4ee5 \u901a\u8fc7 std::thread: :park_timeout \u6765\u663e \u5f0f\u6307\u5b9a\u963b\u585e\u8d85\u65f6\u65f6\u95f4 \n            thread::park();\n            println!("Thread unparked");\n        }).unwrap();\n   thread::sleep(Duration::from_millis(10));\n   println!("Unpark the thread");\n//    \u5524\u9192\n   parked_thread.thread().unpark();\n   parked_thread.join().unwrap();\n}\n\n// \u6b64\u5916, \u8fd8\u6709 yield_now() \u8c26\u8ba9, \u8ba9\u51fa cpu \u63a7\u5236\u6743\n')),(0,l.kt)("h2",{id:"113-\u7ebf\u7a0b\u540c\u6b65"},"11.3. \u7ebf\u7a0b\u540c\u6b65"),(0,l.kt)("h3",{id:"1131-\u9519\u8bef\u793a\u4f8b"},"11.3.1. \u9519\u8bef\u793a\u4f8b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u5728\u7ebf\u7a0b\u95f4\u4f20\u9012\u53ef\u53d8\u5b57\u7b26\u4e32\n// \n\n\n\n// \u76f4\u63a5\u4f7f\u7528 String\nuse std::thread::spawn;\nfn main() {\n    let s = String::from("hello");\n    for _i in 0..3 {\n        // error\n        spawn(move || {\n            s.push_str("xxx");\n        });\n    }\n}\n\n\n// \u4f7f\u7528 Rc\nuse std::{rc::Rc, thread::spawn};\nfn main() {\n    // \u60f3\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e2d\u5171\u4eabs\uff0c\u5219\u9700\u8981\u4f7f\u7528\u3002 \n    // Rc\u5b9e\u73b0\u4e86!Send, \u4e0d\u53ef\u5728\u7ebf\u7a0b\u95f4\u4f20\u9012\u6240\u6709\u6743\n    let mut s = Rc::new(String::from("hello"));\n    for _i in 0..3 {\n        let mut s_clone = s.clone();\n        // error\n        // spawn \u51fd\u6570\u4f20\u5165\u7684 \u95ed\u5305\u6ca1\u6709\u5b9e\u73b0 Send\uff0c\u8fd9\u662f\u56e0\u4e3a\u6355\u83b7\u53d8\u91cf\u6ca1\n        // \u6709\u5b9e\u73b0 Send\u3002\u6355\u83b7\u53d8\u91cf\u662f Rc<String>\u7c7b\u578b\uff0c \u5b9e\u73b0\u7684\u662f!Send\uff0c\u6b63\u597d\u548c Send\u76f8\u53cd\n        spawn(move || {\n            s_clone.push_str("xxx");\n        });\n    }\n}\n\n\n// \u4f7f\u7528\u53ef\u4ee5\u5728\u591a\u7ebf\u7a0b\u95f4\u88ab\u79fb\u52a8\u548c\u5171\u4eab\u7684 Arc<T>\nuse std::{sync::Arc, thread::spawn};\nfn main() {\n    let s = Arc::new(String::from("hello"));\n    for _i in 0..3 {\n        let s_clone = s.clone();\n        // error\n        // \u8fd9\u662f\u56e0\u4e3a Arc<T>\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684, \u8003\u8651\u4f7f\u7528\u5177\u6709\u5185\u90e8\u53ef\u53d8\u6027\u7684\u7c7b\u578b, \u5982 Cell/RefCell\n        spawn(move || {\n            s_clone.push_str("xxx");\n        });\n    }\n}\n\n\n// \u4f7f\u7528 RefCell \u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027\nuse std::{cell::RefCell, sync::Arc, thread::spawn};\nfn main() {\n    let s = Arc::new(RefCell::new(String::from("hello")));\n    for _i in 0..3 {\n        let s_clone = s.clone();\n        // error\n        // `RefCell<String>` cannot be shared between threads safely\n        spawn(move || {\n            let s_clone = s_clone.borrow_mut();\n            s_clone.push_str("xxx");\n        });\n    }\n}\n\n\n// \u6b63\u786e\u65b9\u5f0f: \u4f7f\u7528 Mutex\n// \nuse std::{sync::{Arc, Mutex}, thread::spawn};\nfn main() {\n    // Arc \u7528\u4e8e\u652f\u6301\u5b89\u5168\u7684\u591a\u5f15\u7528\n    // Mutex \u7528\u4e8e\u5b89\u5168\u7684\u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027\n    let s = Arc::new(Mutex::new(String::from("hello")));\n    let mut ths = vec![];\n    for _i in 0..3 {\n        let s_ref = s.clone();\n        let child = spawn(move || {\n            let mut s_ref_mut = s_ref.lock().unwrap();\n            s_ref_mut.push_str(" xxx");\n        });\n        ths.push(child);\n    }\n    for t in ths {\n        t.join().unwrap();\n    }\n}\n\n\n')),(0,l.kt)("h3",{id:"1132-\u9501"},"11.3.2. \u9501"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// Mutex<T> \u4e92\u65a5\u9501: \u652f\u6301\u8de8\u7ebf\u7a0b\u5b89\u5168\u5171\u4eab\u53ef\u53d8\u53d8\u91cf\u7684\u5bb9\u5668, \u540c\u65f6\u53ea\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u5185\u90e8 \u53ef\u53d8\u6570\u636e, \u7c7b\u4f3c \u7ebf\u7a0b\u5b89\u5168\u7248\u672c\u7684 RefCell\n/// - lock() \u8fd4\u56de\u5185\u90e8\u6570\u636e\u7684\u53ef\u53d8\u5f15\u7528(\u963b\u585e\u5f53\u524d\u7ebf\u7a0b, \u76f4\u5230\u62ff\u5230\u9501)\n//      \u8fd4\u56de\u503c LockResult<MutexGuard<T>>, \u8d85\u51fa\u4f5c\u7528\u57df\u4f1a\u81ea\u52a8\u91ca\u653e\u9501\n// - try_lock() \u83b7\u53d6 \u9501\u7684\u65f6\u5019\u4e0d\u4f1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b, \u5982\u679c\u5f97\u5230\u9501 \uff0c \u5c31\u8fd4\u56de MutexGuard<T>; \u5982\u679c\u5f97\u4e0d\u5230\u9501\uff0c\u5c31\u8fd4\u56de Err\u3002\n// \n/// RefCell<T>: \u4f7f\u5f97\u5185\u90e8\u6570\u636e\u53ef\u53d8\n//  Rc<T>: \u539f\u5b50\u5f15\u7528\u8ba1\u6570 , \u5141\u8bb8\u591a\u5f15\u7528\n// \n//  Arc<T> : \u7ebf\u7a0b\u5b89\u5168\u7684 Rc<T>, \u5141\u8bb8\u591a\u7ebf\u7a0b\u4e0b\u7684\u591a\u5f15\u7528\n/// Mutex<T> : \u7ebf\u7a0b\u5b89\u5168\u7684 RefCell, \u63d0\u4f9b\u591a\u7ebf\u7a0b\u4e0b\u5185\u90e8\u6570\u636e\u7684\u53ef\u53d8\u5f15\u7528\n///\n\n///\n/// \u901a\u9053\u90fd\u7c7b\u4f3c\u4e8e\u5355\u6240\u6709\u6743\uff0c\u56e0\u4e3a\u4e00\u65e6\u5c06\u4e00\u4e2a\u503c\u4f20\u9001\u5230\u901a\u9053\u4e2d\uff0c\u5c06\u65e0\u6cd5\u518d\u4f7f\u7528\u8fd9\u4e2a\u503c\u3002\n/// \u9501\u7c7b\u4f3c\u4e8e\u591a\u6240\u6709\u6743: \u591a\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u76f8\u540c\u7684\u5185\u5b58\u4f4d\u7f6e , \u53ea\u662f\u4e0d\u80fd\u540c\u4e00\u65f6\u5019\u8bbf\u95ee\n///\n///\n///\n///\nfn lock_demo() {\n\n    // \n    // \u8ba1\u6570\u5668\u793a\u4f8b\n    // \n    use std::sync::{Mutex, Arc};\n    use std::thread;\n    // \u4e0d\u80fd\u4ec5\u4ec5\u4f7f\u7528 Mutex::new(0), \u56e0\u4e3a\u6709\u591a\u4e2a Thread\u9700\u8981\u5b83, counter\u79fb\u52a8\u8fdb\u5165\u67d0\u4e2aThread\u540e\u5176\u4ed6Thread\u5c31\u6ca1\u6cd5\u62e5\u6709counter\u4e86\n    // \u4e5f\u4e0d\u80fd\u7528Rc::new(Mutex::new(0)), \u56e0\u4e3aRc<T>\u7684\u5f15\u7528\u8ba1\u6570, \u5728\u591a\u7ebf\u7a0b\u4e0b\u4e0d\u5b89\u5168\n    let counter = Arc::new(Mutex::new(0));\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Arc::clone(&counter);\n        // or\n        let counter = counter.clone();\n        \n        let handle = thread::spawn(move || {\n            // lock() \u8fd9\u4e2a\u8c03\u7528\u4f1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b, \u76f4\u5230\u83b7\u53d6\u9501\u4e3a\u6b62\n            //\n            //\u5982\u679c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u62e5\u6709\u9501\uff0c\u5e76\u4e14\u90a3\u4e2a\u7ebf\u7a0b panic \u4e86\uff0c\n            // \u5219\u672c\u7ebf\u7a0b lock \u8c03\u7528\u4f1a\u5931\u8d25\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6ca1\u4eba\u80fd\u591f\u518d\u83b7\u53d6\u9501\uff0c\n            // \u6240\u4ee5\u8fd9\u91cc\u9009\u62e9 unwrap \u5728\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\u65f6\u4f7f\u7ebf\u7a0b\u76f4\u63a5 panic\n            //\n            //\u8fd4\u56de result, \u62c6\u5305\u540e\u662f MutexGuard<T>, \u662f\u4e2a\u667a\u80fd\u6307\u9488, \u5b9e\u73b0\u4e86 Deref\u6240\u4ee5\u53ef\u4ee5\u89e3\u5f15\u7528\n            // \u5b9e\u73b0\u4e86 Drop ,\u5f53 MutexGuard \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u81ea\u52a8\u91ca\u653e\u9501\n            //\n            let mut num = counter.lock().unwrap();\n            // \u89e3\u5f15\u7528\u540e, \u6570\u636e\u662f\u53ef\u53d8\u7684\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n    for handle in handles {\n        handle.join().unwrap();\n    }\n    println!("Result: {}", *counter.lock().unwrap());\n\n\n\n    // \u4e2d\u6bd2: \u7ebf\u7a0b\u5728\u83b7\u5f97\u9501\u4e4b\u540e\u53d1\u751f\u6050\u614c\n    // \n    let mutex = Arc::new(Mutex::new(1));\n    let c_mutex = mutex.clone();\n    let _ = thread::spawn(move || {\n        let mut data = c_mutex.lock().unwrap();\n        *data = 2;\n        // \u5b50\u7ebf\u7a0b panic, \u4e2d\u6bd2\u4e86\n        panic!("oh no");\n   }).join();\n//    \u662f\u5426\u4e2d\u6bd2, \u5373\u67e5\u770b\u83b7\u53d6\u9501\u7684\u5b50\u7ebf\u7a0b\u662f\u5426 panic\n   assert_eq!(mutex.is_poisoned(), true);\n//    \u4e3b\u7ebf\u7a0b\u83b7\u53d6\u9501, \u5f53\u7136\u83b7\u53d6\u4e0d\u5230\n   match mutex.lock() {\n    //    \u4e0d\u53ef\u8fbe\n       Ok(_) => unreachable!(),\n       Err(p_err) => {\n        //    \u63d0\u4f9b\u4e86 get_ref\u6216 get_mut\u65b9\u6cd5, \u83b7\u53d6\u9501\u5185\u90e8\u7684\u6570\u636e\n           let data = p_err.get_ref();\n           println!("recovered: {}", data);//2\n       }\n   };\n\n\n    // \u8bfb\u5199\u9501\n    // RwLock<T> \u652f\u6301\u591a\u4e2a\u8bfb\u7ebf\u7a0b\u548c\u4e00\u4e2a\u5199\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee (\u4e0d\u50cf Mutex<T>\u53ea\u80fd\u7ebf\u7a0b\u72ec\u5360\u8bbf\u95ee)\n    // \n    // \u53ea\u8981\u7ebf\u7a0b\u6ca1\u6709\u62ff\u5230\u5199\u9501 \uff0c RwLock<T>\u5c31 \u5141\u8bb8\u4efb\u610f\u6570\u91cf \u7684\u8bfb\u7ebf\u7a0b\u83b7\u5f97\u8bfb\u9501\n    // \n    let lock = RwLock::new(5);\n    // \u8bfb\u9501\u548c \u5199\u9501\u8981\u4f7f\u7528\u663e\u5f0f\u4f5c\u7528\u57df\u5757\u9694\u79bb\u5f00 \uff0c\u8fd9\u6837\u7684\u8bdd \uff0c \u8bfb\u9501\u6216\u5199\u9501\u624d\u80fd\u5728\u79bb\u5f00\u4f5c\u7528 \u57df\u4e4b\u540e\u81ea \u52a8\u91ca\u653e ; \u5426\u5219\u4f1a\u5f15\u8d77\u6b7b\u9501\uff0c\u56e0\u4e3a\u8bfb\u9501\u548c\u5199\u9501\u4e0d\u80fd\u540c\u65f6\u5b58\u5728 \n    {\n        // \u83b7\u53d6\u591a\u4e2a\u8bfb\u9501\n        let r1 = lock.read().unwrap();\n        let r2 = lock.read().unwrap();\n        assert_eq!(*r1, 5);\n        assert_eq!(*r2, 5);\n    } \n   {\n    //    \u83b7\u53d6\u5199\u9501\n       let mut w = lock.write().unwrap();\n       *w += 1;\n       assert_eq!(*w, 6);\n   }\n\n}\n\n\n\n// \u5c4f\u969c (\u7c7b\u4f3c java \u7684 CountDownLatch)\n// \nuse std::sync::{Arc, Barrier};\nuse std::thread;\nfn main() {\n    let mut handles = Vec::with_capacity(5);\n    let barrier = Arc::new(Barrier::new(5));\n    for _ in 0..5 {\n        let c = barrier.clone();\n        handles.push(thread::spawn(move|| {\n            println!("before wait");\n            // \u4f7f\u5f97\u5f53\u524d\u5b50\u7ebf\u7a0b\u963b\u585e, \u77e5\u9053 clone 5 \u6b21\u540e barrie \u5f52\u96f6\u540e, \u7ebf\u7a0b\u6062\u590d\u6267\u884c\n           c.wait();\n           println!("after wait");\n       }));\n   }\n   for handle in handles {\n       handle.join().unwrap();\n   }\n}\n\n// \u6761\u4ef6\u53d8\u91cf\n// \u6ee1\u8db3\u6307\u5b9a\u6761\u4ef6\u4e4b\u524d\u963b\u585e\u67d0\u4e00\u4e2a\u5f97\u5230\u4e92\u65a5\u9501\u7684\u7ebf\u7a0b \n// \u6761\u4ef6\u53d8\u91cf\u9700\u8981\u914d\u5408\u4e92\u65a5\u9501\u624d\u80fd\u4f7f\u7528\n// \n// - \u6bcf\u4e2a\u6761\u4ef6\u53d8\u91cf\u6bcf\u6b21\u53ea\u80fd\u548c\u4e00\u4e2a\u4e92\u65a5\u4f53\u4e00\u8d77\u4f7f\u7528\n// - \u4f7f\u7528\u573a\u666f: \u5f53\u72b6\u6001\u6210\u7acb\u65f6\u901a\u77e5\u4e92\u65a5\u4f53\nuse std::sync::{Arc, Condvar, Mutex};\nuse std::thread;\nfn main() {\n    let pair = Arc::new((Mutex::new(false), Condvar::new()));\n    let pair_clone = pair.clone();\n    thread::spawn(move || {\n        let &(ref lock, ref cvar) = &*pair_clone;\n        let mut started = lock.lock().unwrap();\n        // \u4fee\u6539\u9501\u5185\u90e8\u6570\u636e\n        *started = true;\n        // \u901a\u77e5\u4e3b\u7ebf\u7a0b\n       cvar.notify_one();\n   });\n   let &(ref lock, ref cvar) = &*pair;\n   let mut started = lock.lock().unwrap();\n   while !*started {\n       println!("{}", started); // false\n        //\u963b\u585e\u5f53\u524d\u7ebf\u7a0b(\u4e3b\u7ebf\u7a0b), \u76f4\u5230\u6536\u5230\u6761\u4ef6\u53d8\u91cf\u7684\u901a\u77e5\n       started = cvar.wait(started).unwrap();\n       println!("{}", started); // true\n   }\n}\n')),(0,l.kt)("h3",{id:"1133-\u539f\u5b50\u7c7b\u578b"},"11.3.3. \u539f\u5b50\u7c7b\u578b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// AtomicBool\u3001 AtomicIsize\u3001 AtomicPtr \u548c AtomicUsize\n\n// \u5b9e\u73b0\u81ea\u65cb\u9501\nuse std::sync::Arc;\nuse std::sync::atomic::{AtomicUsize, Ordering};\nuse std::thread;\nfn main() {\n    // \u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a 1\n    let spinlock = Arc::new(AtomicUsize::new(1));\n    let spinlock_clone = spinlock.clone();\n    let thread = thread::spawn(move|| {\n        // \u4fee\u6539\u4e3a 0;\n        // \u540c\u65f6\u6307\u5b9a\u5185\u5b58\u987a\u5e8f\n        spinlock_clone.store(0, Ordering::SeqCst);\n    });\n    // \u82e5\u4e0d\u4e3a 0, \u5219\u81ea\u65cb\n   while spinlock.load(Ordering::SeqCst) != 0 {}\n//    \u963b\u585e\u4e3b\u7ebf\u7a0b, \u7b49\u5f85\u5b50\u7ebf\u7a0b\u5b8c\u6210\n   if let Err(panic) = thread.join() {\n       println!("Thread had an error: {:?}", panic);\n   }\n}\n')),(0,l.kt)("h3",{id:"1134-channel"},"11.3.4. channel"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n/// channel \u6d88\u606f\u4f20\u9012\n/// \n/// \u5177\u4f53\u5b9e\u73b0\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a \u591a\u751f\u4ea7\u8005\u5355\u6d88\u8d39\u8005 (Multi-Producer-Single-Consumer, MPSC) \u7684\u5148\u8fdb\u5148\u51fa(FIFO\u3015 \u961f\u5217, \u5e95\u5c42\u57fa\u4e8e\u94fe\u8868\u5b9e\u73b0\n// \n// \u4e09\u79cd\u7c7b\u578b\u7684csp \u8fdb\u7a0b:\n// - Sender \u7528\u4e8e\u53d1\u9001\u5f02\u6b65\u6d88\u606f\n// - SyncSender \u53d1\u9001\u540c\u6b65\u6d88\u606f\n// - Receiver\u63a5\u6536\u6d88\u606f\n// \n// \u4e24\u79cd\u7c7b\u578b\u7684 channel\n// - \u5f02\u6b65\u65e0\u754c Channel -  let (sender, receiver):  (Sender, Receiver) = channel(); \u53d1\u9001\u6d88\u606f\u662f\u5f02\u6b65\u65e0\u963b\u585e\u7684, \u7f13\u51b2\u533a\u65e0\u9650\u5927\n// - \u540c\u6b65\u6709\u754c Channel -  let (sender, receiver):  (SyncSender, Receiver) = sync_channel(size);\u53ef\u4ee5\u9884\u5206\u914d\u5177\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u7f13\u51b2\u533a , \u6ee1\u4e86\u5c31\u963b\u585e\u6d88\u606f\u53d1\u9001, \u82e5\u7f13\u51b2\u533a == 0, sender\u548c receiver \u95f4\u53d8\u4e3a\u539f\u5b50\u64cd\u4f5c\n// \nfn channel_demo() {\n    \n    //\u4e00\u4e2a\u53d1\u9001\u8005\uff08transmitter\uff09\u548c\u4e00\u4e2a\u63a5\u6536\u8005\uff08receiver\uff09\n\n    use std::sync::mpsc;// mpsc \u662f \u591a\u4e2a\u751f\u4ea7\u8005\uff0c\u5355\u4e2a\u6d88\u8d39\u8005\uff08multiple producer, single consumer\uff09\u7684\u7f29\u5199\n    use std::thread;\n    // tx: \u53d1\u9001\u8005\n    // rx : \u63a5\u6536\u8005\n    // \u6b64\u65f6\u8fd8\u65e0\u6cd5\u7f16\u8bd1, \u56e0\u4e3a Rust \u4e0d\u77e5\u9053\u6211\u4eec\u60f3\u8981\u5728\u901a\u9053\u4e2d\u53d1\u9001\u4ec0\u4e48\u7c7b\u578b, \u540e\u7eed\u7f16\u8bd1\u5668\u80fd\u591f\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\n    let (tx, rx) = mpsc::channel();\n\n    //\u521b\u5efa\u4e00\u4e2a\u65b0\u7ebf\u7a0b\u4f5c\u4e3a\u53d1\u9001\u8005\n    // \n    // //\u4f7f\u7528 move \u5c06 tx \u79fb\u52a8\u5230\u95ed\u5305\u4e2d\u8fd9\u6837\u65b0\u5efa\u7ebf\u7a0b\u5c31\u62e5\u6709 tx \u4e86, \u5f53\n    // \u53d1\u9001\u8005\u6267\u884c\u5b8c\u903b\u8f91, \u9000\u51fa\u4f5c\u7528\u57df, tx \u4e5f\u5c31\u81ea\u52a8\u6790\u6784\u4e86, \u63a5\u6536\u7aef\u4e5f\u5c31\u6536\u5230\u5173\u95ed\u7684\u4fe1\u53f7\n    // (\u82e5\u6ca1\u6709 \u4f7f\u7528 move, tx \u59cb\u7ec8\u5b58\u6d3b, \u65e0\u6cd5\u81ea\u52a8\u6790\u6784, \u4f1a\u9020\u6210 \u63a5\u6536\u8005\u59cb\u7ec8\u963b\u585e)\n    thread::spawn(move || {\n        let val = String::from("hi");\n        tx.send(val).unwrap();\n    });\n\n    // \u63a5\u6536\n    // \n    //\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u963b\u585e\u4e3b\u7ebf\u7a0b\u6267\u884c\u76f4\u5230\u4ece\u901a\u9053\u4e2d\u63a5\u6536\u4e00\u4e2a\u503c, \n    //\u5f53\u901a\u9053\u53d1\u9001\u7aef\u5173\u95ed\uff0crecv \u4f1a\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u8868\u660e\u4e0d\u4f1a\u518d\u6709\u65b0\u7684\u503c\u5230\u6765\u4e86\n    //\n    //try_recv \u4e0d\u4f1a\u963b\u585e\uff0c\u76f8\u53cd\u5b83\u7acb\u523b\u8fd4\u56de\u4e00\u4e2a Result<T, E>\uff1aOk \u503c\u5305\u542b\u53ef\u7528\u7684\u4fe1\u606f\uff0c\u800c Err \u503c\u4ee3\u8868\u6b64\u65f6\u6ca1\u6709\u4efb\u4f55\u6d88\u606f\n    //\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u5faa\u73af\u6765\u9891\u7e41\u8c03\u7528 try_recv\uff0c\u5728\u6709\u53ef\u7528\u6d88\u606f\u65f6\u8fdb\u884c\u5904\u7406\uff0c\u5176\u4f59\u65f6\u5019\u5219\u5904\u7406\u4e00\u4f1a\u5176\u4ed6\u5de5\u4f5c\u76f4\u5230\u518d\u6b21\u68c0\u67e5\n    //\n    let received = rx.recv().unwrap();\n    println!("Got: {}", received);\n\n    //\u4e5f\u53ef\u4ee5\u8fed\u4ee3\u63a5\u6536\u5668, \u5f53\u901a\u9053\u88ab\u5173\u95ed\u65f6\uff0c\u8fed\u4ee3\u5668\u4e5f\u5c06\u7ed3\u675f\n    //\n    for received in rx {// \u6216\u8005 rx.iter()\n        println!("Got: {}", received);\n    }\n\n\n\n\n\n\n    //\u901a\u8fc7\u514b\u9686\u53d1\u9001\u8005\u6765\u521b\u5efa\u591a\u4e2a\u751f\u4ea7\u8005\n    //\n    // \n    use std::sync::mpsc::{Sender, Receiver};\n    static NTHREADS: i32 = 3;\n\n    let (tx, rx): (Sender<i32>, Receiver<i32>) = mpsc::channel();// \u624b\u52a8\u6307\u5b9a\u4f20\u8f93\u6570\u636e\u7684\u7c7b\u578b\n\n    for id in 0..NTHREADS {\n        // sender \u7aef\u53ef\u88ab\u590d\u5236\n        let thread_tx = tx.clone();\n        // \u6216\u8005\n        let tx1 = mpsc::Sender::clone(&tx);\n\n\n        thread::spawn(move || {\n            // \u88ab\u521b\u5efa\u7684\u7ebf\u7a0b\u53d6\u5f97 `thread_tx` \u7684\u6240\u6709\u6743\n            thread_tx.send(id).unwrap();\n            println!("thread {} finished", id);\n        });\n    }\n\n    let mut ids = Vec::with_capacity(NTHREADS as usize);\n    for _ in 0..NTHREADS {\n        // \u82e5\u65e0\u53ef\u7528\u6d88\u606f\u7684\u8bdd\uff0c`recv` \u5c06\u963b\u6b62\u5f53\u524d\u7ebf\u7a0b\n        ids.push(rx.recv());\n    }\n\n    // \u663e\u793a\u6d88\u606f\u88ab\u53d1\u9001\u7684\u6b21\u5e8f\n    println!("{:?}", ids);\n}\n\n\n')),(0,l.kt)("h3",{id:"1135-tokio-\u4e2d\u7684\u5404\u79cd-channel-\u5b9e\u73b0"},"11.3.5. tokio \u4e2d\u7684\u5404\u79cd channel \u5b9e\u73b0"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\nsync : \u5bb9\u91cf\u6709\u9650, sender \u4f1a\u88ab block\n\nasync: \u5bb9\u91cf\u65e0\u9650, sender \u4e0d\u4f1a\u88ab block\n\nrendezvous: \u5bb9\u91cf\u4e3a 0, \u7528\u4e8e\u7ebf\u7a0b\u95f4\u540c\u6b65\n\noneshot: \u53ea\u5141\u8bb8\u53d1\u9001\u4e00\u6b21\u6570\u636e\n\nasync/await : \u548c sync channel \u7c7b\u4f3c, \u4f46\u662f waker \u4e0d\u540c\n\n")),(0,l.kt)("h2",{id:"114-\u591a\u7ebf\u7a0b\u5c0f\u4f8b\u5b50"},"11.4. \u591a\u7ebf\u7a0b\u5c0f\u4f8b\u5b50"),(0,l.kt)("h3",{id:"1141-\u5b9e\u73b0\u7ebf\u7a0b\u6c60"},"11.4.1. \u5b9e\u73b0\u7ebf\u7a0b\u6c60"),(0,l.kt)("p",null,"\u7b2c\u4e09\u65b9\u5305: threadpool"),(0,l.kt)("p",null,"\u8fd9\u91cc\u624b\u52a8\u5b9e\u73b0"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"")),(0,l.kt)("h3",{id:"1142-\u5b9e\u73b0-map-reduce-\u7b97\u6cd5"},"11.4.2. \u5b9e\u73b0 map-reduce \u7b97\u6cd5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n\n    //\u4f8b\u5b50:\n    //\u5b9e\u73b0 map-reduce \u7b97\u6cd5\n    //\n    let data = "86967897737416471853297327050364959\n11861322575564723963297542624962850\n70856234701860851907960690014725639\n38397966707106094172783238747669219\n52380795257888236525459303330302837\n58495327135744041048897885734297812\n69920216438980873548808413720956532\n16278424637452589860345374828574668";\n\n     // \u521b\u5efa\u4e00\u4e2a\u5411\u91cf\uff0c\u7528\u4e8e\u50a8\u5b58\u5c06\u8981\u521b\u5efa\u7684\u5b50\u7ebf\u7a0b\n    let mut children = vec![];\n\n    let chunked_data = data.split_whitespace();\n    for (i, data_segment) in chunked_data.enumerate() {\n        println!("data segment {} is \\"{}\\"", i, data_segment);\n\n        children.push(thread::spawn(move || -> u32 {\n            // \u8ba1\u7b97\u8be5\u6bb5\u7684\u6bcf\u4e00\u4f4d\u7684\u548c\uff1a\n            let result = data_segment\n                        // \u5bf9\u8be5\u6bb5\u4e2d\u7684\u5b57\u7b26\u8fdb\u884c\u8fed\u4ee3..\n                        .chars()\n                        // ..\u628a\u5b57\u7b26\u8f6c\u6210\u6570\u5b57..\n                        .map(|c| c.to_digit(10).expect("should be a digit"))\n                        // ..\u5bf9\u8fd4\u56de\u7684\u6570\u5b57\u7c7b\u578b\u7684\u8fed\u4ee3\u5668\u6c42\u548c\n                        .sum();\n\n            // println! \u4f1a\u9501\u4f4f\u6807\u51c6\u8f93\u51fa\uff0c\u8fd9\u6837\u5404\u7ebf\u7a0b\u6253\u5370\u7684\u5185\u5bb9\u4e0d\u4f1a\u4ea4\u9519\u5728\u4e00\u8d77\n            println!("processed segment {}, result={}", i, result);\n\n            // \u4e0d\u9700\u8981 \u201creturn\u201d\uff0c\u56e0\u4e3a Rust \u662f\u4e00\u79cd \u201c\u8868\u8fbe\u5f0f\u8bed\u8a00\u201d\uff0c\u6bcf\u4e2a\u4ee3\u7801\u5757\u4e2d\n            // \u6700\u540e\u6c42\u503c\u7684\u8868\u8fbe\u5f0f\u5c31\u662f\u4ee3\u7801\u5757\u7684\u503c\u3002\n            result\n\n        }));\n    }\n\n    // \u628a\u6bcf\u4e2a\u7ebf\u7a0b\u4ea7\u751f\u7684\u4e2d\u95f4\u7ed3\u679c\u6536\u5165\u4e00\u4e2a\u65b0\u7684\u5411\u91cf\u4e2d\n    let mut intermediate_sums = vec![];\n    for child in children {\n        // \u6536\u96c6\u6bcf\u4e2a\u5b50\u7ebf\u7a0b\u7684\u8fd4\u56de\u503c\n        let intermediate_sum = child.join().unwrap();\n        intermediate_sums.push(intermediate_sum);\n    }\n\n    let final_result = intermediate_sums.iter().sum::<u32>();\n    println!("Final sum result: {}", final_result);\n\n')),(0,l.kt)("h3",{id:"1143-\u591a\u7ebf\u7a0b\u7edf\u8ba1\u548c"},"11.4.3. \u591a\u7ebf\u7a0b\u7edf\u8ba1\u548c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n    // \n    //\n    //\n    const TOTAL_SIZE:usize = 100 * 1000; //\u6570\u7ec4\u957f\u5ea6\n    const NTHREAD:usize = 6; //\u7ebf\u7a0b\u6570\n    let data : Vec<i32> = (1..(TOTAL_SIZE+1) as i32).collect(); //\u521d\u59cb\u5316\u4e00\u4e2a\u6570\u636e\u4ece1\u5230n\u6570\u7ec4\n    let arc_data = Arc::new(data); //data \u7684\u6240\u6709\u6743\u8f6c\u7ed9\u4e86 ar_data\n    let result  = Arc::new(AtomicU64::new(0)); //\u6536\u96c6\u7ed3\u679c\u7684\u6570\u7ec4(\u539f\u5b50\u64cd\u4f5c)\n    let mut thread_handlers = vec![]; // \u7528\u4e8e\u6536\u96c6\u7ebf\u7a0b\u53e5\u67c4\n    for i in 0..NTHREAD {\n        // clone Arc \u51c6\u5907move\u5230\u7ebf\u7a0b\u4e2d\uff0c\u53ea\u589e\u52a0\u5f15\u7528\u8ba1\u6570\uff0c\u4e0d\u4f1a\u6df1\u62f7\u8d1d\u5185\u90e8\u6570\u636e\n        let test_data = arc_data.clone(); \n        let res = result.clone(); \n        thread_handlers.push( \n            thread::spawn(move || {\n                let id = i;\n                //\u627e\u5230\u81ea\u5df1\u7684\u5206\u533a\n                let chunk_size = TOTAL_SIZE / NTHREAD + 1;\n                let start = id * chunk_size;\n                let end = std::cmp::min(start + chunk_size, TOTAL_SIZE);\n                //\u8fdb\u884c\u6c42\u548c\u8fd0\u7b97\n                let mut sum = 0;\n                for  i in start..end  {\n                    sum += test_data[i];\n                }\n                //\u539f\u5b50\u64cd\u4f5c\n                res.fetch_add(sum as u64, Ordering::SeqCst);\n                println!("id={}, sum={}", id, sum );\n            }\n        ));\n    }\n    //\u7b49\u6240\u6709\u7684\u7ebf\u7a0b\u6267\u884c\u5b8c\n    for th in thread_handlers {\n        th.join().expect("The sender thread panic!!!");\n    }\n    //\u8f93\u51fa\u7ed3\u679c\n    println!("result = {}",result.load(Ordering::SeqCst));\n')),(0,l.kt)("h3",{id:"1144-\u5e26\u7ebf\u7a0b\u6c60\u7684-webserver"},"11.4.4. \u5e26\u7ebf\u7a0b\u6c60\u7684 webserver"),(0,l.kt)("p",null,"main.rs \u662f\u9879\u76ee\u542f\u52a8\u5165\u53e3"),(0,l.kt)("p",null,"lib.rs \u4e3a \u9879\u76ee\u5185\u90e8\u7684 \u5b50\u5e93"),(0,l.kt)("p",null,"main.rs :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'mod lib;\n\nuse std::net::{TcpListener, TcpStream};\nuse std::io::{Read, Write};\nuse std::fs::read_to_string;\nuse std::thread;\nuse std::time::Duration;\nuse thread_pool::ThreadPool;// \u6a2a\u7ebf\u53d8\u4e3a\u4e0b\u5212\u7ebf\u4e86\n\nfn main() {\n    let listener = TcpListener::bind("127.0.0.1:8080").unwrap();\n    let pool = ThreadPool::new(4);\n    for stream in listener.incoming().take(2) {\n        match stream {\n            Ok(stream) => {\n                pool.execute(|| {\n                    handle_conn_quick(stream);\n                });\n                // handle_conn_quick(stream);\n            }\n            Err(_) => eprintln!("error of connection"),\n        }\n    }\n}\n\n// \nfn handle_conn_quick(mut stream: TcpStream) {\n    let mut buf = [0u8; 512];\n    stream.read(&mut buf).unwrap();\n\n    println!("************** req ***************");\n    println!("{}\\n", String::from_utf8_lossy(&buf));\n\n    let get = b"GET / HTTP/1.1\\r\\n";\n    let sleep = b"GET /sleep HTTP/1.1\\r\\n";\n    let (status_line, html_path) = if buf.starts_with(get) {\n        ("HTTP/1.1 200 OK\\r\\n\\r\\n", "resources/hello.html")// \u76f8\u5bf9\u4e8e\u6839\u8def\u5f84\n    } else if buf.starts_with(sleep) {\n        thread::sleep(Duration::from_secs(5));\n        ("HTTP/1.1 200 OK\\r\\n\\r\\n", "resources/hello.html")\n    }\n    else {\n        ("HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n", "resources/404.html")\n    };\n    let resp = format!("{}{}", status_line, read_to_string(html_path).unwrap());\n\n    println!("************** resp ***************");\n    println!("{}\\n", resp);\n\n    stream.write(resp.as_bytes()).unwrap();\n    stream.flush().unwrap();\n}\n\n\n//  \u8fd9\u662f\u5355\u7ebf\u7a0b webserver \u7684\u4ee3\u7801\n#[allow(dead_code)]\nfn handle_conn(mut stream: TcpStream) {\n    let mut buf = [0u8; 1024];\n    let mut content = String::new();\n    loop {\n        let len = stream.read(&mut buf).unwrap();\n        content.push_str(&String::from_utf8_lossy(&buf)[..]);\n        if len < buf.len() {\n            break;\n        }\n    }\n\n    let get = "GET / HTTP/1.1\\r\\n";\n    let (status_line, html_path) = if content.starts_with(get) {\n        ("HTTP/1.1 200 OK\\r\\n\\r\\n", "resources/hello.html")\n    } else {\n        ("HTTP/1.1 404 NOT FOUND\\r\\n\\r\\n", "resources/404.html")\n    };\n\n    let html = read_to_string(html_path).unwrap();\n    let resp = format!("{}{}", status_line, html);\n    stream.write(resp.as_bytes()).unwrap();\n    stream.flush().unwrap();\n}\n\n\n')),(0,l.kt)("p",null,"lib.rs:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'use std::thread::{JoinHandle, spawn};\nuse std::sync::mpsc::{Sender, channel, Receiver};\nuse std::sync::{Arc, Mutex};\n\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() {\n        assert_eq!(2 + 2, 4);\n    }\n}\n\npub struct ThreadPool {\n    // \u8981\u5b9e\u73b0\u7684\u884c\u4e3a\u662f\u521b\u5efa\u7ebf\u7a0b\u5e76\u7a0d\u540e\u53d1\u9001\u4efb\u52a1\u4ee3\u7801\n    // \u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u5b58 Thread, \u800c\u8981\u5f15\u5165\u4e2d\u95f4\u5c42 worker\n    // \u82e5\u76f4\u63a5\u4f7f\u7528 Thread, \u521b\u5efa\u7ebf\u7a0b\u540e, \u4efb\u52a1\u4f1a\u76f4\u63a5\u7acb\u5373\u6267\u884c, \u4e0d\u884c\n    workers: Vec<Worker>,\n    sender: Sender<Msg>,\n}\n\nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        // \u5411\u6bcf\u4e2a worker\u53d1\u9001\u7ec8\u6b62\u6d88\u606f, \u4f7f\u5f97\u4efb\u52a1\u4ee3\u7801\u8df3\u51fareceive\u5faa\u73af\n        // \u4e3a\u4ec0\u4e48\u8981\u5206\u4e3a\u4e24\u4e2afor\u5faa\u73af?\n        //\u5982\u679c\u5c1d\u8bd5\u5728\u540c\u4e00\u5faa\u73af\u4e2d\u53d1\u9001\u6d88\u606f\u5e76\u7acb\u5373 join \u7ebf\u7a0b\uff0c\u5219\u65e0\u6cd5\u4fdd\u8bc1\u5f53\u524d\u8fed\u4ee3\u7684 worker \u662f\u4ece\u901a\u9053\u6536\u5230\u7ec8\u6b62\u6d88\u606f\u7684 worker\n        for _ in &mut self.workers {\n            self.sender.send(Msg::TerminateMsg).unwrap();\n        }\n        for w in &mut self.workers {// \u9700\u8981\u83b7\u53d6workers\u7684\u53ef\u53d8\u5f15\u7528\n            println!("worker {} stop", w.id);\n            // join \u8c03\u7528\u8005\u9700\u8981\u662f \u975e\u5f15\u7528\n            // \u90a3\u4e48, \u9700\u8981\u4e00\u4e2a\u65b9\u6cd5\u5c06 thread \u79fb\u52a8\u51fa\u62e5\u6709\u5176\u6240\u6709\u6743\u7684 Worker \u5b9e\u4f8b\u4ee5\u4fbf join \u53ef\u4ee5\u6d88\u8d39\u8fd9\u4e2a\u7ebf\u7a0b\u3002\n            //\n            // w.thread.join().unwrap();\n            if let Some(thread) = w.thread.take() {//take \u65b9\u6cd5\u4f1a\u53d6\u51fa Some \u800c\u7559\u4e0b None\n                thread.join().unwrap();\n            }\n        }\n    }\n}\n\nenum Msg {\n    JobMsg(Job),\n    TerminateMsg,\n}\n\ntype Job = Box<dyn FnOnce() + Send + \'static>;\n\nimpl ThreadPool {\n    /// \u521b\u5efa\u7ebf\u7a0b\u6c60\u3002\n    ///\n    /// # Panics\n    ///\n    /// `new` \u51fd\u6570\u5728 size \u4e3a 0 \u65f6\u4f1a panic\u3002\n    pub fn new(size: usize) -> Self {\n        assert!(size > 0);\n\n        let mut workers = Vec::with_capacity(size);\n\n        let (sender, receiver) = channel();\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        //\u591a \u751f\u4ea7\u8005\uff0c\u5355 \u6d88\u8d39\u8005 \u7684\u3002\u8fd9\u610f\u5473\u7740\u4e0d\u80fd\u7b80\u5355\u7684\u514b\u9686\u901a\u9053\u7684\u6d88\u8d39\u7aef\u6765\u89e3\u51b3\u95ee\u9898\n        //\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u5728\u6240\u6709\u7684 worker \u4e2d\u5171\u4eab\u5355\u4e00 receiver\uff0c\u5728\u7ebf\u7a0b\u95f4\u5206\u53d1\u4efb\u52a1\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool {\n            workers,\n            sender,\n        }\n    }\n\n    pub fn execute<F>(&self, f: F)\n        // \u6ca1\u53c2\u6570, \u6ca1\u8fd4\u56de\u503c\u7684\u95ed\u5305\n        where F: FnOnce() + Send + \'static\n    {\n        let job = Box::new(f);\n        self.sender.send(Msg::JobMsg(job)).unwrap();\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: Option<JoinHandle<()>>,// "()" \u8868\u793a\u7ebf\u7a0b\u4e2d\u7684\u4efb\u52a1\u6ca1\u6709\u8fd4\u56de\u503c\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<Receiver<Msg>>>) -> Self {\n        let thread = spawn(move|| {\n            // \u4e0d\u53ef\u4f7f\u7528 while let, \u56e0\u4e3awhile \u8868\u8fbe\u5f0f\u4e2d\u7684\u503c\u8fd8\u6709\u5757\u90fd\u4e00\u76f4\u5904\u4e8e\u4f5c\u7528\u57df\u4e2d, \u9501\u65e0\u6cd5\u91ca\u653e\n            //\n            // \u53ea\u80fd\u4f7f\u7528 loop \u5faa\u73af,\n            //\u4f7f\u7528 loop \u5e76\u5728\u5faa\u73af\u5757\u4e4b\u5185\u800c\u4e0d\u662f\u4e4b\u5916\u83b7\u53d6\u9501\u548c\u4efb\u52a1\uff0c\n            // lock \u65b9\u6cd5\u8fd4\u56de\u7684 MutexGuard \u5728 let job \u8bed\u53e5\u7ed3\n            // \u675f\u4e4b\u540e\u7acb\u523b\u5c31\u88ab\u4e22\u5f03\u4e86\u3002\u8fd9\u786e\u4fdd\u4e86 recv \u8c03\u7528\u8fc7\u7a0b\u4e2d\u6301\u6709\u9501\uff0c\n            // \u800c\u5728 job() \u8c03\u7528\u524d\u9501\u5c31\u88ab\u91ca\u653e\u4e86\uff0c\u8fd9\u5c31\u5141\u8bb8\u5e76\u53d1\u5904\u7406\u591a\u4e2a\u8bf7\u6c42\n            loop {\n                let msg = receiver.lock().unwrap().recv().unwrap();\n                match msg {\n                    Msg::JobMsg(job) => {\n                        println!("worker {} running", id);\n                        job();\n                    },\n                    Msg::TerminateMsg => {\n                        println!("worker {} receive terminate msg", id);\n                        break;\n                    },\n                }\n\n            }\n        });\n        Self {\n            id,\n            thread: Some(thread),\n        }\n    }\n}\n\n')),(0,l.kt)("h2",{id:"115-rayon-\u5e76\u884c\u6267\u884c\u4efb\u52a1"},"11.5. rayon \u5e76\u884c\u6267\u884c\u4efb\u52a1"),(0,l.kt)("p",null,"\u8f7b\u677e\u5730\u5c06\u987a\u5e8f\u8ba1\u7b97\u8f6c\u6362\u4e3a\u5b89\u5168\u7684\u5e76\u884c\u8ba1\u7b97\uff0c\u5e76\u4e14\u4fdd\u8bc1\u65e0\u6570\u636e\u7ade\u4e89"),(0,l.kt)("p",null,"\u5e95\u5c42\u4f7f\u7528 \u7ebf\u7a0b\u6c60\u6267\u884c\u4efb\u52a1, \u82e5\u5de5\u4f5c\u7ebf\u7a0b\u90fd\u88ab\u5360\u7528, \u5219\u65b0\u52a0\u7684\u4efb\u52a1\u4f1a\u987a\u5e8f\u6267\u884c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u5e76\u884c\u8fed\u4ee3\u5668\n// \nextern crate rayon;\nuse rayon::prelude::*;\nfn sum_of_squares(input: &[i32]) -> i32 {\n    input.par_iter()// \u8fd4\u56de\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u5e76\u884c\u8fed\u4ee3\u5668\u7c7b\u578b, \u901a\u8fc7 map \u6784\u9020\u4e86\u65b0\u7684 \u96c6\u5408\u8fed\u4ee3\u5668\n        .map(|&i| i * i).sum()\n}\nfn increment_all(input: &mut [i32]) {\n   \n    input.par_iter_mut() // \u56de\u4e00\u4e2a\u53ef\u53d8\u7684\u5e76\u884c\u8fed\u4ee3\u5668\u7c7b\u578b\u3002\n        .for_each(|p| *p += 1);// \u76f4\u63a5\u5728\u539f\u6709\u57fa\u7840\u4e0a\u4fee\u6539\n}\nfn main(){\n   let v = [1,2,3,4,5,6,7,8,9,10];\n   let r = sum_of_squares(&v);\n   println!("{}", r);\n   let mut v = [1,2,3,4,5,6,7,8,9,10];\n   increment_all(&mut v);\n   println!("{:?}", v);\n}\n\n\n// join()\n// \u5e76\u4e0d\u4fdd\u8bc1\u63a5\u6536\u7684\u4e24\u4e2a\u95ed\u5305\u4e00\u5b9a\u5e76\u884c\u6267\u884c, \u56e0\u4e3a \u82e5 \u7ebf\u7a0b\u6c60\u4e2d\u6ca1\u6709\u7a7a\u95f2\u7684\u7ebf\u7a0b\u4e86, \u65b0\u4efb\u52a1\u8fd8\u662f\u53ea\u80fd\u987a\u5e8f\u6267\u884c\n// \nextern crate rayon;\nfn fib(n: u32) -> u32 {\n    if n < 2 { return n; }\n    let (a, b) = rayon::join(\n        // \u63a5\u6536\u4e24\u4e2a\u95ed\u5305 , \u5e76\u884c\u6267\u884c\n        || fib(n - 1), || fib(n - 2)\n    );\n    a + b\n}\nfn main() {\n    let r = fib(32);\n    assert_eq!(r, 2178309);\n}\n')),(0,l.kt)("h2",{id:"116-crossbeam-\u65e0\u9501\u7684\u6570\u636e\u7ed3\u6784"},"11.6. CrossBeam \u65e0\u9501\u7684\u6570\u636e\u7ed3\u6784"),(0,l.kt)("p",null,"\u662f\u5bf9 \u6807\u51c6\u5e93\u7684\u6269\u5c55\u548c\u5305\u88c5\uff0c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// - \u6269\u5c55\u539f\u5b50\u7c7b\u578b, \u4e3a\u57fa\u7840\u5e93\u4e2d\u7684\u539f\u5b50\u7c7b\u578b\u5b9e\u73b0\u4e86 AtomicConsume trait\n// - Scoped \u7ebf\u7a0b: \u5141\u8bb8\u5b50\u7ebf\u7a0b\u53ef\u4ee5\u5b89\u5168\u5730\u4f7f\u7528\u7236\u7ebf\u7a0b\u4e2d\u7684\u5f15\u7528\n// - \u4f7f\u7528\u7f13\u5b58\u884c\u586b\u5145\u63d0\u5347\u4e95\u53d1\u6027\u80fd\n// - MPMC Channel: \u591a\u751f\u4ea7\u8005\u591a\u6d88 \u8d39\u8005\u901a\u9053\n")),(0,l.kt)("h2",{id:"117-rwlock-\u548c-refcell"},"11.7. RwLock \u548c RefCell"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// RwLock<T>\u76f8\u5f53\u4e8e\u7ebf\u7a0b\u5b89\u5168\u7248\u672c\u7684 RefCell<T>\uff0c\u540c\u65f6\u8fd0\u884c\u591a\u4e2a reader\u6216\u8005\u4e00\u4e2a writer\n// RwLock \u8bfb\u5199\u9501\uff0c\u662f\u591a\u8bfb\u5355\u5199\u9501\uff0c\u4e5f \u53eb\u5171\u4eab\u72ec\u5360\u9501 \u3002 \u5b83\u5141\u8bb8\u591a\u4e2a\u7ebf\u7a0b\u8bfb\uff0c\u5355\u4e2a\u7ebf\u7a0b\u5199 \u3002 \u4f46\u662f\u5728\u5199\u7684\u65f6\u5019 \uff0c \u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u5360\u6709\u5199\u9501 ; \u800c\u5728\u8bfb\u7684\u65f6\u5019\uff0c \u5141\u8bb8\u4efb\u610f\u7ebf\u7a0b\u83b7\u53d6\u8bfb\u9501 \u3002 \u8bfb\u9501\u548c\u5199\u9501\u4e0d\u80fd\u88ab\u540c\u65f6\u83b7\u53d6\n// \u6240\u4ee5\u5728\u5ea6\u591a\u5199\u5c11\u7684\u573a\u666f, \u4f7f\u7528 \u8bfb\u5199\u9501\u53ef\u4ee5\u6709\u66f4\u9ad8\u7684\u5e76\u53d1\u652f\u6301\n")),(0,l.kt)("h2",{id:"118-mutex"},"11.8. Mutex"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// Mutex<T>\u662f\u9501\uff0c\u540c\u4e00\u65f6\u95f4\u4ec5\u5141\u8bb8\u6709-\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u64cd\u4f5c, \u4e0d\u7ba1\u662f\u8bfb\u8fd8\u662f\u5199\u3002\n// \u672c\u8d28\u662f\u4e00\u4e2a struct\n\n")),(0,l.kt)("h2",{id:"119-atomicptr-\u548c-cell"},"11.9. AtomicPtr \u548c Cell"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// Atomic \u7cfb\u5217\u7c7b\u578b: AtomicBool\u3001 Atomiclsize\u3001 AtomicUsize\u548cAtomicPtr\n// \u53ef\u4ee5\u7528 AtomicPtr \u6765\u6a21\u62df\u5176\u4ed6\u60f3\u8981\u7684\u7c7b\u578b\n// AtomicPtr \u76f8\u5f53\u4e8e\u7ebf\u7a0b\u5b89\u5168\u7248\u672c \u7684 Cell<T>\n")),(0,l.kt)("h2",{id:"1110-send-\u548c-sync-trait"},"11.10. Send \u548c Sync trait"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\nSend \u8868\u793a\u8be5\u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u5b89\u5168\u7684\u5728\u591a\u7ebf\u7a0b\u4e2d\u4f20\u9012, \u8f6c\u79fb ownership (\u8868\u793a\u8de8\u7ebf\u7a0b move);\n\n    \u51e0\u4e4e\u6240\u6709\u7684Rust\u7c7b\u578b\u90fd\u662fSend\u7684\uff0c\u4f46\u662f\u4f8b\u5916\uff1a\u4f8b\u5982Rc<T>\u662f\u4e0d\u80fdSend\u7684\u3002\n\n    \u4efb\u4f55\u5b8c\u5168\u7531Send\u7c7b\u578b\u7ec4\u6210\u7684\u7c7b\u578b\u4e5f\u4f1a\u81ea\u52a8\u88ab\u6807\u8bb0\u4e3aSend\n\nSync \u8868\u793a\u7c7b\u578b\u53ef\u4ee5\u5b89\u5168\u7684\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e2d\u62e5\u6709\u5176\u503c\u7684\u5f15\u7528 (\u8868\u793a\u8de8\u7ebf\u7a0b share data, \u53ef\u4ee5\u88ab\u5b89\u5168\u7684 borrow)\n\n    \u5373\uff0c\u5bf9\u4e8e\u4efb\u610f\u7c7b\u578bT\uff0c\u5982\u679c&T\uff08T \u7684\u5f15\u7528\uff09\u662fSend\u7684\u8bddT\u5c31\u662fSync\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5176\u5f15\u7528\u5c31\u53ef\u4ee5\u5b89\u5168\u7684\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\n\n\n\u624b\u52a8\u5b9e\u73b0Send\u548cSync\u662f\u4e0d\u5b89\u5168\u7684\u3002\u901a\u5e38\u5e76\u4e0d\u9700\u8981\u624b\u52a8\u5b9e\u73b0Send\u548cSync trait\uff0c\u56e0\u4e3a\u7531Send\u548cSync\u7684\u7c7b\u578b\u7ec4\u6210\u7684\u7c7b\u578b\uff0c\u81ea\u52a8\u5c31\u662fSend\u548cSync\u7684\u3002\u56e0\u4e3a\u4ed6\u4eec\u662f\u6807\u8bb0trait\uff0c\u751a\u81f3\u90fd\u4e0d\u9700\u8981\u5b9e\u73b0\u4efb\u4f55\u65b9\u6cd5\n")),(0,l.kt)("h1",{id:"12-\u5f02\u6b65\u5e76\u53d1"},"12. \u5f02\u6b65\u5e76\u53d1"),(0,l.kt)("h2",{id:"121-\u5f02\u6b65\u6982\u5ff5"},"12.1. \u5f02\u6b65\u6982\u5ff5"),(0,l.kt)("h3",{id:"1211-\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5f02\u6b65"},"12.1.1. \u4e3a\u4ec0\u4e48\u4f7f\u7528\u5f02\u6b65"),(0,l.kt)("p",null,"\u60f3\u8981\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u4efb\u52a1, \u53ef\u4ee5\u4f7f\u7528\u591a\u7ebf\u7a0b, \u4f46\u662f\u5728\u4e0d\u540c\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5207\u6362\u548c\u7ebf\u7a0b\u4e4b\u95f4\u7684\u6570\u636e\u5171\u4eab\u8fc7\u7a0b\u4e2d\uff0c\u6d89\u53ca\u5230\u5f88\u591a\u5f00\u9500\u3002\u5373\u4f7f\u662f\u4e00\u4e2a\u53ea\u662f\u5750\u7740\u4ec0\u4e48\u90fd\u4e0d\u505a\u7684\u7ebf\u7a0b\uff0c\u4e5f\u4f1a\u6d88\u8017\u5b9d\u8d35\u7684\u7cfb\u7edf\u8d44\u6e90"),(0,l.kt)("p",null,"\u5f02\u6b65\u53ef\u4ee5\u5728\u4e0d\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b\u540c\u65f6\u8fd0\u884c\u591a\u4e2a\u4efb\u52a1, \u5177\u4f53\u6765\u8bf4\u5c31\u662f\u4f7f\u7528\u534f\u7a0b coroutine"),(0,l.kt)("h3",{id:"1212-\u666e\u901a\u591a\u7ebf\u7a0b-webserver"},"12.1.2. \u666e\u901a\u591a\u7ebf\u7a0b webserver"),(0,l.kt)("p",null,"\u4f8b\u5b50: \u4ece\u4e24\u4e2a server\u4e0b\u8f7d, \u7b2c\u4e00\u4e2a\u8d44\u6e90 \u8017\u65f6 3s, \u7b2c\u4e8c\u4e2a\u8d44\u6e90\u8017\u65f6 1s , \u603b\u5171\u8017\u65f6 4s, \u6539\u4e3a \u591a\u7ebf\u7a0b\u53ef\u4ee5\u7f29\u77ed\u4e3a 3s, \u4f46\u662f\u6709\u7ebf\u7a0b\u5207\u6362\u7684\u5f00\u9500, \u6700\u597d\u7684\u662f \u6539\u4e3a\u5f02\u6b65"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'\n// client\nfn start_client() -> Result<()> {\n    // \u987a\u5e8f\u6267\u884c, \u8017\u65f6\u957f, 4s\n    // connect_to_server("localhost", 8080, "send to server0: 8080")?;\n    // connect_to_server("localhost", 8081, "send to server1: 8081")?;\n\n\n\n\n    // \u591a\u7ebf\u7a0b, \u8fdb\u4e00\u6b65, \u53ef\u4ee5\u8003\u8651 \u4f7f\u7528\u7ebf\u7a0b\u6c60\n    let mut handles = Vec::new();\n    let handle_server0 = spawn(move || {\n        connect_to_server("localhost", 8080, "send to server0: 8080");\n    });\n    handles.push(handle_server0);\n    let handle_server1 = spawn(move || {\n        connect_to_server("localhost", 8081, "send to server0: 8081");\n    });\n    handles.push(handle_server1);\n    for handle in handles {\n        handle.join();\n    }\n\n\n    Ok(())\n}\n\nfn connect_to_server(host: &str, port: u16, content: &str) -> Result<()> {\n    let mut s = TcpStream::connect((host, port))?;\n    s.write(content.as_bytes())?;\n\n    let mut buf_reader = BufReader::new(&s);\n    let mut buf = Vec::new();\n    buf_reader.read_until(b\'\\n\', &mut buf)?;\n\n    println!(">>> recv from server : {}", std::str::from_utf8(&buf).unwrap());\n    Ok(())\n}\n\n\n\n// server1\nfn start_server1() -> Result<()> {\n    let tcp_listener = TcpListener::bind("localhost:8080")?;\n    for stream in tcp_listener.incoming() {\n        handle_conn(&mut stream?, 3)?\n    }\n    Ok(())\n}\n\n//server2\nfn start_server2() -> Result<()> {\n    let tcp_listener = TcpListener::bind("localhost:8081")?;\n    for stream in tcp_listener.incoming() {\n        handle_conn(&mut stream?, 1)?\n    }\n    Ok(())\n}\n\nfn handle_conn(s: &mut TcpStream, wait_seconds: u64) -> Result<()> {\n    let mut buf = [0; 512];\n    loop {\n        let len = s.read(&mut buf)?;\n        if len == 0 {\n            return Ok(());\n        }\n\n        sleep(Duration::from_secs(wait_seconds));\n        s.write(&buf[..len])?;\n        s.write("\\n".as_bytes())?;\n    }\n}\n\n\n')),(0,l.kt)("h3",{id:"1213-\u6539\u8fdb\u540e\u7684\u5f02\u6b65\u7248\u672c"},"12.1.3. \u6539\u8fdb\u540e\u7684\u5f02\u6b65\u7248\u672c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'use std::{\n    io::{BufRead, BufReader, Read, Result, Write},\n    net::{TcpListener, TcpStream},\n    str::from_utf8,\n};\n\nuse futures::{executor::block_on, join};\n\nfn main() {\n    block_on(conn_all_async())\n}\n\nasync fn conn_all_async() {\n    let f0 = conn_server_async("localhost", 8080, "send to server0: 8080");\n    let f1 = conn_server_async("localhost", 8081, "send to server0: 8081");\n    join!(f0, f1);// \u7b49\u5f85 f0, f1 \u5b8c\u6210\n}\n\nasync fn conn_server_async(host: &str, port: u16, content: &str) -> Result<()> {\n    conn_serve(host, port, content)\n}\n\nfn conn_serve(host: &str, port: u16, content: &str) -> Result<()> {\n    let mut s = TcpStream::connect((host, port))?;\n    s.write(content.as_bytes())?;\n\n    let mut buf = Vec::new();\n    let mut buf_reader = BufReader::new(&s);\n    buf_reader.read_until(b\'\\n\', &mut buf)?;\n\n    println!("recv from server: {}", from_utf8(&buf).unwrap());\n\n    Ok(())\n}\n\n')),(0,l.kt)("h2",{id:"122-\u57fa\u672c\u4f7f\u7528"},"12.2. \u57fa\u672c\u4f7f\u7528"),(0,l.kt)("h3",{id:"1221-block_on"},"12.2.1. block_on"),(0,l.kt)("p",null,"\u5b9a\u4e49\u5f02\u6b65\u51fd\u6570, \u7136\u540e\u4f7f\u7528 block_on \u963b\u585e\u4e3b\u7ebf\u7a0b:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// futures = "0.3"\n\nuse futures::executor::block_on;\n\nfn main() {\n    let hello_future = hello();// \u5f02\u6b65\u6267\u884c (\u4e0d\u4f1a\u7b49\u5f85\u6267\u884c\u5b8c), hello_future \u4ee3\u8868\u5f02\u6b65\u51fd\u6570\u7684 handle \u53e5\u67c4\n    println!("main finish");\n\n    // \u963b\u585e main thread,\n    // \u63a5\u53d7\u4e00\u4e2a future, \u8fd4\u56de\u771f\u5b9e\u7ed3\u679c\n    block_on(hello_future);\n}\n\n// \u5f02\u6b65\u51fd\u6570\nasync fn hello() {\n    println!("hello async");\n}\n\n')),(0,l.kt)("h3",{id:"1222-await"},"12.2.2. await"),(0,l.kt)("p",null,"\u4f7f\u7528 .await \u7b49\u5f85\u5f02\u6b65\u51fd\u6570\u6267\u884c\u5b8c, \u7528\u4e8e\u591a\u4e2a\u5f02\u6b65\u51fd\u6570\u6709\u4f9d\u8d56\u5173\u7cfb"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// futures = "0.3"\n\nuse futures::executor::block_on;\n\nfn main() {\n    block_on(hello2());// \u963b\u585e\u7b49\u5f85 hello2 \u6267\u884c\u5b8c\n}\n\nasync fn hello() {\n    println!("hello async");\n}\n\nasync fn hello1() {\n    hello().await;// \u7b49\u5f85 hello() \u6267\u884c\u5b8c\n    println!("hello 1");\n}\n\nasync fn hello2() {\n    hello1().await; //\u7b49\u5f85 hello1 \u6267\u884c\u5b8c\n    println!("hello 2");\n}\n\n\n\n')),(0,l.kt)("h3",{id:"1223-joinn"},"12.2.3. joinn"),(0,l.kt)("p",null,"\u5e76\u884c\u6267\u884c\u5f02\u6b65\u51fd\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use futures::executor::block_on;\nuse std::time::Duration;\n\nfn main() {\n    let main = async_main();\n    block_on(main);//\u963b\u585e\n}\n\n#[derive(Debug)]\nstruct Song;\n\nasync fn learn_song() -> Song {\n    // \u4e0d\u80fd\u4f7f\u7528 thread::sleep\n    async_std::task::sleep(Duration::from_secs(1)).await; //async-std = "1.5"\n    println!("learn song");\n    Song\n}\n\nasync fn sing_song(song: Song) {\n    async_std::task::sleep(Duration::from_secs(1)).await;\n    println!("sing song: {:?}", song);\n}\n\nasync fn dance() {\n    println!("dance");\n}\n\nasync fn learn_and_sing() {\n    let song = learn_song().await;// \u7b49\u5f85\u6267\u884c\u5b8c\n    sing_song(song).await;// \u4e5f\u8981\u52a0 await, \u5426\u5219\u4e3b\u7ebf\u7a0b\u4e0d\u4f1a\u7b49\u5f85 sing_song() \u6267\u884c\u5b8c\u5c31\u7ee7\u7eed\u524d\u8fdb\u4e86\n}\n\nasync fn async_main() {\n    let f1 = learn_and_sing();\n    let f2 = dance();\n\n    // `join!` \u7c7b\u4f3c\u4e8e `.await` \uff0c\u4f46\u662f\u53ef\u4ee5\u7b49\u5f85\u591a\u4e2a future \u5e76\u53d1\u5b8c\u6210\n    futures::join!(f1, f2); //  f1, f2 \u5e76\u884c\u5b8c\u6210, \u8fd4\u56de (handle1, handle2)\n    \n    //dance\n    //learn song\n    //sing song: Song\n\n}\n\n\n\n')),(0,l.kt)("h2",{id:"123-future\u5e76\u53d1\u6a21\u5f0f"},"12.3. future\u5e76\u53d1\u6a21\u5f0f"),(0,l.kt)("h3",{id:"1231-future\u5e95\u5c42\u662f\u751f\u6210\u5668"},"12.3.1. future\u5e95\u5c42\u662f\u751f\u6210\u5668"),(0,l.kt)("p",null,"\u8981\u652f\u6301async/await\u5f02\u6b65\u5f00\u53d1\uff0c \u6700\u597d\u662f\u80fd\u6709\u534f\u7a0b\u7684\u652f\u6301, "),(0,l.kt)("p",null,"\u4e00\u79cd\u662f\u6709\u6808\u534f\u7a0b(Stackful); \u53e6\u4e00\u79cd\u662f\u65e0\u6808\u534f\u7a0b(Stackless)\u3002\u5bf9\u4e8e\u6709\u6808\u534f\u7a0b\u7684\u5b9e\u73b0\uff0c \u4e00\u822c\u6bcf\u4e2a\u534f\u7a0b\u90fd\u81ea\u5e26\u72ec\u7acb\u7684\u6808\uff0c\u529f\u80fd\u5f3a\u5927\uff0c \u4f46\u662f\u6bd4\u8f83\u8017 \u5185\u5b58\uff0c \u6027\u80fd\u4e0d\u5982\u65e0\u6808\u534f\u7a0b\u3002 \u800c\u65e0\u6808\u534f\u7a0b\u4e00\u822c\u662f\u57fa\u4e8e\u72b6\u6001\u673a(StateMachine) \u6765\u5b9e\u73b0\u7684\uff0c \u4e0d\u4f7f \u7528\u72ec\u7acb \u7684\u6808\uff0c\u5177\u4f53\u7684\u5e94\u7528\u5f62\u5f0f \u53eb\u751f\u6210\u5668( Generator), rust \u4f7f\u7528\u540e\u8005"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// \u57fa\u672c\u4f7f\u7528\n#![feature(generators, generator_trait)]\nuse std::{ops::{Generator, GeneratorState}, pin::Pin};\nfn main() {\n    // \u751f\u6210\u5668\u65e0\u6cd5\u63a5\u53d7\u53c2\u6570\n    // \u548c\u95ed\u5305\u4e00\u6837\u53ef\u4ee5\u6355\u83b7\u5916\u90e8\u73af\u5883\u7684\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528move\u5173\u952e\u5b57\n    // \u751f\u6210\u5668\u81ea\u52a8\u5b9e\u73b0\u4e86Send\u548cSync,\u4f46\u4e0d\u4f1a\u81ea\u52a8\u5b9e\u73b0Copy\u6216Clone\u4e4b\u7c7b\u7684trait\n    let mut gen = || {\n        yield 1;// \u6bcf\u4e2a yield \u5bf9\u5e94\u4e00\u4e2a\u4e0d\u540c\u7684\u72b6\u6001, \u6bcf\u6b21\u8c03\u7528 resume(), \u5219\u8fd4\u56de\u5bf9\u5e94\u503c, \u751f\u6210\u5668\u6682\u65f6\u88ab\u6302\u8d77, \u76f4\u5230\u518d\u6b21 \u8c03\u7528 resume(), \n        yield 2;\n        return 3; // \u8c03\u7528 resume \u8fd4\u56de 3, \u5219 \u751f\u6210\u5668\u7ed3\u675f\n    };\n    match Pin::new(&mut gen).resume(()) {\n        GeneratorState::Yielded(1) => {},\n        _ => panic!("error 1"),\n    }\n    match Generator::resume(Pin::new(&mut gen), ()) {\n        GeneratorState::Yielded(2) => {},\n        _ => panic!("error 2"),\n    }\n    match Generator::resume(Pin::new(&mut gen), ()) {\n        // error\n        // GeneratorState::Yielded(3) => {},\n\n        GeneratorState::Complete(3) => {},\n        _ => panic!("error 3"),\n    }\n    // error\n    // let state = Generator::resume(Pin::new(&mut gen), ());\n    // println!("{:?}", state);\n}\n\n\n\n\n// \u4f5c\u4e3a\u51fd\u6570\u8fd4\u56de\u503c\n// \n// \n#![feature(generators, generator_trait)]\nuse std::ops::Generator;\npub fn up_to(limit: u64) -> impl Generator<Yield = u64, Return = u64> {\n    move || {\n    for x in 0..limit {\n         yield x;\n    }\n    return limit;\n    }\n}\nfn main(){\n    let a = 10;\n    let mut b = up_to(a);\n    unsafe {\n      for _ in 0..=10{\n         let c = b.resume();   \n         println!("{:?}", c);\n      }\n    }\n}\n\n\n\n\n//  \u548c\u8fed\u4ee3\u5668 \u7684\u5173\u7cfb\n// \n// \n// Generator<Yield=T, Return=()> - \u5982\u679c\u53ea\u5173\u6ce8\u8ba1\u7b97 \u7684\u8fc7\u7a0b\uff0c\u800c\u4e0d\u5173 \u5fc3\u8ba1 \u7b97\u7684\u7ed3\u679c\uff0c \u5219\u53ef\u4ee5 \u5c06 Return \u8bbe\u7f6e\u4e3a\u5355\u5143\u7c7b\u578b\uff0c\u53ea\u4fdd\u7559 Yield \u7684\u7c7b\u578b\uff0c \u90a3 \u4e48\u751f\u6210\u5668\u5c31\u53ef\u4ee5\u5316\u8eab\u4e3a\u6cd5\u4ee3\u5668\n// \n// \u751f\u6210\u5668\u7684\u6027\u80fd\u6bd4\u8fed\u4ee3\u5668\u66f4\u9ad8\u3002\u56e0\u4e3a\u751f\u6210\u5668\u662f\u4e00\u79cd\u5ef6\u8fdf\u8ba1\u7b97\u6216\u60f0\u6027\u8ba1\u7b97\uff0c \u5b83\u907f\u514d\u4e86\u4e0d\u5fc5 \u8981\u7684\u8ba1\u7b97\uff0c\u53ea\u6709\u5728\u6bcf\u6b21\u9700\u8981\u65f6\u624d\u901a\u8fc7 yield\u6765\u4ea7\u751f\u76f8\u5173\u7684\u503c\n// \n#![feature(generators, generator_trait)]\n\nuse std::{ops::{Generator, GeneratorState}, pin::Pin};\n\nfn main() {\n    let mut gen = gen();\n    let mut state = Pin::new(&mut gen);\n    for _ in 0..3 {\n        match state.as_mut().resume(()) {\n            GeneratorState::Yielded(i) => println!("{:?}", i),\n            _ => println!("complete"),\n        }\n    }\n}\n\nfn gen() -> impl Generator<Yield = u64, Return = ()> {\n    || {\n        let mut i = 0;\n        loop {\n            i += 1;\n            yield i;\n        }\n    }\n}\n\n\n\n\n\n// \u548c future\u5173\u7cfb\n// \n// Generator<Yield = (), Return = Result<T, E>> - \u4e0d\u5173 \u5fc3\u8fc7 \u7a0b \uff0c \u53ea\u5173\u6ce8\u7ed3\u679c, \u751f\u6210\u5668\u5c31\u53ef\u4ee5\u5316\u8eab\u4e3a Future\npub fn up_to(limit: u64) -> impl Generator<Yield = (), Return = Result<u64, ()>> {\n    move || {\n        for x in 0..limit {\n            yield ();\n        }\n        return Ok(limit);\n    }\n}\nfn main(){\n    let limit = 2;\n    let mut gen = up_to(limit);\n    unsafe {\n      for i in 0..=limit{\n         match gen.resume() {\n             GeneratorState::Yielded(v) => println!("resume {:?} : Pending", i),// \u8868\u793a\u8fd8\u6ca1\u5904\u7406\u5b8c\n             GeneratorState::Complete(v) => println!("resume {:?} : Ready", i), // \u5904\u7406\u5b8c\u6210, \u62ff\u5230\u7ed3\u679c\n         }\n      }\n    }\n}\n\n')),(0,l.kt)("h3",{id:"1232-future\u57fa\u672c\u4f7f\u7528\u7528"},"12.3.2. future\u57fa\u672c\u4f7f\u7528\u7528"),(0,l.kt)("p",null,"\u7b2c\u4e09\u65b9\u5e93 futures-rs \u63d0\u4f9b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},"// \u57fa\u672c\u7ec4\u4ef6\n// \n// - Future  \u771f\u5b9e\u7ed3\u679c\u7684\u5305\u88c5\n//      \u6838\u5fc3\u51fd\u6570 poll(), \u8fd4\u56de \u8ba1\u7b97\u7ed3\u679c\u662f\u5426\u51c6\u5907\u597d\n// - Executor \u8c03\u5ea6\u5668\n// - Task \u5177\u4f53\u7684\u5f02\u6b65\u4efb\u52a1\n\n\n\n// \u5b9e\u73b0\u4e00\u4e2a Future trait\u7684\u65b9\u5f0f\n// \n// \u65b9\u5f0f1\uff1a\u4f7f\u7528 async fn\uff0casync fu \u4f1a\u81ea\u52a8\u4e3a\u5f00\u53d1\u8005\u751f\u6210\u8fd4\u56de\u503c\u662f impl Future \u7c7b \u578b\u7684\u51fd\u6570\n// \u65b9\u5f0f2\uff1a\u81ea\u5b9a\u4e49 \u7ed3\u6784\u4f53\uff0c\u5e76\u5b9e\u73b0 Future trait\n\n\n// async/await \u539f\u7406: \n// async \u5173\u952e\u5b57\u5b9a\u4e49\u5f02\u6b65\u51fd\u6570/\u5f02\u6b65\u5757\uff0c\u5e95\u5c42\u90fd\u4f1a\u5148\u8f6c\u4e3a async \u5757\u7684\u5f62\u5f0f, \u518d\u5c06 async \u5757\u751f\u6210\u4e00\u4e2a Generator<Yield=()>\u7c7b\u578b\u7684\u751f\u6210\u5668\u6765\u4f7f\u7528\n\n")),(0,l.kt)("h3",{id:"1233-\u52a8\u624b\u5b9e\u73b0-future-\u7c7b\u578b"},"12.3.3. \u52a8\u624b\u5b9e\u73b0 Future \u7c7b\u578b"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.rectcircle.cn/posts/rust%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"},"https://www.rectcircle.cn/posts/rust%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/")),(0,l.kt)("h3",{id:"1234-\u52a8\u624b\u5b9e\u73b0-\u5f02\u6b65-sleep"},"12.3.4. \u52a8\u624b\u5b9e\u73b0 \u5f02\u6b65 sleep"),(0,l.kt)("p",null,"\u901a\u8fc7\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u65b9\u5f0f\u5b9e\u73b0\u4e00\u4e2a\u5f02\u6b65\u7684sleep, \u7c7b\u4f3c\u4e8easync_std::task:sleep"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use futures::executor::block_on;\nuse std::time::Duration;\nuse async_std::sync::Arc;\nuse std::sync::Mutex;\nuse futures::task::{Waker, Context, Poll};\nuse futures::Future;\nuse std::pin::Pin;\nuse std::thread::{spawn, sleep};\n\nfn main() {\n    block_on(async { // \u5f02\u6b65\u4ee3\u7801\u5757\n        println!("start");\n        TimerFuture::new(Duration::from_secs(2)).await;\n        println!("end");\n    });\n}\n\nstruct TimerFuture {\n    shared_state: Arc<Mutex<SharedState>>,\n}\n\nstruct SharedState {\n    completed: bool,\n    waker: Option<Waker>,\n}\n\nimpl Future for TimerFuture {\n    type Output = ();\n\n    fn poll(self: Pin<&mut Self>, cx: &mut Context<\'_>) -> Poll<Self::Output> {\n        let mut shared_state = self.shared_state.lock().unwrap();\n        if shared_state.completed {\n            Poll::Ready(())\n        } else {\n            shared_state.waker = Some(cx.waker().clone());\n            Poll::Pending\n        }\n    }\n}\n\nimpl TimerFuture {\n    fn new(du: Duration) -> Self {\n        let shared_state = Arc::new(Mutex::new(SharedState {\n            completed: false,\n            waker: None,\n        }));\n\n        let thread_shared_state = shared_state.clone();\n        spawn(move || {\n            sleep(du);\n            let mut state = thread_shared_state.lock().unwrap();\n            state.completed = true;\n            if let Some(waker) = state.waker.take() {\n                waker.wake();\n            }\n        });\n\n        TimerFuture {\n            shared_state,\n        }\n    }\n}\n\n\n\n')),(0,l.kt)("h2",{id:"124-async-std"},"12.4. async-std"),(0,l.kt)("p",null,"\u76f8\u8f83\u4e8e tokio, \u5e74\u8f7b, \u6ca1\u6709\u5386\u53f2\u5305\u88b1, \u517c\u5bb9\u6807\u51c6\u5e93, \u66f4\u52a0\u5c0f\u5de7"),(0,l.kt)("h2",{id:"125-tokio"},"12.5. tokio"),(0,l.kt)("h1",{id:"13-\u7b80\u5355\u6587\u4ef6\u7cfb\u7edf"},"13. \u7b80\u5355\u6587\u4ef6\u7cfb\u7edf"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/115464045"},"https://zhuanlan.zhihu.com/p/115464045")),(0,l.kt)("h1",{id:"14-\u7f51\u7edc\u7f16\u7a0b"},"14. \u7f51\u7edc\u7f16\u7a0b"),(0,l.kt)("h2",{id:"141-tcp"},"14.1. tcp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'use std::net::TcpListener;\nuse std::io::Read;\n\n// server\nfn main() -> std::io::Result<()> {\n    let listener = TcpListener::bind("127.0.0.1:1080")?;\n    for stream in listener.incoming() {\n        match stream {\n            Ok(mut stream) => {\n                let mut buf = [0u8; 512];\n                let len = stream.read(&mut buf)?;\n                println!("{}", String::from_utf8_lossy(&buf));\n            },\n            Err(_) => eprintln!("Error of accept request."),\n        }\n    }\n\n    Ok(())\n}\n\n\n// client\n\nfn main() -> std::io::Result<()> {\n    let mut stream = TcpStream::connect("127.0.0.1:1080")?;\n    for index in 0..3 {\n        let msg = format!("tcp msg {}", index);\n        stream.write_all(msg.as_bytes());\n        debug!("send: {}", msg);\n        let mut buf = [0u8; 512];\n        stream.read(&mut buf);\n    }\n\n    Ok(())\n}\n')),(0,l.kt)("h2",{id:"142-udp"},"14.2. udp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'// server\nuse std::net::UdpSocket;\n\nfn main() -> std::io::Result<()> {\n    let socket = UdpSocket::bind("127.0.0.1:1080")?;\n\n    loop {\n        let mut buf = [0u8; 512];\n\n        // receive from client\n        // len: data length\n        // src_addr: source address\n        let (len, src_addr) = socket.recv_from(&mut buf)?;\n\n        println!("recv: {}", String::from_utf8_lossy(&buf));\n\n        let resp_buf = &mut buf[..len];\n        resp_buf.reverse();\n        socket.send_to(resp_buf, src_addr)?;// send data to client\n        println!("send: {}", String::from_utf8_lossy(resp_buf));\n    }\n\n    Ok(())\n}\n\n// client\n\nfn main() -> std::io::Result<()> {\n    let socket = UdpSocket::bind("127.0.0.1:34254")?;\n    socket.connect("127.0.0.1:8080");\n\n    for index in 0..3 {\n        let msg = format!("udp msg {}", index);\n        socket.send(msg.as_bytes());\n        println!("send: {}", msg);\n\n        let mut buf = [0u8; 512];\n        socket.recv(&mut buf);\n        println!("recv: {}", String::from_utf8_lossy(&buf));\n    }\n\n    Ok(())\n}\n')),(0,l.kt)("h1",{id:"15-\u6d88\u606f\u4e2d\u95f4\u4ef6"},"15. \u6d88\u606f\u4e2d\u95f4\u4ef6"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/nkbai/learnrustbynats"},"https://github.com/nkbai/learnrustbynats")),(0,l.kt)("p",null,"TODO"),(0,l.kt)("h1",{id:"16-\u6e38\u620f\u5f00\u53d1"},"16. \u6e38\u620f\u5f00\u53d1"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.yuque.com/quaint/rust/ldnc5g"},"https://www.yuque.com/quaint/rust/ldnc5g"),"\nTODO"),(0,l.kt)("h1",{id:"17-\u722c\u866b"},"17. \u722c\u866b"),(0,l.kt)("p",null,"Hyper \uff1a\u4e00\u4e2a\u5feb\u901f\u548c\u6b63\u786e\u7684 Rust HTTP\u5b9e\u73b0\u3002 ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/hyperium/hyper"},"https://github.com/hyperium/hyper"),"\nreqwest : rust http client\u5b9e\u73b0 ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/seanmonstar/reqwest"},"https://github.com/seanmonstar/reqwest"),"\nhtml5ever\uff1aRust html\u89e3\u6790\u5e93 ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/servo/html5ever"},"https://github.com/servo/html5ever"),"\nselect :\u57fa\u4e8ehtml5ever \u7684html\u89e3\u6790\u5e93\uff0c\u7c7b\u4f3c\u4e8epython\u7684 beautifulsoap ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/utkarshkukreti/select.rs"},"https://github.com/utkarshkukreti/select.rs"),"\ncrates.io ",(0,l.kt)("a",{parentName:"p",href:"https://crates.io/crates/select"},"https://crates.io/crates/select"),"\n\u9644\uff1ahttps\uff1a//github.com/carllerche/curl-rust"),(0,l.kt)("h1",{id:"18-rpc-\u6846\u67b6"},"18. rpc \u6846\u67b6"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/36528189"},"https://zhuanlan.zhihu.com/p/36528189")),(0,l.kt)("h1",{id:"19-\u7f16\u5199\u4ee3\u7406"},"19. \u7f16\u5199\u4ee3\u7406"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwuhaolin/blog/issues/12"},"https://github.com/gwuhaolin/blog/issues/12"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/importcjj/rust-miniproxy"},"https://github.com/importcjj/rust-miniproxy"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/wangyuntao/socks5-rs"},"https://github.com/wangyuntao/socks5-rs"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/importcjj/gkd-rs"},"https://github.com/importcjj/gkd-rs")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/28645724"},"https://zhuanlan.zhihu.com/p/28645724"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://www.jianshu.com/p/d1048d0b687f"},"https://www.jianshu.com/p/d1048d0b687f"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/net/"},"https://doc.rust-lang.org/std/net/"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/97200083"},"https://zhuanlan.zhihu.com/p/97200083"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://www.mojidong.com/post/2015-03-07-socket5-1/"},"https://www.mojidong.com/post/2015-03-07-socket5-1/"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://www.zhihu.com/search?type=content&q=rust%20socket"},"https://www.zhihu.com/search?type=content&q=rust%20socket")),(0,l.kt)("p",null,"TODO"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://lowlvl.org/"},"https://lowlvl.org/")," \u4f7f\u7528 rust \u5b66\u4e60 tcp"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/shadowsocks/shadowsocks-rust"},"https://github.com/shadowsocks/shadowsocks-rust"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/trojan-gfw/trojan"},"https://github.com/trojan-gfw/trojan"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/p4gefau1t/trojan-r"},"https://github.com/p4gefau1t/trojan-r"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/importcjj/rust-miniproxy"},"https://github.com/importcjj/rust-miniproxy")),(0,l.kt)("h2",{id:"191-http-\u4ee3\u7406"},"19.1. http \u4ee3\u7406"),(0,l.kt)("p",null,"http \u4ee3\u7406: \u57fa\u4e8e HTTP \u534f\u8bae. \u5c5e\u4e8e\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u4e00\u822c\u53ea\u4f1a\u4ee3\u7406\u8f6c\u53d1 HTTP \u8bf7\u6c42\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528 CONNECT \u65b9\u6cd5\u6765\u5b9e\u73b0\u4e00\u822c TCP \u7684\u4ee3\u7406\u8f6c\u53d1\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/linmx0130/rust-http-proxy"},"https://github.com/linmx0130/rust-http-proxy")),(0,l.kt)("h2",{id:"192-socket-\u4ee3\u7406"},"19.2. socket \u4ee3\u7406"),(0,l.kt)("p",null,"Socket\u662f\u4e00\u5957\u6807\u51c6\uff0c\u5b83\u5b8c\u6210\u4e86\u5bf9TCP/IP\u7684\u9ad8\u5ea6\u5c01\u88c5; Socket = IP\u5730\u5740 + \u7aef\u53e3 + \u534f\u8bae\u3002"),(0,l.kt)("p",null,"socket5\u4ee3\u7406: socket5 \u662f\u4e00\u4e2atcp\u3001udp\u7684\u4ee3\u7406\u534f\u8bae(socket4\u4e0d\u652f\u6301udp), \u4f20\u8f93\u5c42\u4ee3\u7406\u534f\u8bae, \u5b83\u76f4\u63a5\u901a\u8fc7\u534f\u8bae\u63e1\u624b\u6765\u8fdb\u884c\u8fde\u63a5\uff0c\u5e76\u76f4\u63a5\u4fee\u6539\u62a5\u5934\u6765\u5b9e\u73b0\u8f6c\u53d1\uff0c\u6240\u4ee5\u901f\u5ea6\u975e\u5e38\u5feb,\u5927\u90e8\u5206\u8f6f\u4ef6\u90fd\u652f\u6301socket5\u4ee3\u7406\u3002"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/importcjj"},"https://github.com/importcjj"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/zhboner/realm"},"https://github.com/zhboner/realm")," \u6d41\u91cf\u8f6c\u53d1\n",(0,l.kt)("a",{parentName:"p",href:"https://cloud.tencent.com/developer/article/1484318"},"https://cloud.tencent.com/developer/article/1484318"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/gwuhaolin/blog/issues/12"},"https://github.com/gwuhaolin/blog/issues/12")),(0,l.kt)("h1",{id:"20-\u5f00\u53d1\u5fae\u4fe1\u5c0f\u7a0b\u5e8f-web-\u6e38\u620f"},"20. \u5f00\u53d1\u5fae\u4fe1\u5c0f\u7a0b\u5e8f-web \u6e38\u620f"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/planet0104"},"https://github.com/planet0104")),(0,l.kt)("h1",{id:"21-\u7b2c\u4e09\u65b9-crates"},"21. \u7b2c\u4e09\u65b9 crates"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://crates.io/"},"https://crates.io/"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://s0docs0rs.icopy.site/"},"https://s0docs0rs.icopy.site/")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://rust-lang-nursery.github.io/rust-cookbook/"},"https://rust-lang-nursery.github.io/rust-cookbook/")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/crate-ci/typos"},"https://github.com/crate-ci/typos")," \u62fc\u5199\u68c0\u67e5"),(0,l.kt)("h2",{id:"211-\u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\u5e93"},"21.1. \u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\u5e93"),(0,l.kt)("p",null,"clap",(0,l.kt)("br",{parentName:"p"}),"\n","serde",(0,l.kt)("br",{parentName:"p"}),"\n","reqwest  http client",(0,l.kt)("br",{parentName:"p"}),"\n","hyper  \u5feb\u901fHTTP\u5b9e\u73b0   , \u7ecf\u5e38\u4f7f\u7528Actix\u800c\u4e0d\u662fHyper",(0,l.kt)("br",{parentName:"p"}),"\n","rayon \u6570\u636e\u5e76\u884c",(0,l.kt)("br",{parentName:"p"}),"\n","slog and log",(0,l.kt)("br",{parentName:"p"}),"\n","itertools",(0,l.kt)("br",{parentName:"p"}),"\n","PyO3  \u5305\u88c5 rust lib \u5728 Python \u4e2d\u4f7f\u7528  (",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ijl/orjson"},"https://github.com/ijl/orjson"),", ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mre/hyperjson"},"https://github.com/mre/hyperjson"),")",(0,l.kt)("br",{parentName:"p"}),"\n","proptest \u57fa\u4e8e\u5c5e\u6027\u7684\u6d4b\u8bd5\u5e93",(0,l.kt)("br",{parentName:"p"}),"\n","libloading \u5c06Go\u6216\u5176\u4ed6c-lib\u5e93\u6df7\u5408\u5230Rust\u524d\u7aef",(0,l.kt)("br",{parentName:"p"}),"\n","regex   \u6b63\u5219    "),(0,l.kt)("h2",{id:"212-markdown"},"21.2. markdown"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/raphlinus/pulldown-cmark"},"https://github.com/raphlinus/pulldown-cmark")," \u7b80\u5355",(0,l.kt)("br",{parentName:"p"}),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/kivikakk/comrak"},"https://github.com/kivikakk/comrak")," \u590d\u6742, \u5f3a\u5927\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/wooorm/markdown-rs"},"https://github.com/wooorm/markdown-rs")),(0,l.kt)("h2",{id:"213-\u684c\u9762\u5f00\u53d1"},"21.3. \u684c\u9762\u5f00\u53d1"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/tauri-apps/tauri"},"https://github.com/tauri-apps/tauri")),(0,l.kt)("h2",{id:"214-\u89c6\u9891\u5904\u7406"},"21.4. \u89c6\u9891\u5904\u7406"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/larksuite/rsmpeg"},"https://github.com/larksuite/rsmpeg")," \u98de\u4e66\u56e2\u961f\u51fa\u54c1 ffmpeg \u7684 rust binding"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/gyroflow/gyroflow"},"https://github.com/gyroflow/gyroflow")," \u89c6\u9891\u9632\u6296"),(0,l.kt)("h2",{id:"215-\u56fe\u7247\u5904\u7406"},"21.5. \u56fe\u7247\u5904\u7406"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/Aloxaf/silicon"},"https://github.com/Aloxaf/silicon")),(0,l.kt)("h2",{id:"216-\u6e38\u620f\u5f00\u53d1\u4e09\u65b9\u5e93"},"21.6. \u6e38\u620f\u5f00\u53d1\u4e09\u65b9\u5e93"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/rust-gamedev/arewegameyet"},"https://github.com/rust-gamedev/arewegameyet")),(0,l.kt)("p",null,"bevy"),(0,l.kt)("h2",{id:"217-\u7cfb\u7edf\u4fe1\u606f"},"21.7. \u7cfb\u7edf\u4fe1\u606f"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/GuillaumeGomez/sysinfo"},"https://github.com/GuillaumeGomez/sysinfo")),(0,l.kt)("h2",{id:"218-web-\u5f00\u53d1\u53d1"},"21.8. web \u5f00\u53d1\u53d1"),(0,l.kt)("h3",{id:"2181-swagger-openapi-\u751f\u6210"},"21.8.1. swagger openapi \u751f\u6210"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/GREsau/okapi"},"https://github.com/GREsau/okapi")),(0,l.kt)("h3",{id:"2182-web\u6846\u67b6"},"21.8.2. web\u6846\u67b6"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://hardocs.com/d/rustprimer/quickstart/quickstart.html"},"https://hardocs.com/d/rustprimer/quickstart/quickstart.html")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.arewewebyet.org/"},"https://www.arewewebyet.org/")),(0,l.kt)("p",null,"rocket ",(0,l.kt)("a",{parentName:"p",href:"https://rocket.rs/"},"https://rocket.rs/")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/actix/actix-web"},"https://github.com/actix/actix-web")),(0,l.kt)("p",null,"tiny_http"),(0,l.kt)("p",null,"warp"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/yewstack/yew"},"https://github.com/yewstack/yew")," \u4f7f\u7528 jsx \u8bed\u6cd5\u5199 wasm"),(0,l.kt)("p",null,"\u5bf9\u6bd4\u9009\u578b ",(0,l.kt)("a",{parentName:"p",href:"http://jiagoushi.pro/book/export/html/334"},"http://jiagoushi.pro/book/export/html/334")),(0,l.kt)("p",null,"Zola \u9759\u6001\u7f51\u7ad9"),(0,l.kt)("h3",{id:"2183-orm"},"21.8.3. orm"),(0,l.kt)("p",null,"Diesel ORM"),(0,l.kt)("h3",{id:"2184-http-client"},"21.8.4. http client"),(0,l.kt)("p",null,"http - HTTP\u6807\u51c6\u76f8\u5173\u7684\u57fa\u7840\u7c7b\u578b\uff0c\u5982",(0,l.kt)("inlineCode",{parentName:"p"},"Request<T> \u3001Response<T>"),"\u4ee5\u53caStatusCode\u548c\u5e38\u7528\u7684Header"),(0,l.kt)("p",null,"hyper -  HTTP\u5e95\u5c42\u5e93\uff0c\u5b83\u5c01\u88c5\u4e86HTTP\u7684\u62a5\u6587\u89e3\u6790\u3001\u62a5\u6587\u7f16\u7801\u5904\u7406\u3001\u8fde\u63a5\u63a7\u5236"),(0,l.kt)("h2",{id:"219-\u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316"},"21.9. \u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316"),(0,l.kt)("h3",{id:"2191-toml"},"21.9.1. toml"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'use std::env::args;\n\nfn main() {\n    let config = {\n        let config_path = args().nth(1).unwrap();\n        let content = std::fs::read_to_string(config_path).unwrap();\n        content.parse::<toml::Value>().unwrap()\n    };\n    println!("{:#?}", config);\n    // let tbl = config.as_table().unwrap();\n    let input = config.get("input").unwrap();\n    println!("{:#?}", input);\n    let json_file = input.get("json_file").unwrap().as_str().unwrap();\n    println!("{:#?}", json_file);\n}\n\n\n')),(0,l.kt)("h3",{id:"2192-json"},"21.9.2. json"),(0,l.kt)("p",null,"serde_json \u662f\u57fa\u4e8e serde \u5b9e\u73b0\u7684"),(0,l.kt)("h2",{id:"2110-\u8bfb\u5199\u6570\u636e"},"21.10. \u8bfb\u5199\u6570\u636e"),(0,l.kt)("p",null,"bytes"),(0,l.kt)("h2",{id:"2111-\u589e\u5f3a\u5de5\u5177"},"21.11. \u589e\u5f3a\u5de5\u5177"),(0,l.kt)("p",null,"itertools"),(0,l.kt)("p",null,"time"),(0,l.kt)("h2",{id:"2112-\u6388\u6743-authorization"},"21.12. \u6388\u6743 Authorization"),(0,l.kt)("p",null,"oso"),(0,l.kt)("h2",{id:"2113-\u65e5\u5fd7\u7cfb\u7edf"},"21.13. \u65e5\u5fd7\u7cfb\u7edf"),(0,l.kt)("p",null,"\u65e5\u5fd7 ",(0,l.kt)("a",{parentName:"p",href:"https://segmentfault.com/a/1190000021681959"},"https://segmentfault.com/a/1190000021681959")),(0,l.kt)("p",null,"log \u63d0\u4f9b api, \u5982\u679c\u53ea\u662f\u5f00\u53d1\u4e00\u4e2a lib , \u65e0\u9700\u5bfc\u5165\u5b9e\u73b0, \u5982\u679c\u662f\u5728\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\u91cc, \u5fc5\u987b\u6709\u5b9e\u73b0\u624d\u80fd\u6253\u5370"),(0,l.kt)("p",null,"\u5177\u4f53\u5b9e\u73b0\u6709\u591a\u79cd"),(0,l.kt)("h3",{id:"21131-tracing"},"21.13.1. tracing"),(0,l.kt)("p",null,"\u65e5\u5fd7 \u8ffd\u8e2a"),(0,l.kt)("h3",{id:"21132-env_logger"},"21.13.2. env_logger"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"RUST_LOG=info ./bin_file")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'#[macro_use]\nextern crate log;\n\nfn main() {\n    env_logger::init();\n\n    debug!("debug");\n    info!("info");\n    warn!("warn");\n    trace!("trace");\n    error!("error"); // default\n}\n\n\n')),(0,l.kt)("h3",{id:"21133-log4rs-and-log"},"21.13.3. log4rs and log"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-t"},'[dependencies]\nlog = "0.4.11"\nlog4rs = "0.13.0"\n')),(0,l.kt)("p",null,"log4rs.yml"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'refresh_rate: 30 seconds\nappenders:\n  stdout:\n    kind: console\n  requests:\n    kind: file\n    path: "log/requests.log" # \u76f8\u5bf9\u4e8e\u9879\u76ee\u6839\u76ee\u5f55\n    encoder:\n      pattern: "{d} - {m}{n}"\nroot:\n  level: debug\n  appenders:\n    - stdout\n    - requests\n\n#loggers:\n#  app::backend::db:\n#    level: info\n#  app::requests:\n#    level: info\n#    appenders:\n#      - requests\n#    additive: false\n\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\nfn main() {\n    let log_file = "config/log4rs.yml"; // \u76f8\u5bf9\u4e8e \u9879\u76ee\u6839\u76ee\u5f55\n    log4rs::init_file(log_file, Default::default()).unwrap();\n    debug!(">>> load log config file: {}", log_file);\n\n    let listener = TcpListener::bind("127.0.0.1:8090").unwrap();\n    info!("visit ==> http://127.0.0.1:8090");\n}\n\n')),(0,l.kt)("h2",{id:"2114-\u6587\u672c\u89e3\u6790\u5668-parser"},"21.14. \u6587\u672c\u89e3\u6790\u5668 parser"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/Geal/nom"},"https://github.com/Geal/nom"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/115017849"},"https://zhuanlan.zhihu.com/p/115017849")),(0,l.kt)("p",null,"pest"),(0,l.kt)("p",null,"pom"),(0,l.kt)("h2",{id:"2115-lazy-static-\u5ef6\u8fdf\u521d\u59cb\u5316"},"21.15. lazy static \u5ef6\u8fdf\u521d\u59cb\u5316"),(0,l.kt)("p",null,"\u53ef\u4ee5\u628a\u5b9a\u4e49\u5168\u5c40\u9759\u6001\u53d8\u91cf\u5ef6\u8fdf\u5230\u8fd0\u884c\u65f6\uff0c\u800c\u975e\u7f16\u8bd1\u65f6"),(0,l.kt)("p",null,"\u5728\u8fd0\u884c\u65f6\u521d\u59cb\u5316\u9759\u6001\u53d8\u91cf, \u5373\u9759\u6001\u53d8\u91cf\u5ef6\u8fdf\u521d\u59cb\u5316"),(0,l.kt)("p",null,"\u4f8b\u5982, \u67d0\u4e9b\u9759\u6001\u53d8\u91cf\u7531\u547d\u4ee4\u884c\u53c2\u6570\u51b3\u5b9a, \u5f97\u7b49\u5230\u8fd0\u884c\u65f6\u624d\u80fd\u786e\u5b9a\u9759\u6001\u53d8\u91cf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'use std::collections::HashMap;\n\nuse lazy_static::lazy_static;\n// or\n// #[macro_use]\n// extern crate lazy_static;\n\nlazy_static! {\n    static ref HASH_MAP: HashMap<u32, &\'static str> = {\n        let mut m = HashMap::new();\n        m.insert(1, "hello");\n        m.insert(2, "world");\n        println!("hash map init");\n        m\n    };\n}\n\nfn main() {\n    println!("{}", HASH_MAP.get(&1).unwrap());\n    print!("{}", HASH_MAP.get(&2).unwrap());\n}\n\n\n')),(0,l.kt)("h2",{id:"2116-\u7535\u5b50\u4e66"},"21.16. \u7535\u5b50\u4e66"),(0,l.kt)("p",null,"mdBook \u751f\u6210\u7535\u5b50\u4e66"),(0,l.kt)("h2",{id:"2117-\u547d\u4ee4\u884c\u7a0b\u5e8f"},"21.17. \u547d\u4ee4\u884c\u7a0b\u5e8f"),(0,l.kt)("p",null,"indicatif \u8fdb\u5ea6\u6761"),(0,l.kt)("p",null,"clap \u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790"),(0,l.kt)("p",null,"\u501f\u52a9\u7b2c\u4e09\u65b9\u89e3\u6790\u5e93:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://rust-cli.github.io/book/tutorial/cli-args.html"},"https://rust-cli.github.io/book/tutorial/cli-args.html"),"\n",(0,l.kt)("a",{parentName:"p",href:"http://llever.com/cli-wg-zh/tutorial/cli-args.zh.html"},"http://llever.com/cli-wg-zh/tutorial/cli-args.zh.html")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/rust-cli"},"https://github.com/rust-cli")),(0,l.kt)("p",null,"ansi_term \u5f69\u8272\u8f93\u51fa"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fdehau/tui-rs"},"https://github.com/fdehau/tui-rs")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/cjbassi/ytop"},"https://github.com/cjbassi/ytop")," \u547d\u4ee4\u884c\u7cfb\u7edf\u76d1\u63a7\u7a0b\u5e8f"),(0,l.kt)("h3",{id:"21171-structopt"},"21.17.1. structopt"),(0,l.kt)("p",null,"\u6574\u5408 clap, \u5c06\u53c2\u6570\u76f4\u63a5\u89e3\u6790\u4e3a struct, \u66f4\u52a0\u65b9\u4fbf "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'use std::path::PathBuf;\nuse structopt::StructOpt;\n\n#[derive(StructOpt, Debug)]\n#[structopt(name = "basic")]\nstruct Opt {\n    // \u4e0d\u6307\u5b9a short long, \u4f1a\u4f7f\u7528 field name\n    #[structopt(short = "v", long)]\n    verbose: bool,\n\n    #[structopt(short = "r", long = "result", parse(from_os_str))]\n    result: PathBuf,\n\n    #[structopt(parse(from_os_str))]\n    files: Vec<PathBuf>,\n\n\n}\n\n\nfn main() {\n    // result this cmd: cargo run input.txt input2.txt -v --result res.xy\n    let opt = Opt::from_args();\n    println!("{:#?}", opt);\n}\n\n')),(0,l.kt)("h3",{id:"21172-clap"},"21.17.2. clap"),(0,l.kt)("p",null,"\u529f\u80fd\u5f3a\u5927, \u4f7f\u7528\u4e0d\u591f\u7b80\u5355"),(0,l.kt)("h2",{id:"2118-\u5f02\u6b65\u7f16\u7a0b"},"21.18. \u5f02\u6b65\u7f16\u7a0b"),(0,l.kt)("p",null,"tokio"),(0,l.kt)("h2",{id:"2119-websocket"},"21.19. websocket"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/websockets-rs/rust-websocket"},"https://github.com/websockets-rs/rust-websocket")),(0,l.kt)("p",null,"wsl \u4e2d\u53ef\u80fd build \u5931\u8d25, \u5982\u4e0b\u89e3\u51b3:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"apt install -y openssl\napt install -y libssl-dev\napt install -y pkg-config\n\n")),(0,l.kt)("h2",{id:"2120-\u7f29\u5c0f\u4f53\u79ef"},"21.20. \u7f29\u5c0f\u4f53\u79ef"),(0,l.kt)("p",null,"cargo-bloat"),(0,l.kt)("h2",{id:"2121-http-client"},"21.21. http client"),(0,l.kt)("p",null,"chttp"),(0,l.kt)("h2",{id:"2122-\u5bb9\u9519\u8fd0\u884c\u65f6"},"21.22. \u5bb9\u9519\u8fd0\u884c\u65f6"),(0,l.kt)("p",null,"bastion"),(0,l.kt)("h2",{id:"2123-\u76d1\u63a7"},"21.23. \u76d1\u63a7"),(0,l.kt)("p",null,"sentry \u9519\u8bef\u76d1\u63a7"),(0,l.kt)("h2",{id:"2124-\u7535\u5b50\u90ae\u4ef6"},"21.24. \u7535\u5b50\u90ae\u4ef6"),(0,l.kt)("p",null,"tera"),(0,l.kt)("h2",{id:"2125-\u5206\u53d1\u5de5\u5177"},"21.25. \u5206\u53d1\u5de5\u5177"),(0,l.kt)("p",null,"Cargo-release"),(0,l.kt)("h2",{id:"2126-\u5e76\u53d1\u7f16\u7a0b"},"21.26. \u5e76\u53d1\u7f16\u7a0b"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/crossbeam-rs/crossbeam"},"https://github.com/crossbeam-rs/crossbeam")),(0,l.kt)("p",null,"Rayon \u5e76\u884c\u6d41"),(0,l.kt)("p",null,"dashmap"),(0,l.kt)("p",null,"parking_lot"),(0,l.kt)("p",null,"crossbeam"),(0,l.kt)("p",null,"flume"),(0,l.kt)("p",null,"rsRust"),(0,l.kt)("h2",{id:"2127-gui-\u56fe\u5f62\u5e93"},"21.27. gui \u56fe\u5f62\u5e93"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/PistonDevelopers/conrod"},"https://github.com/PistonDevelopers/conrod")," 2d"),(0,l.kt)("h2",{id:"2128-\u5e95\u5c42\u7f51\u7edc-api"},"21.28. \u5e95\u5c42\u7f51\u7edc api"),(0,l.kt)("p",null,"libpnet, \u5982 ",(0,l.kt)("inlineCode",{parentName:"p"},'pnet = "0.25.0"')),(0,l.kt)("h2",{id:"2129-\u6b63\u5219"},"21.29. \u6b63\u5219"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"regex \u5b98\u65b9\u5b9e\u73b0, \u4e0d\u652f\u6301\u73af\u89c6 ( look-around ) \u548c \u53cd\u5411\u5f15\u7528 ( backreference)"),(0,l.kt)("li",{parentName:"ul"},"fancy-regex , \u652f\u6301 \u652f\u6301\u73af\u89c6 ( look-around ) \u548c \u53cd\u5411\u5f15\u7528 ( backreference)")),(0,l.kt)("h2",{id:"2130-\u968f\u673a"},"21.30. \u968f\u673a"),(0,l.kt)("h3",{id:"21301-rand-\u968f\u673a\u6570\u5b57"},"21.30.1. rand \u968f\u673a\u6570\u5b57"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rs"},'\nuse rand::prelude::*;\n\nfn main() {\n    let mut rng = rand::thread_rng();\n\n    let i = rng.gen_range(0..3); // 0/1/2\n    println!("{}", i);\n\n    // error\n    // let s: &str = rng.gen();\n\n    let boo = rng.gen::<bool>();\n    println!("bool true from gen() : {}", boo);\n    let rate = rng.gen_ratio(1, 2);\n    if rng.gen_bool(1.0 / 2.0) {\n        println!("percent of true");\n    }\n    if rng.gen() {\n        println!("bool from gen() without turbofish");\n    }\n    if rand::random() {\n        println!("rand bool from random()");\n    }\n}\n\n')),(0,l.kt)("h2",{id:"2131-\u641c\u7d22\u5f15\u64ce"},"21.31. \u641c\u7d22\u5f15\u64ce"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/valeriansaliou/sonic"},"https://github.com/valeriansaliou/sonic"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tantivy-search/tantivy"},"https://github.com/tantivy-search/tantivy"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://artem.krylysov.com/blog/2020/07/28/lets-build-a-full-text-search-engine/"},"https://artem.krylysov.com/blog/2020/07/28/lets-build-a-full-text-search-engine/")," \u5b9e\u73b0\u539f\u7406"),(0,l.kt)("h2",{id:"2132-\u5f00\u6e90\u96c6\u5408\u5bb9\u5668"},"21.32. \u5f00\u6e90\u96c6\u5408\u5bb9\u5668"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/jonhoo/flurry"},"https://github.com/jonhoo/flurry"),"  A port of Java's ConcurrentHashMap to Rust"),(0,l.kt)("h2",{id:"\u5176\u4ed6\u8bed\u8a00\u5f15\u64ce"},"\u5176\u4ed6\u8bed\u8a00\u5f15\u64ce"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/boa-dev/boa"},"https://github.com/boa-dev/boa")," js JavaScript \u5f15\u64ce"),(0,l.kt)("h1",{id:"22-\u5f00\u6e90\u9879\u76ee"},"22. \u5f00\u6e90\u9879\u76ee"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/62325234"},"https://zhuanlan.zhihu.com/p/62325234"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/p/139180791"},"https://zhuanlan.zhihu.com/p/139180791"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://www.zhihu.com/question/30511494"},"https://www.zhihu.com/question/30511494")),(0,l.kt)("h1",{id:"23-\u53c2\u8003\u94fe\u63a5"},"23. \u53c2\u8003\u94fe\u63a5"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://fasterthanli.me/articles/a-half-hour-to-learn-rust"},"https://fasterthanli.me/articles/a-half-hour-to-learn-rust")),(0,l.kt)("p",null,"libp2p",(0,l.kt)("br",{parentName:"p"}),"\n","\u662f\u7528\u4e8e\u6784\u5efaP2P\u7f51\u7edc\u7684\u6a21\u5757\u5316\u7f51\u7edc\u5806\u6808\u548c\u5e93\uff0c\u6e90\u81ea\u5f00\u6e90\u9879\u76eeIPFS\uff0c\u6a21\u5757\u5316\u8bbe\u8ba1\u4f7f\u5b83\u80fd\u591f\u7528\u6765\u6784\u5efa\u5404\u79cd\u53bb\u4e2d\u5fc3\u5316\u5e94\u7528\u7684P2P\u7f51\u7edc\u5c42\u3002\u76ee\u524d\uff0c\u77e5\u540d\u533a\u5757\u94fe\u9879\u76eeEthereum 2.0\u3001Pokdot\u3001BitXHub\u90fd\u9009\u62e9\u57fa\u4e8eLibp2p\u5e93\u642d\u5efa\u7cfb\u7edf\u7f51\u7edc\u5c42\u3002"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/WumaCoder/rust-boom"},"https://github.com/WumaCoder/rust-boom")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/rustlang-cn/rusty-book"},"https://github.com/rustlang-cn/rusty-book")," \u5f00\u6e90\u5e93"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/search?q=algorithm+language%3ARust&type=Repositories&ref=advsearch&l=Rust&l="},"https://github.com/search?q=algorithm+language%3ARust&type=Repositories&ref=advsearch&l=Rust&l=")," \u7b97\u6cd5"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/rust-unofficial/patterns"},"https://github.com/rust-unofficial/patterns")," \u89c4\u8303"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/lapce/lapce"},"https://github.com/lapce/lapce")," \u7f16\u8f91\u5668, ui"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/develon2015/dnsd"},"https://github.com/develon2015/dnsd"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/develon2015/remote_bind"},"https://github.com/develon2015/remote_bind"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ppbl/scicode"},"https://github.com/ppbl/scicode")," yew+actix"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://jasonkayzk.github.io/2022/02/20/%E4%BD%BF%E7%94%A8Rust%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"},"https://jasonkayzk.github.io/2022/02/20/%E4%BD%BF%E7%94%A8Rust%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/")," \u53cc\u5411\u94fe\u8868"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/bitlabx/cherry"},"https://github.com/bitlabx/cherry")," orm"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/mini-lust/tutorials"},"https://github.com/mini-lust/tutorials")," \u624b\u628a\u624b\u52a8\u624b\u5b9e\u73b0 rpc"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://rust-cli.github.io/book/index.html"},"https://rust-cli.github.io/book/index.html")," \u547d\u4ee4\u884c"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/wisespace-io/binance-rs"},"https://github.com/wisespace-io/binance-rs")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=qyRIkcdRfRg&t=974s"},"https://www.youtube.com/watch?v=qyRIkcdRfRg&t=974s")," \u4f01\u4e1a\u7ea7\u5f00\u53d1\u6700\u4f73\u5b9e\u8df5\n",(0,l.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=36_TiWriqQ4"},"https://www.youtube.com/watch?v=36_TiWriqQ4")," rust and webasembly"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://course.rs/about-book.html"},"https://course.rs/about-book.html")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/sunface/rust-course"},"https://github.com/sunface/rust-course")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://books.budshome.com/"},"https://books.budshome.com/")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/sunface/rust-course"},"https://github.com/sunface/rust-course")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/0voice/Understanding_in_Rust"},"https://github.com/0voice/Understanding_in_Rust")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/KernelErr/awesome-rust-zh"},"https://github.com/KernelErr/awesome-rust-zh"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/studyrs/fancy-rust"},"https://github.com/studyrs/fancy-rust"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/TaKO8Ki/awesome-alternatives-in-rust"},"https://github.com/TaKO8Ki/awesome-alternatives-in-rust")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/pingcap/talent-plan"},"https://github.com/pingcap/talent-plan")," \u8bfe\u7a0b"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/meilisearch/MeiliSearch"},"https://github.com/meilisearch/MeiliSearch")," \u641c\u7d22\u5f15\u64ce, \u7c7b\u4f3c algolia, \u4e0d\u8fc7\u662f\u5f00\u6e90\u7684"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://docs.rs/"},"https://docs.rs/"),"  cates api \u6587\u6863\n",(0,l.kt)("a",{parentName:"p",href:"https://crates.io/"},"https://crates.io/")," crates \u641c\u7d22"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/pretzelhammer/rust-blog"},"https://github.com/pretzelhammer/rust-blog")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials"},"https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials")," \u5728\u6811\u8393\u6d3e\u4e0a\u5b9e\u73b0\u64cd\u4f5c\u7cfb\u7edf"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/mre/idiomatic-rust"},"https://github.com/mre/idiomatic-rust")," \u6700\u4f73\u5b9e\u8df5\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ctjhoa/rust-learning"},"https://github.com/ctjhoa/rust-learning")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/sassman/t-rec-rs"},"https://github.com/sassman/t-rec-rs")," \u7ec8\u7aef\u8bb0\u5f55\u5de5\u5177 \u5f55\u5236 gif"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/wtklbm/crm"},"https://github.com/wtklbm/crm")," \u7b80\u5355\u9879\u76ee \u955c\u50cf\u6e90\u5207\u6362"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials"},"https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials")," \u5d4c\u5165\u5f0f os \u5185\u6838 \u5f00\u53d1"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://folyd.com/blog/"},"https://folyd.com/blog/")," Rust\u7684Pin\u4e0eUnpin"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/ajmwagar"},"https://github.com/ajmwagar")," rust \u5c0f\u9879\u76ee\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/kilerd"},"https://github.com/kilerd"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ramsayleung"},"https://github.com/ramsayleung")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/warycat/rustgym"},"https://github.com/warycat/rustgym")," \u7b97\u6cd5\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/aylei/leetcode-rust"},"https://github.com/aylei/leetcode-rust")," \u7b97\u6cd5\u5b9e\u73b0\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/sunface/rust-algos"},"https://github.com/sunface/rust-algos"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/dxx/datastructure-algorithm"},"https://github.com/dxx/datastructure-algorithm")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/rust-unofficial/awesome-rust"},"https://github.com/rust-unofficial/awesome-rust"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/rust-lang-nursery/rust-cookbook"},"https://github.com/rust-lang-nursery/rust-cookbook")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://play.integer32.com/"},"https://play.integer32.com/"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://play.rust-lang.org/"},"https://play.rust-lang.org/")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://rust-unofficial.github.io/patterns/"},"https://rust-unofficial.github.io/patterns/")," \u8bbe\u8ba1\u6a21\u5f0f"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/"},"https://www.rust-lang.org/")," \u5b98\u65b9\u7ad9"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.zhihu.com/question/31038569"},"https://www.zhihu.com/question/31038569")," \u5982\u4f55\u5b66"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://users.rust-lang.org/"},"https://users.rust-lang.org/")," \u793e\u533a\n",(0,l.kt)("a",{parentName:"p",href:"https://rustcc.cn/"},"https://rustcc.cn/")," \u4e2d\u6587\u793e\u533a"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/"},"https://doc.rust-lang.org/std/")," std api"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html"},"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html")," the book \u624b\u518c\n",(0,l.kt)("a",{parentName:"p",href:"https://kaisery.github.io/trpl-zh-cn/title-page.html"},"https://kaisery.github.io/trpl-zh-cn/title-page.html")," the book \u7ffb\u8bd1\n",(0,l.kt)("a",{parentName:"p",href:"https://course.rs/into-rust.html"},"https://course.rs/into-rust.html"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://rust-by-example.budshome.com/"},"https://rust-by-example.budshome.com/")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/rust-lang/nomicon"},"https://github.com/rust-lang/nomicon")," \u6b7b\u7075\u4e66 \u8bbe\u8ba1\u539f\u7406"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/stable/reference/introduction.html"},"https://doc.rust-lang.org/stable/reference/introduction.html")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/stable/rust-by-example/macros/dsl.html"},"https://doc.rust-lang.org/stable/rust-by-example/macros/dsl.html")," example\n",(0,l.kt)("a",{parentName:"p",href:"https://books.budshome.com/rust-by-example/testing/unit_testing.html"},"https://books.budshome.com/rust-by-example/testing/unit_testing.html")," \u4e2d\u6587"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://rust-unofficial.github.io/too-many-lists/"},"https://rust-unofficial.github.io/too-many-lists/")," another tutorial\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/rust-unofficial/too-many-lists"},"https://github.com/rust-unofficial/too-many-lists")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://cheats.rs/#data-structures"},"https://cheats.rs/#data-structures")," \u901f\u67e5\u8868 cheatsheet"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/index.html"},"https://doc.rust-lang.org/cargo/index.html")," cargo book\n",(0,l.kt)("a",{parentName:"p",href:"https://cargo.budshome.com/index.html"},"https://cargo.budshome.com/index.html")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/chinanf-boy?tab=stars"},"https://github.com/chinanf-boy?tab=stars")," - \u7231\u597d\u8005\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/AurevoirXavier"},"https://github.com/AurevoirXavier")," - \u7231\u597d\u8005\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/BurntSushi"},"https://github.com/BurntSushi")," - master\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/mre"},"https://github.com/mre")," master\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/rust-lang"},"https://github.com/rust-lang")," \u5b98\u65b9GitHub"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"http://intorust.com/"},"http://intorust.com/")," \u52a8\u753b\u4ecb\u7ecd"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/c_208092758/"},"https://zhuanlan.zhihu.com/c_208092758/")," \u77e5\u4e4e\u4e13\u680f\n",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/c_118514498"},"https://zhuanlan.zhihu.com/c_118514498")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/phil-opp/blog_os"},"https://github.com/phil-opp/blog_os")," rust \u5b9e\u73b0os"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/Kilerd/resource"},"https://github.com/Kilerd/resource")," - \u4e2d\u6587\u8d44\u6599\u6536\u96c6\n",(0,l.kt)("a",{parentName:"p",href:"https://zhuanlan.zhihu.com/rust-lang"},"https://zhuanlan.zhihu.com/rust-lang"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://wiki.jikexueyuan.com/project/rust-primer/concurrency-parallel-thread/thread.html"},"https://wiki.jikexueyuan.com/project/rust-primer/concurrency-parallel-thread/thread.html")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.zhihu.com/question/382172347/answer/1103525234"},"https://www.zhihu.com/question/382172347/answer/1103525234")," tips\n",(0,l.kt)("a",{parentName:"p",href:"https://www.zhihu.com/question/393796866/answer/1213171124"},"https://www.zhihu.com/question/393796866/answer/1213171124")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.zhihu.com/question/30407715/answer/48032883"},"https://www.zhihu.com/question/30407715/answer/48032883")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.zhihu.com/question/34665842?sort=created"},"https://www.zhihu.com/question/34665842?sort=created")," \u7ec3\u624b\n",(0,l.kt)("a",{parentName:"p",href:"https://www.zhihu.com/question/352420716/answer/973279231"},"https://www.zhihu.com/question/352420716/answer/973279231")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.zhihu.com/question/30511494/answer/649921526"},"https://www.zhihu.com/question/30511494/answer/649921526")," \u503c\u5f97\u5173\u6ce8"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/rajasekarv/vega"},"https://github.com/rajasekarv/vega")," spark \u66ff\u4ee3"))}d.isMDXComponent=!0},10194:function(n,e,t){e.Z=t.p+"assets/images/rust_macro_process-ee8b27ee3a95c102b98fc156cdce0bf8.png"}}]);